!BAT
#-#+ ISOINFO.G4B v0.7.0_VB_CLEAN (20240406), by deomsh
if "%~1"=="" && call :help "smallhelp" && goto :eof ! if /i "%~1"=="/?" && goto :help
if exist @uefi && graphicsmode > nul &; if %@retval%<=0xFF && echo Textmode of grub4efi not supported && goto :eof
setlocal && set * && set "Lsession=%Lsession%"
set "rt=%@root%" &; if not exist @uefi && if "%rt:~0,3%"=="(cd" && set /A drvnum=*0x82A0&0xff > nul &; set "rt=(%drvnum%)%rt:~4%" ;; debug status > nul ;; set /a debugsts=%@retval% > nul ;; debug 1 ;; pager status > nul ;; set /a pagersts=%@retval% > nul ;; set /a g4dver=*0x8278&0xffffffff > nul &; if %g4dver%==20160118 > nul && debug 0 ! if not %g4dver%<=20160118 > nul && debug msg=0 ! echo Grub4dos version %g4dver%<20160118 is not supported && set result=0 && set reuse=N && goto :eov
set "Csession=set "rt=%rt%" && set debugsts=%debugsts% && set pagersts=%pagersts%" && set rt= && set debugsts= && set pagersts=
:parseswitchloop
if not exist ISOVDS &; if not /i "%~1"=="--VDS" if not /i "%~1"=="--ISOVDS" |; set ISOVDS=Y && set "NULL= > nul" && set "find=%find%ISOVDS " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOPVD &; if not /i "%~1"=="--PVD" if not /i "%~1"=="--ISOPVD" |; set ISOPVD=Y && set "NULL= > nul" && set "find=%find%ISOPVD " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOSVD &; if not /i "%~1"=="--ISOSVD" if not /i "%~1"=="--ISOSVD1" if not /i "%~1"=="--SVD" if not /i "%~1"=="--SVD1" |; set ISOSVD=Y && set "NULL= > nul" && set "find=%find%ISOSVD " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOSVD2 &; if not /i "%~1"=="--ISOSVD2" if not /i "%~1"=="--SVD2" |; set ISOSVD2=Y && set "NULL= > nul" && set "find=%find%ISOSVD2 " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOBD &; if not /i "%~1"=="--ISOBD" if not /i "%~1"=="--ISOBTD" if not /i "%~1"=="--ISOET" if not /i "%~1"=="--ISOELTORITO" if not /i "%~1"=="--ISO EL TORITO" if not /i "%~1"=="--BD" if not /i "%~1"=="--BTD" if not /i "%~1"=="--ET" if not /i "%~1"=="--ELTORITO" if not /i "%~1"=="--EL TORITO" |; set ISOBD=Y && set "NULL= > nul" && set "find=%find%ISOBD " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOVPD &; if not /i "%~1"=="--ISOVPD" if not /i "%~1"=="--VPD" |; set ISOVPD=Y && set "NULL= > nul" && set "find=%find%ISOVPD " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOTD &; if not /i "%~1"=="--VDT" if not /i "%~1"=="--ISOVDT" |; set ISOTD=Y && set "NULL= > nul" && set "find=%find%ISOTD " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 && if not exist UDFROOT &; if not /i "%~1"=="--ROOT" if not /i "%~1"=="--ISOROOT" if not /i "%~1"=="--ISOROOT1" |; set ISOROOT=Y && set "NULL= > nul" && set "find=%find%ISOROOT " && shift && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--ISOROOT2" if not /i "%~1"=="--ROOT2" |; set ISOROOT2=Y && set "NULL= > nul" && set "find=%find%ISOROOT2 " && shift && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--ISOROOT3" if not /i "%~1"=="--ROOT3" |; set ISOROOT3=Y && set "NULL= > nul" && set "find=%find%ISOROOT3 " && shift && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--DIRR" if not /i "%~1"=="--DIRRR" if not /i "%~1"=="--ISODIRR" if not /i "%~1"=="--ISODIRRR" if not /i "%~1"=="--ISODIR1R" if not /i "%~1"=="--ISODIR1RR" |; set "ISODIRR=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIRR && if not "%ISODIRR:~0,1%"=="(" && if not "%ISODIRR:~0,2%"=="--" && shift ! set ISODIRR=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIRR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--DIRR2" if not /i "%~1"=="--DIRRR2" if not /i "%~1"=="--DIR2RR" if not /i "%~1"=="--DIR2R" if not /i "%~1"=="--ISODIRR2" if not /i "%~1"=="--ISODIR2RR" if not /i "%~1"=="--ISODIR2R" if not /i "%~1"=="--ISODIR2RR" |; set "ISODIRR2=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIRR2 && if not "%ISODIRR2:~0,1%"=="(" && if not "%ISODIRR2:~0,2%"=="--" && shift ! set ISODIRR2=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIRR2 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--DIRR3" if not /i "%~1"=="--DIRRR3" if not /i "%~1"=="--DIR3RR" if not /i "%~1"=="--DIR3R" if not /i "%~1"=="--ISODIRR3" if not /i "%~1"=="--ISODIR3RR" if not /i "%~1"=="--ISODIR3R" if not /i "%~1"=="--ISODIR3RR" |; set "ISODIRR3=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIRR3 && if not "%ISODIRR3:~0,1%"=="(" && if not "%ISODIRR3:~0,2%"=="--" && shift ! set ISODIRR3=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIRR3 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--DIR" if not /i "%~1"=="--ISODIR" if not /i "%~1"=="--ISODIR1" |; set "ISODIR=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIR && if not "%ISODIR:~0,1%"=="(" && if not "%ISODIR:~0,2%"=="--" && shift ! set ISODIR=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--ISODIR2" if not /i "%~1"=="--DIR2" |; set "ISODIR2=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIR2 && if not "%ISODIR2:~0,1%"=="(" && if not "%ISODIR2:~0,2%"=="--" && shift ! set ISODIR2=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIR2 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--ISODIR3" if not /i "%~1"=="--DIR3" |; set "ISODIR3=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist ISODIR3 && if not "%ISODIR3:~0,1%"=="(" && if not "%ISODIR3:~0,2%"=="--" && shift ! set ISODIR3=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODIR3 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--record" if not /i "%~1"=="--isorecord" |; set "cdfile=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile && if not "%cdfile:~0,1%"=="(" && if not /i "%cdfile:~0,2%"=="--" && shift ! set cdfile=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--record2" if not /i "%~1"=="--isorecord2" |; set "cdfile2=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile2 && if not "%cdfile2:~0,1%"=="(" && if not /i "%cdfile2:~0,2%"=="--" && shift ! set cdfile2=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODR2 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not /i "%~1"=="--record3" if not /i "%~1"=="--isorecord3" |; set "cdfile3=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile3 && if not "%cdfile3:~0,1%"=="(" && if not /i "%cdfile3:~0,2%"=="--" && shift ! set cdfile3=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%ISODR3 " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 && if not exist ISODRR &; if not /i "%~1"=="--recordRR" if not /i "%~1"=="--recordR" if not /i "%~1"=="--recordRR1" if not /i "%~1"=="--isorecordRR" if not /i "%~1"=="--isorecordR1" |; set "cdfile=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile && if not "%cdfile:~0,1%"=="(" && if not /i "%cdfile:~0,2%"=="--" && shift ! set cdfile=/ && set cdpath=/ && set cdname= && set cdext= &; set ISODRR=Y && set "find=%find%ISODRR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 && if not exist ISODRR &; if not /i "%~1"=="--recordRR2" if not /i "%~1"=="--recordR2" if not /i "%~1"=="--record2R" if not /i "%~1"=="--record2RR" if not /i "%~1"=="--isorecordR2" if not /i "%~1"=="--isorecordRR2" if not /i "%~1"=="--isorecord2R" if not /i "%~1"=="--isorecord2RR" |; set "cdfile2=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile2 && if not "%cdfile2:~0,1%"=="(" && if not /i "%cdfile2:~0,2%"=="--" && shift ! set cdfile=/ && set cdpath=/ && set cdname= && set cdext= &; set ISODRR=Y && set "find=%find%ISODRR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 && if not exist ISODRR &; if not /i "%~1"=="--recordRR3" if not /i "%~1"=="--recordR3" if not /i "%~1"=="--record3R" if not /i "%~1"=="--record3RR" if not /i "%~1"=="--isorecordR3" if not /i "%~1"=="--isorecordRR3" if not /i "%~1"=="--isorecord3R" if not /i "%~1"=="--isorecord3RR" |; set "cdfile3=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist cdfile3 && if not "%cdfile3:~0,1%"=="(" && if not /i "%cdfile3:~0,2%"=="--" && shift ! set cdfile=/ && set cdpath=/ && set cdname= && set cdext= &; set ISODRR=Y && set "find=%find%ISODRR " && goto :parseswitchloop
if not exist ISOVDS && if not exist UDFVDS && if not exist UDFVDS2 &; if not /i "%~1"=="--VDS" if not /i "%~1"=="--UDFVDS" |; set UDFVDS=Y && set "NULL= > nul" && set "find=UDFVDS " && shift && goto :parseswitchloop
if exist ISOVDS && if not exist UDFVDS && if not exist UDFVDS2 &; if not /i "%~1"=="--UDFVDS" if not /i "%~1"=="--VDS" |; set UDFVDS=Y && set "NULL= > nul" && set "find=UDFVDS " && shift && goto :parseswitchloop
if not exist ISOVDS && if not exist UDFVDS && if not exist UDFVDS2 &; if not /i "%~1"=="--VDS" if not /i "%~1"=="--UDFVDS" |; set UDFVDS=Y && set "NULL= > nul" && set "find=UDFVDS " && shift && goto :parseswitchloop
if not exist UDFVDS2 && if not exist UDFVDS &; if not /i "%~1"=="--UDFVDS2" if not /i "%~1"=="--VDS2" |; set UDFVDS2=Y && set "NULL= > nul" && set "find=UDFVDS2 " && shift && goto :parseswitchloop
if not exist UDFVDS2 && if not exist UDFVDS if not exist UDFFSDS &; if not /i "%~1"=="--UDFFDS" if not /i "%~1"=="--FDS" |; set UDFFSDS=Y && set "NULL= > nul" && set "find=UDFFSDS " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFED &; if not /i "%~1"=="--UDFVRS" if not /i "%~1"=="--VRS" if not /i "%~1"=="--UDFED" if not /i "%~1"=="--ED" |; set UDFED=Y && set "NULL= > nul" && set "find=%find%UDFED " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFAVDP &; if not /i "%~1"=="--UDFAVDP" if not /i "%~1"=="--AVDP" |; set UDFAVDP=Y && set "NULL= > nul" && set "find=%find%UDFAVDP " && shift && goto :parseswitchloop
if not exist ISOPVD && if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFPVD &; if not /i "%~1"=="--UDFPVD" if not /i "%~1"=="--PVD" |; set UDFPVD=Y && set "NULL= > nul" && set "find=%find%UDFPVD " && shift && goto :parseswitchloop
if exist ISOPVD && if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFPVD &; if not /i "%~1"=="--UDFPVD" if not /i "%~1"=="--PVD" |; set UDFPVD=Y && set "NULL= > nul" && set "find=%find%UDFPVD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFIUVD &; if not /i "%~1"=="--UDFIUVD" if not /i "%~1"=="--IUVD" |; set UDFIUVD=Y && set "NULL= > nul" && set "find=%find%UDFIUVD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFPD &; if not /i "%~1"=="--UDFPD" if not /i "%~1"=="--PD" |; set UDFPD=Y && set "NULL= > nul" && set "find=%find%UDFPD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFLVD &; if not /i "%~1"=="--UDFLVD" if not /i "%~1"=="--LVD" |; set UDFLVD=Y && set "NULL= > nul" && set "find=%find%UDFLVD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFUSD &; if not /i "%~1"=="--UDFUSD" if not /i "%~1"=="--USD" |; set UDFUSD=Y && set "NULL= > nul" && set "find=%find%UDFUSD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFLVID &; if not /i "%~1"=="--UDFLVID" if not /i "%~1"=="--LVID" |; set UDFLVID=Y && set "NULL= > nul" && set "find=%find%UDFLVID " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFFSD &; if not /i "%~1"=="--UDFFSD" if not /i "%~1"=="--FSD" |; set UDFFSD=Y && set "NULL= > nul" && set "find=%find%UDFFSD " && shift && goto :parseswitchloop
if not exist UDFVDS && if not exist UDFVDS2 && if not exist UDFTD &; if not /i "%~1"=="--UDFTD" if not /i "%~1"=="--TD" |; set UDFTD=Y && set "NULL= > nul" && set "find=%find%UDFTD " && shift && goto :parseswitchloop
if not exist UDFFSDS && if not exist UDFFE &; if not /i "%~1"=="--UDFFE" if not /i "%~1"=="--FE" |; set UDFFE=Y && set "NULL= > nul" && set "find=%find%UDFFE " && shift && goto :parseswitchloop
if not exist UDFFSDS && if not exist UDFEFE &; if not /i "%~1"=="--UDFEFE" if not /i "%~1"=="--EFE" |; set UDFEFE=Y && set "NULL= > nul" && set "find=%find%UDFEFE " && shift && goto :parseswitchloop
if not exist ISOROOT && if not exist UDFFSDS && if not exist UDFROOT &; if not /i "%~1"=="--ROOT" if not /i "%~1"=="--UDFROOT" |; set UDFROOT=Y && set "NULL= > nul" && set "find=%find%UDFFID " && shift && goto :parseswitchloop
if not exist cdpath && if exist ISOROOT && if not exist UDFFSDS && if not exist UDFROOT &; if not /i "%~1"=="--ROOT" if not /i "%~1"=="--UDFROOT" |; set UDFROOT=Y && set "NULL= > nul" && set "find=%find%UDFFID " && shift && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT &; if not /i "%~1"=="--DIR" if not /i "%~1"=="--UDFDIR" |; set "UDFDIR=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist UDFDIR && if not "%UDFDIR:~0,1%"=="(" && if not /i "%UDFDIR:~0,2%"=="--" && shift ! set UDFDIR=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%UDFDIR " && goto :parseswitchloop
if not exist cdpath && if not exist ISOROOT && if not exist UDFROOT &; if not /i "%~1"=="--record" if not /i "%~1"=="--udfrecord" |; set "udffile=%~2" &; setlocal && call :getnameandextension "(fd)%~2" &; endlocal && set "cdpath=%path%" && set "cdname=%~n2" && set "cdext=%~x2" && set "NULL= > nul" && shift &; if exist udffile && if not "%udffile:~0,1%"=="(" && if not /i "%udffile:~0,2%"=="--" && shift ! set udffile=/ && set cdpath=/ && set cdname= && set cdext= &; set "find=%find%UDFFID " && goto :parseswitchloop
if not exist UDFVAT &; if not /i "%~1"=="--UDFVAT" if not /i "%~1"=="--VAT" |; set UDFVAT=Y && set "NULL= > nul" && set "find=%find%UDFVAT " && shift && goto :parseswitchloop
if not exist MIRROR &; if /i "%~1"=="--MIRROR" && set MIRROR=Y && shift && goto :parseswitchloop
if not exist COPY &; if not /i "%~1"=="--MDCOPY" if not /i "%~1"=="--COPY" |; set COPY=MD3 && shift && goto :parseswitchloop
if not exist COPY &; if not /i "%~1"=="--MDMAP" if not /i "%~1"=="--MAP" |; set /A COPY=%~2 &; if exist COPY && if not "%COPY:~0,1%"=="(" && if not /i "%COPY:~0,2%"=="--" && shift ! set COPY= &; if not %COPY%==0x21 && if not %COPY%==0x23 && if not %COPY%==0x7F && if not %COPY%==0xFF && shift && goto :parseswitchloop ! echo Switch '--MDMAP=%~2' is not valid && set result=0 && call :help "smallhelp" && set reuse=N && goto :eov
if not exist hexview &; if /i "%~1"=="--hex" && set hexview=Y && shift && goto :parseswitchloop
if not exist PREVIOUS &; if /i "%~1"=="--PREVIOUS" && set PREVIOUS=N && shift && goto :parseswitchloop
if not exist UDFSPT &; if not /i "%~1"=="--UDFSPT" if not /i "%~1"=="--SPT" |; set UDFSPT=Y && set "NULL= > nul" && set "find=%find%UDFSPT " && shift && goto :parseswitchloop
if not exist UDFSBD &; if not /i "%~1"=="--UDFSBD" if not /i "%~1"=="--SBD" |; set UDFSBD=Y && set "NULL= > nul" && set "find=%find%UDFSBD " && shift && goto :parseswitchloop
if not exist UDFMF &; if not /i "%~1"=="--UDFMF" if not /i "%~1"=="--MF" |; set UDFMF=Y && set "NULL= > nul" && set "find=%find%UDFMF " && shift && goto :parseswitchloop
if not exist UDFMMF &; if not /i "%~1"=="--UDFMMF" if not /i "%~1"=="--MMF" |; set UDFMMF=Y && set "NULL= > nul" && set "find=%find%UDFMMF " && shift && goto :parseswitchloop
if not exist UDFMBF &; if not /i "%~1"=="--UDFMBF" if not /i "%~1"=="--MBF" |; set UDFMBF=Y && set "NULL= > nul" && set "find=%find%UDFMBF " && shift && goto :parseswitchloop
if not exist DEEP &; if not /i "%~1"=="--ISODEEP" if not /i "%~1"=="--DEEP" |; set DEEP=Y && shift && goto :parseswitchloop
if not exist USECTOR &; if not /i "%~1"=="--UDFLSN" if not /i "%~1"=="--LSN" |; set /A "USECTOR=%~2" && set "NULL= > nul" && set "find=USECTOR " && shift && shift && goto :parseswitchloop
if not exist OFFSET &; if not /i "%~1"=="--UDFOFFSET" if not /i "%~1"=="--OFFSET" |; set /A "OFFSET=%~2" &; if %OFFSET%==0 && set OFFSET= ! set OFFSET=%OFFSET% &; shift && shift && goto :parseswitchloop
if not exist USECTOR if not exist LBN &; if not /i "%~1"=="--UDFLBN" if not /i "%~1"=="--LBN" |; set /A "LBN=%~2" && set "NULL= > nul" && set "find=USECTOR " && shift && shift && goto :parseswitchloop
if not exist CASE &; if not /i "%~1"=="--CASE" |; set CASE=Y && shift && goto :parseswitchloop
if not exist MDBASE &; if not /i "%~1"=="--MDBASE" |; set /A "MDBASE=%~2" &; if %MDBASE%>=0x19000 && set Lsession= && shift && shift && goto :parseswitchloop ! echo Switch '--MDBASE=%MDBASE%' is not valid, minimum value 0x19000 && set result=0 && set reuse=N && goto :eov
if exist OFFSET &; if not exist USECTOR && if not exist LBN && echo Switch '--LSN=sector'|'--LBN=number' is obligatory if using '--OFFSET=%OFFSET%' && call :help "smallhelp" &; set result=0 && goto :eov
if not exist Q &; if not /i "%~1"=="--Q" |; set Q=Y && set "NULL= > nul" && shift && goto :parseswitchloop
if not exist LBsize &; if not /i "%~1"=="--BLOCKSIZE" |; set /A "LBsize=%~2" && set Lsession= && shift && shift && goto :parseswitchloop
if not exist ATTRIB &; if not /i "%~1"=="--ISOATTRIB" if not /i "%~1"=="--UDFATTRIB" if not /i "%~1"=="--ATTRIB" |; set /u "ATTRIB=%~2" && shift &; if exist ATTRIB && if not "%ATTRIB:~0,1%"=="(" && if not "%ATTRIB:~0,2%"=="--" && shift && goto :parseswitchloop ! echo Invalid argument 'ATTRIB=%ATTRIB%' && endlocal && set result=0 && goto :eof
if not exist UDFINFO &; if not /i "%~1"=="--UDFINFO" if not /i "%~1"=="--ISOINFO" if not /i "%~1"=="--INFO" |; set UDFINFO=Y && set Q=Y && set "NULL= > nul" && shift && goto :parseswitchloop
if exist COPY && if %COPY:~0,2%==MD && set disk=%COPY:~2% &; raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk% && raw cat --hex --length=1 (%disk%)0+1 > nul && set /a disk=%disk%+1 &; set COPY=MD%disk%
if exist COPY && if %COPY:~0,2%==MD &; if %disk%<=12 && if exist udffile && set disk= ! if exist @uefi && if exist ufdfile && echo Switch '--MDCOPY' can not be used, try to free a disk in range 3:12 with 'map --unmap=disk_num' ! if not exist @uefi && if exist ufdfile && echo Switch '--MDCOPY' can not be used, try to free a disk in range 3:12 with 'map --unmap=disk_num && map --rehook'  ! echo Switch '--MDCOPY' can only be used with '--UDFRECORD=[PATH]filename[.ext]' && set disk=Y &; if exist disk && endlocal && set result=0 && goto :eof
if exist COPY &; if not %COPY:~0,2%==MD && set disk=%COPY% &; raw cat --hex --length=1 (%disk%)0+1 | set cathex= &; echo disk=%disk% cathex=%cathex% udffile=%udffile% &; if not exist cathex && if exist udffile && set disk= ! if exist cathex && if exist udffile && echo Disk (%disk%) exists already, Switch '--MDMAP=%COPY%' can not be used ! echo Switch '--MDMAP=%COPY%' can only be used with '--UDFRECORD=[PATH]filename[.ext]' && set cathex=Y &; if exist cathex && endlocal && set result=0 && goto :eof
if not exist mdbase && echo -n > (md)0x300+2 &; if exist @uefi && displaymem -s > (md)0x300+2 ! if %g4dver%>=20170830 && displaymem --s > (md)0x300+2 ! displaymem > (md)0x300+2 &; raw cat --locate=\x0A (md)0x300+2 > nul &; set /A SEARCH=%?%+1 &; setlocal && set * && set SEARCH=%SEARCH% && set MDB=%MDBASE% && set g4dver=%g4dver% &; if %SEARCH%>=0x3A && set mdbase=0 && set freesect=0 && set skip=0 && call :freemem ! set SEARCH=%SEARCH% &; if %SEARCH%>=0x3A && if not %freesect%>=0x10000 && echo Not enough memory: needed 32MB, available %freemem%MB && set result=0 ! if %SEARCH%>=0x3A && if not exist MDB && if %mdbase%<=0x20000 && set mdbase=0x20000 ! if %SEARCH%>=0x3A && if exist MDB && if %MDB%>=%mdbase% && set mdbase=%MDB% ! if %SEARCH%>=0x3A && if exist MDB && if not %MDB%>=%mdbase% && echo Switch '--MDBASE=%MDB%' is not in free memory-region %mdbase%+%freesect% && set result=0 ! if exist @uefi && echo Internal function 'displaymem -s' can not be parsed, no free memory region found && set result=0 ! if %g4dver%>=20170830 && echo Internal function 'displaymem --s' can not be parsed, no free memory region found && set result=0 ! echo Internal function 'displaymem' can not be parsed, no free memory region found && set result=0 &; if %result%==0 && endlocal && set result=0 && goto :eof ! endlocal && set mdbase=%mdbase% && set SEARCH= && set MDBASE= && set g4dver=
if not %CASE%==Y && set "i=/i" && set CASE= ! set CASE= &; if %hexview%==Y && pager on
if not exist find &; if not exist cdfile && if not exist cdfile2 && if not exist cdfile3 && if not exist udffile && if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 && if not exist ISODIR && if not exist ISODIR2 && if not exist ISODIR3 && if not exist UDFROOT && if not exist UDFDIR && set "find=ISO-9660/UDFdescriptors "
if exist LBsize &; if not %LBsize%>=512 && echo Argument '--sectorsize=%LBsize%' is below 512 Bytes && set result=0 && goto :eov ! calc %LBsize% % 512 && echo Argument '--sector-size=%LBsize%' is not a whole multiple of 512 Bytes && set result=0 && goto :eov
set "ARG1=%~1" &; if "%ARG1:~0,1%"=="(" call Fn.11 "%ARG1:~1,8%" ")" |; echo Invalid argument '%~1' && call :help "smallhelp" &; endlocal && set result=0 && goto :eof
set device=%~d1 && set "path=%~p1" && set "name=%~n1" && set "ext=%~x1" && set "file=%~f1"
if %device%==(md) &; set disk=Y && set ext= &; call Fn.11 "%ARG1%" "+" || echo '%file%' is not valid && set result=0 && set reuse=N && goto :eov ! set file=
if not %device%==(md) && if not %device:~0,3%==(rd &; call Fn.11 "%ARG1:~-1,1%" "/" && if not exist name && if not exist ext && set disk=Y && set path= && set file=
if %device:~0,3%==(rd && set disk=Y && set file= && set ext= &; set /A rdsect=*0x82D0&0xffffffff/0x200 &; if %rdsect%>=0x30000 && set rdsect= ! echo %device% does not exist (anymore) && endlocal && set result=0 && goto :eof
if not exist disk &; call Fn.11 "%ARG1%" "/" || set disk=Y && set path= && set name= && set file= ! set path= && set name= &; if %disk%==Y && call Fn.11 "%ARG1%" "+" && if "%ext%"=="" && set "file=%~1" && set disk= ! set ext= &; if exist file &; set "file=%file%" &; if %@retval%>=511 && echo Blocklist '%file%' is too long && set file= && set result=0 && set reuse=N && goto :eov ! call Fn.11 "%file%" "\x20" && echo Blocklist '%file%' is invalid && set file= && set result=0 && set reuse=N && goto :eov
if exist file &; call Fn.11 "%file%" "\x20" &; echo -e "%file%" | set file= &; set "file=%file:~1,-1%" &; echo -n > (md)0x300+1 && pause --wait=0 %file% > (md)0x300+1 && raw cat --locate=\x20 --replace=\x5C (md)0x300+1 > nul && set lsskip=0 && call :lsspaces "file"
if exist file && if not exist %file% &; if not %device%==(cd) && echo %file% does not exist && set result=0 && set reuse=N && goto :eov ! if not exist (0xe0)%file:~4% && echo (0xe0)%file:~4% does not exist && set result=0 && set reuse=N && goto :eov ! set device=(0xe0) && set "file=(0xe0)%file:~4%"
if %disk%==Y && if %device%==(cd) &; raw cat --hex --length=1 %device%%0+1 > nul || set device=(%drvnum%)
if %disk%==Y &; if not %device:~0,3%==(fd if not %device:~0,3%==(rd if not %device:~0,3%==(md || set CDROM=N ! if %device:~0,3%==(hd && if %device:~4,1%==, && set CDROM=N ! if %device:~0,3%==(hd && if %device:~5,1%==, && if %device:~3,2%>=32 && set CDROM=Y ! if %device:~0,3%==(hd && if %device:~5,1%==, && if not %device:~3,2%>=32 && set CDROM=N ! if %device:~0,3%==(hd && if %device:~3,2%>=32 && set CDROM=Y ! if %device:~0,3%==(hd && set CDROM=N ! if %device%==(%drvnum%) && set CDROM=Y
#BADforOldGrub4dosUses_hd_for_cdrom#if %disk%==Y &; if not %device:~0,3%==(fd if not %device:~0,3%==(hd if not %device:~0,3%==(rd if not %device:~0,3%==(md || set CDROM=N ! if %device%==(%drvnum%) && set CDROM=Y
if %disk%==Y && if not exist CDROM &; if not %device:~1,-1%>=0xA0 && set CDROM=N ! set CDROM=Y
if %disk%==Y &; call Fn.11 "%ARG1%" "+" && if not exist ext && set TARGET=%~1 ! set TARGET=%device%%0+0x51 &; raw cat --skip=0x8001 --locatei=CD --length=2 %TARGET% > nul && set ISO=Y && set lbsize=0x800 ! set ISO= &; if not %ISO%==Y && raw cat --skip=0x8800 --locatei=\x00CD001\x01 --length=7 %TARGET% > nul && set ETHDR=Y && set lbsize=0x800 ! set ETHDR= &; if not %ISO%==Y && if not %ETHDR%==Y && raw cat --skip=0x8001 --locatei=BEA --length=3 %TARGET% > nul && set UDF=Y && if not %CDROM%==Y &; raw cat --skip=0x20000 --locatei=\x02\x00 --length=2 %TARGET% > nul && set lbsize=0x200 ! raw cat --skip=0x40000 --locatei=\x02\x00 --length=2 %TARGET% > nul && set lbsize=0x400 ! raw cat --skip=0x80000 --locatei=\x02\x00 --length=2 %TARGET% > nul && set lbsize=0x800 ! raw cat --skip=0x100000 --locatei=\x02\x00 --length=2 %TARGET% > nul && set lbsize=0x1000 ! raw cat --skip=0x200000 --locatei=\x02\x00 --length=2 %TARGET% > nul && set lbsize=0x2000
if exist file &; raw cat --skip=0x8001 --locatei=CD --length=2 %file% > nul && set ISO=Y && set LBsize=0x800 ! set ISO= &; if not %ISO%==Y && raw cat --skip=0x8800 --locatei=\x00CD001\x01 --length=7 %file% > nul && set ETHDR=Y && set LBsize=0x800 ! set ETHDR= &; if not %ISO%==Y && if not %ETHDR%==Y && raw cat --skip=0x8001 --locatei=BEA --length=3 %file% > nul && set UDF=Y &; raw cat --skip=0x20000 --locatei=\x02\x00 --length=2 %file% > nul && set LBsize=0x200 ! raw cat --skip=0x40000 --locatei=\x02\x00 --length=2 %file% > nul && set LBsize=0x400 ! raw cat --skip=0x80000 --locatei=\x02\x00 --length=2 %file% > nul && set LBsize=0x800 ! raw cat --skip=0x100000 --locatei=\x02\x00 --length=2 %file% > nul && set LBsize=0x1000 ! raw cat --skip=0x200000 --locatei=\x02\x00 --length=2 %file% > nul && set LBsize=0x2000
if not %ISO%==Y && if not %UDF%==Y && if not %ETHDR%==Y && echo No ISO-9660 or UDF Signature found && endlocal && set Lsession= && set result=0 && goto :eof ! if not exist LBsize && if not %CDROM%==Y && set LBsize=%lbsize% && set lbsize= ! set lbsize=
if %disk%==Y && if not %device%==(md) && if not %CDROM%==Y && if not %PREVIOUS%==Y &; rootnoverify %device% > nul && set /A totsect=*0x82B0 ! echo %device% does not exist && set result=0 && set reuse=N && goto :eov
if not exist LBsize &; if %CDROM%==Y && set LBsize=0x800 ! if /i "%ext%"==".ISO" && set LBsize=0x800 ! set LBsize=0x200
if %PREVIOUS%==Y && if exist Lsession && set Lsession= && set reuse=
if exist Lsession && if %disk%==Y &; setlocal && %Lsession% &; call Fn.11 "%tgt%" "/" && endlocal && set Lsession= ! call Fn.11 "%tgt%" "%device%" || endlocal && set Lsession= ! endlocal
if exist Lsession &; setlocal && %Lsession% &; if exist SPtg && raw cat --skip=4 --locate=\x00 --length=1 %SPtg% > nul && raw cat --skip=5 --locate=\x00 --length=1 %SPtg% > nul && raw cat --skip=6 --locate=\x00 --length=1 %SPtg% > nul && raw cat --skip=7 --locate=\x00 --length=1 %SPtg% > nul && echo BAD SPtarget=%SPtg%, delete 'Lsession' && endlocal && set Lsession= ! endlocal
if exist Lsession &; setlocal && %Lsession% &; if exist MAtg && raw cat --skip=0 --locate=\x00 --length=1 %MAtg% > nul && raw cat --skip=1 --locate=\x00 --length=1 %MAtg% > nul && raw cat --skip=2 --locate=\x00 --length=1 %MAtg% > nul && raw cat --skip=3 --locate=\x00 --length=1 %MAtg% > nul && echo BAD MAtarget=%MAtg%, delete 'Lsession' && endlocal && set Lsession= ! endlocal
if exist Lsession && if not %PREVIOUS%==N &; setlocal && %Lsession% &; set s0=%VATa% &; set /a s1=%s0%+1 && set /a s2=%s0%+2 && set /a s3=%s0%+3 && set /a s4=%s0%+4 && set /a s5=%s0%+5 && set /a s6=%s0%+6 && set /a s7=%s0%+7 &; if exist VAtgt && raw cat --skip=%s0% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s1% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s2% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s3% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s4% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s5% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s6% --locate=\x00 --length=1 %VAtgt% > nul && raw cat --skip=%s7% --locate=\x00 --length=1 %VAtgt% > nul && echo BAD VAtarget=%VAtgt%, delete 'Lsession' && endlocal && set Lsession= ! endlocal
if exist Lsession && if %PREVIOUS%==N && setlocal &; %Lsession% &; if exist VAtgt && if %CDFS%>=21 && if %CDtotsec%>=21 && endlocal ! endlocal && set Lsession=
if exist Lsession &; setlocal && %Lsession% &; set /A address=0x10 * %LBsz% + 0x28 &; set "target=%tgt%" &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=31 && call :getlfnloop ! call :getentityID "%ADDRESS%" "32" &; if exist result && set "result0=%result:~0,31%" && set result= ! set result0=EMPTY &; set /A address=%VDsc% * %LBsz% + 72 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=0xA && set /A skipzero=%address%+2 && set namelen=31 && call :getlfnloop ! call :getentityID "%address%" "32" &; if exist result && set "result1=%result:~0,31%" && set result= ! set result1=EMPTY &; if not %CDFS%>=21 && endlocal && set Lsession= ! if not exist rev && if not "%ID%"=="%result0%" && endlocal && set Lsession= ! if exist rev && if not "%ID%"=="%result1%" && endlocal && set Lsession= ! endlocal
if exist Lsession && if not exist Q && call :Fn.4 &; echo -n Re-use values from session before? (Y=Yes or Enter, N=No) && pause --wait=180 --test-key &; set /A KEY=%@retval%&0xff &; if not %KEY%==0xD if not %KEY%==0x79 if not %KEY%==0x59 |; set reuse=Y ;; set KEY= && if exist Lsession && if not exist Q &; if not %reuse%==Y && set reuse=N && set Lsession=
if exist reuse && if not exist Q && set reuse= && call :Fn.5 0 %v% &; echo -e -n $[]                                                                           \x20 && call :Fn.5 0 %v% && set h= && set v=
if exist Lsession && setlocal &; %Lsession% &; endlocal && set LBsize=%LBsz% && set CDFSsec=%CDFS% && set CDtotsec=%CDtotsec% && set AVDPsec=%AVDPsc% && set VDSsec=%VDsc% && set VDSlen=%VDln% && set PTstart=%PTstart% && set UDFrev=%rev% && set FSDloc=%FSD% && set RTinfsec=%RTsc% && set METADATP=%MP% && set metafLBN=%mf% && set metamLBN=%mm% && set metabLBN=%mb% && set MFofset=%MFof% && set MMofset=%MMof% && set mirror=%mir% && set MAtarget=%MAtg% && set "volsetID=%ID%" && set "target=%tgt%" && set SPARETBL=%SPTB% && set SPtarget=%SPtg% && set SPTBsize=%SPTsz% && set SPacklen=%SPl% && set VIRTUALP=%VP% && set VATaddr=%VATa% && set VATsize=%VATsz% && set VAtarget=%VAtgt% && set VATprLBN=%VATpr% && set mdbase=%mdb% && set target= && set Lsession=
if %CDROM%==Y && if not %CDFSsec%>=21 && if %ISO%==Y && if not exist @uefi% && if not %PREVIOUS%==Y &; call :read 0x8050 %device%%0+17 &; set /A CDtotsec=%result%&0xffffffff-1 && set result= &; raw cat --hex --length=1 %device%%%CDtotsec%+1 > nul && set diffsec=0x20 ! echo Can not read sector %CDtotsec% && endlocal && set result=0 && goto :eof
if %CDROM%==Y && if not %CDFSsec%>=21 && if %UDF%==Y && if not exist @uefi% && if not %PREVIOUS%==Y &; raw cat --hex --skip=0 --locate=\x02\x00 --length=2 %device%%256+1 > nul && set UDF=Y && set /A address=256*2k+0x18 &; call :read %address% %device%%0+257 &; set /A VDS2sec=%result%&0xffffffff/2k && set result= && set /A address=256*2k+0x18+4 &; call :read %address% %device%%0+257 &; set /A CDtotsec=%result%&0xffffffff+%VDS2sec% && set result= && set VDS2sec= &; if %CDtotsec%<=0x130 && set /A diffsec=250m/%LBsize% ! raw cat --hex --length=1 %device%%%CDtotsec%+1 > nul && set diffsec=0x20 ! echo Can not read sector %CDtotsec% && endlocal && set result=0 && goto :eof
if %CDROM%==Y && if not %CDFSsec%>=21 && if not exist CDtotsec && if exist @uefi% && if not %PREVIOUS%==Y &; rootnoverify %device% > nul && set /A CDtotsec=*0x82B0&0xffffffff && set diffsec=0x20 ! echo %device% does not exist && set result=0 && set reuse=N && goto :eov
if %CDROM%==Y && if not %CDFSsec%>=21 &; if not exist diffsec && set /A diffsec=300m/%LBsize% && set /A CDtotsec=300m/%LBsize% ! set CDtotsec=%CDtotsec% &; set diff2sec=%diffsec% && set c= && call :Fn.4 &; if not exist Q && echo -n $[0x0F]Wait while finding total number of sectors on disk... ! set Q=%Q% &; call :getCDtotsec &; if not exist CDtotsec && echo Can not find total sectors on CD/DVD && endlocal && set result=0 && goto :eof ! if not exist Q && call :Fn.5 0 %v% && echo -e -n $[]                                                                           \x20 && call :Fn.5 0 %v% && set v= && set h= && if %CDadjust%>=1 && echo && echo Used size of CD/ DVD is adjusted: %CDadjust% empty sectors ignored && echo
if exist file && if not %PREVIOUS%==Y &; raw cat --length=0 %file% > nul && set /A totsect=*0x8290/0x200 && set CDROM=N ! echo %file% is zero bytes%NULL% && set result=0 &; if %result%==0 && set reuse=N && goto :eov ! if /i "%ext%"==".VHD" && set /A totsect=%totsect%-1
if %device%==(md) && if not %PREVIOUS%==Y &; call Fn.11 "0%name%" "0" &; set /a pos=%@retval% &; call Fn.11 "0%name%" "+" &; set /a pos=%@retval%-%pos% &; call set /A totsect=%^name:~%pos%%% && set /a pos=%pos%-1 &; call set /A MDstart=%^name:~0,%pos%%% &; if not %MDstart%>=0x30000 && echo Start address in '%device%%%name%' is below 0x30000 && set result=0 && set reuse=N && goto :eov ! set pos= && set MDstart=
if %device:~0,3%==(rd && if not %PREVIOUS%==Y && set /A totsect=*0x82D8/0x200
if %CDROM%==Y && set target=%device%%0+%CDtotsec% ! if %disk%==Y && if not %device%==(md) && set target=%device%%0+%totsect% ! if %device%==(md) && set target=%device%%%name% && set name= ! set "target=%file%"
if %CDROM%==N && if not %PREVIOUS%==Y && if exist totsect &; set /a divider=%LBsize%/0x200 &; set /A CDtotsec=%totsect%/%divider% && set divider=
if %device:~0,3%==(rd && if not %PREVIOUS%==Y && set /A CDtotsec=*0x82D8/%LBsize%
set Lsession= && set ARG1= && set disk= && set ext= && set maxsect= && set ISO= && set UDF= && if not exist CDadjust && set CDadjust=0
if exist cdpath && if not %PREVIOUS%==Y &; call Fn.11 "%cdpath%" "\x20" &; set SPACE=Y && echo -e "%cdpath%" | set cdpath="
if %SPACE%==Y && set "cdpath=%cdpath:~2,-1%" &; echo -n > (md)0x300+1 && echo -n > (md)0x301+1 && call pause --wait=0 "%cdpath%" > (md)0x301+1 && raw cat --skip=1 --locate=\x22\x0A (md)0x301+1 > nul &; set /a length=%?%-1 &; raw dd if=(md)0x301+1 of=(md)0x300+1 bs=1 count=%length% skip=1 > nul && set length= &; raw cat --locate=\x20 --replace=\x5C (md)0x300+1 > nul && set lsskip=0 && call :lsspaces &; set "cdpath=%cdpath%" &; if %@retval%<=510 && set SPACE= ! echo Path in 'DIR|RECORD' is too long (>510 chars) && set result=0 && set reuse=N && goto :eov
raw cat --skip=0x8001 --locatei=FDC01 --length=5 %target% > nul && echo Identifier 'FDC01' found: ISO-13346/ ECMA-107 not supported && set result=0 && set reuse=N && goto :eov
raw cat --skip=0x8001 --locatei=CDW02 --length=5 %target% > nul && echo Identifier 'CDW02' found: ISO-13346/ ECMA-168 not supported && set result=0 && set reuse=N && goto :eov
if not %UDFbridg%==Y && call :UDFbridge &; if %ISO9660%==N &; call Fn.11 "%find%" "ISO" && call Fn.11 "%find%" "ISO-9660/UDF" || call Fn.11 "%find%" "UDF" || if not exist Q && echo No ISO-9660 Primary Volume Descriptor found && echo
if not %UDFbridg%==Y && if %ISO9660%==N && if not %ETHDR%==Y && if exist file &; raw cat --skip=0x8800 --locatei=\x01CD001\x00 --length=7 %device%%0+0x51 > nul && set ETHDR=Y
if not %UDFbridg%==Y && if %ISO9660%==N && if %ETHDR%==Y && echo No ISO-9660 Primary Volume Descriptor found%NULL% && echo%NULL% &; call Fn.11 "%find%" "ISOVDS " && set NULL= ! call Fn.11 "%find%" "ISOBD " && set NULL= ! set "NULL=%NULL%" &; set ISOBD=Y && echo -e Boot Record:\t\t\t\tsector 17    0x8800%NULL% && set voladdr=0x8800 && set volnum=0x0 && call :bootrecord &; call Fn.11 "%find%" "ISOBD " && set "NULL= > nul" ! set "NULL=%NULL%" &; set "found=%found%ISOBD " && set RESULT=%result% && echo%NULL% && call :read 0x9000 %target% &; set /A volnum=%result%&0xff && set result= &; call Fn.11 "%find%" "ISOTD " && set NULL= ! call Fn.11 "%find%" "ISOVDS " && set NULL= ! set "NULL=%NULL%" &; if %volnum%==0xFF && echo -e Volume Descriptor Terminator:\t\tsector 18    0x9000%NULL% && set "found=%found%ISOTD " && set voladdr=0x9000 && call :isoterminator ! echo && echo No ISO-9660 Volume Descriptor Terminator at address 0x9000%NULL% &; call Fn.11 "%find%" "ISOBD " && set "NULL= > nul" ! call Fn.11 "%find%" "ISOTD " && set "NULL= > nul" ! set NULL= &; if not exist NULL && echo ! set "NULL=%NULL%" &; set result=%RESULT% && set reuse=N && goto :eov
set "Csession=%Csession% && set device=%device% && set CDadjust=%CDadjust% && set totsect=%totsect% && set UDFINFO=%UDFINFO%" && set device= && set CDadjust= && set CDROM= && set totsect= && set UDFINFO=
if exist ISOVDS &; if %ISO9660%==N &; if not exist UDFVDS && set UDFVDS=Y && set "find=UDFVDS " && set ISOVDS=
if exist ISOPVD &; if %ISO9660%==N &; if not exist UDFPVD && set UDFPVD=Y && set "find=%find%UDFPVD " && set ISOPVD=
if exist cdfile &; if %ISO9660%==N &; if not exist udffile && set "udffile=%cdfile%" && set cdfile= ! set cdfile=
if exist ISODIR &; if %ISO9660%==N &; if not exist UDFDIR && set "UDFDIR=%ISODIR%" && set ISODIR=
if exist ISOROOT &; if %ISO9660%==N &; if not exist UDFROOT && set "UDFROOT=%ISOROOT%" && set "find=%find%UDFFID " && set ISOROOT=
if %ISO9660%==Y && set numSVD=0 &; if not exist cdfile2 && if not exist cdfile3 && if not exist ISODIR2 && if not exist ISODIR3 && if not exist ISODIRR2 && if not exist ISODIRR3 && if not exist ISOROOT2 && if not exist ISOROOT3 &; raw cat --skip=0x8001 --locatei=CD001 --length=5 %target% > nul &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist ISOVDS || if not %UDFbridg%==Y && echo File System: ISO-9660%NULL% && echo%NULL% ! set "cdfile=%cdfile%" &; set volsec=16 &; if not exist cdfile && if not exist ISODIR && if not exist ISODIRR && if not exist ISOROOT && if not %UDFbridg%==Y && call :isoinfo ! if exist cdfile && set volnum=1 && call :getisofileinfo ! if exist ISOROOT && set volnum=1 && call :getisofileinfo ! if exist ISODIR && set volnum=1 && call :getisofileinfo ! if exist ISODIRR && set volnum=1 && call :getisofileinfo &; call Fn.11 "%find%" "UDF" || goto :eov ! if exist cdfile && if exist udffile && set cdfile= && if %FOUND%==Y && echo%NULL% ! if exist ISODIR && if exist UDFDIR && set ISODIR= && if %FOUND%==Y && echo%NULL% ! if exist ISOROOT && if exist UDFROOT && set ISOROOT= && if %FOUND%==Y && echo%NULL%
if exist CDFSsec && set "Csession=%Csession% && set CDFSsec=%CDFSsec%" && set CDFSsec=
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0x8800 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=17 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0x9000 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=18 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0x9800 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=19 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0xA000 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=20 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0xA800 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=21 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0xB000 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=22 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; raw cat --skip=0xB800 --locatei=\x02CD001 --length=6 %target% > nul && set volsec=23 && set volnum=2 && set /a numSVD=%numSVD%+1 && set result= &; if %numSVD%==1 && if not exist cdfile3 && if not exist ISOROOT3 && if not exist ISODIR3 && if not exist ISODIRR3 && call :getisofileinfo ! if %numSVD%==2 && if not exist cdfile2 && if not exist ISOROOT2 && if not exist ISODIR2 && if not exist ISODIRR2 && set numSVD= && call :getisofileinfo &; if exist result && goto :eov
if %ISO9660%==Y &; if not exist cdfile if not exist ISOROOT if not exist ISODIR if not exist ISODIRR |; if exist cdfile && echo No ISO-9660 Primary Volume Descriptor found, no info about '%cdpath%%%cdname%%%cdext%' available ! if exist ISOROOT && echo No ISO-9660 Primary Volume Descriptor found, no info about Root Directory available ! if exist ISODIR && echo No ISO-9660 Primary Volume Descriptor found, no info about '%ISODIR%' available &; set result=0 && goto :eov
if %ISO9660%==Y &; if not exist cdfile2 if not exist ISOROOT2 if not exist ISODIR2 if not exist ISODIRR2 |; if exist cdfile2 && echo No ISO-9660 Supplementary Volume Descriptor found, no info about '%cdpath%%%cdname%%%cdext%' available ! if exist ISOROOT2 && echo No ISO-9660 Supplementary Volume Descriptor found, no info about Root Directory available ! if exist ISODIR2 && echo No ISO-9660 Supplementary Volume Descriptor found, no info about '%ISODIR2%' available &; set result=0 && goto :eov
if %ISO9660%==Y &; if not exist cdfile3 if not exist ISOROOT3 if not exist ISODIR3 if not exist ISODIRR3 |; if exist cdfile3 && echo No second ISO-9660 Supplementary Volume Descriptor found, no info about '%cdpath%%%cdname%%%cdext%' available ! if exist ISOROOT3 && echo No second ISO-9660 Supplementary Volume Descriptor found, no info about Root Directory available ! if exist ISODIR3 && echo No second ISO-9660 Supplementary Volume Descriptor found, no info about '%ISODIR3%' available &; set result=0 && goto :eov
if %UDFbridg%==Y && if %ISO9660%==Y &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist ISOVDS if not exist UDFVDS if not exist UDFFSDS if not exist UDFVDS2 || if not %PREVIOUS%==N && echo File System: ISO-9660 UDF-Bridge%NULL% && echo%NULL% ! set "file=%file%" &; set volsec=16 && call :isoinfo &; if not "%find%"=="ISO-9660/UDFdescriptors " && if not exist udffile && if not exist USECTOR &; call Fn.11 "%find%" "ISO" &; call Fn.11 "%find%" "UDF" || goto :eov
set numSVD= && if %UDFbridg%==Y &; set /A len=32 - 18 * %LBsize% &; raw cat --skip=0x9000 --locatei=\x00BEA01\x01 --length=%len% %target% > nul &; set /a volsec=%?%/%LBsize% &; if not exist NULL && if not exist Q && echo Extended Descriptor Section: ! if %UDFED%==Y && echo Extended Descriptor Section:%NULL% ! set UDFED= &; call :udfinfo &; if exist message && echo %message% && set result=0 && set reuse=N && goto :eov
if not %UDFbridg%==Y && if %ISO9660%==N &; raw cat --skip=0x8001 --locatei=BEA01 --length=5 %target% > nul &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS if not exist UDFFSDS if not exist UDFVDS2 || if not %PREVIOUS%==N && echo File System: UDF%NULL% && echo%NULL% && set "found=%found%UDFED " ! set "find=%find%" &; set volsec=16 &; if not "%find%"=="ISO-9660/UDFdescriptors " || echo Extended Descriptor Section:%NULL% ! if %UDFED%==Y && set "found=%found%UDFED " && if not exist Q && echo Extended Descriptor Section: ! set UDFED= &; call :udfinfo &; if %result%==0 && set reuse=N && goto :eov ! set UDFbridg=Y && if "%find%"=="UDFVRS " && goto :eov
if not %UDFbridg%==Y && if %ISO9660%==N &; if not exist ISOVDS if not exist ISOPVD if not exist ISOSVD if not exist ISOBD if not exist ISOVPD if not exist ISOTD |; echo No ISO-9660 Descriptors found &; set result=0 && set reuse=N && goto :eov
if exist udffile &; if %ISO9660%==N && if %UDFbridg%==Y && if not %PREVIOUS%==N && echo File System: UDF%NULL% && echo%NULL% ! if %ISO9660%==N && if not %UDFbridg%==Y && echo No ISO-9660 or UDF Volume Descriptors found, no info about %cdpath%%%cdname%%%cdext% available && set result=0 && goto :eov
if not %UDFbridg%==Y &; if not %ISO9660%==N if not exist udffile if not exist UDFDIR |; if %ISO9660%==N && if not exist udffile && if not exist UDFDIR && echo No ISO-9660 descriptors found && set result=0 && goto :eov ! echo No UDF descriptors found, no info about %cdpath%%%cdname%%%cdext% available && set result=0 && goto :eov
if exist ISO9660 && set "Csession=%Csession% && set ISO9660=%ISO9660%" && set ISO9660=
if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS if not exist UDFVDS2 |; set AVDPsec= && call :findanchorVDpointer &; if not exist AVDPsec && set result=0 && goto :eov ! if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS if not exist UDFVDS2 || if not exist Q && echo
if not "%find%"=="ISO-9660/UDFdescriptors " && if not exist UDFVDS && if not exist UDFVDS2 && if not exist AVDPsec && call :findanchorVDpointer &; if not exist AVDPsec && set result=0 && set reuse=N && goto :eov
if not exist PREVIOUS &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFVDS " if not "%find%"=="UDFAVDP " if not "%find%"=="UDFVDS2 " |; set VDSsec= && set VDSlen= && call :UDFbridgeanchorpoint &; if %result==0 && set reuse=N && goto :eov
if exist VDSsec if exist VDSlen |; call :UDFbridgeanchorpoint &; echo%NULL% &; if %result%==0 && set reuse=N && goto :eov
if exist METADATP &; if %MIRROR%==Y && if not exist MMofset && set MFofset= && set PTstart= && set FSDloc= && set RTinfsec= && set MAtarget= ! if not %MIRROR%==Y && if exist MMofset && set mirror= && set MMofset= && set MFofset= && set PTstart= && set FSDloc= && set RTinfsec= && set MAtarget= ! if not %MIRROR%==Y && set mirror=
if %MIRROR%==Y && if not %mirror%==Y && if exist MAtarget &; call Fn.11 "%MAtarget:~4%" "0" &; set /A pos0=%@retval% &; call Fn.11 "%MAtarget:~4%" "+" &; set /A len=%@retval%-%pos0% &; call set /A mdbase=%^MAtarget:~4,%len%%%-1 && set pos0= && set len= && set MAtarget=
if %VDSsec%>=19 &; set /a SEQlen=%VDSlen%/%LBsize% && set /A volsec=%VDSsec% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
if not exist PREVIOUS &; if %nxttagID%==1 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFTD " if not "%find%"=="UDFLVID " if not "%find%"=="UDFUSD " if not "%find%"=="UDFIUVD " if not "%find%"=="UDFLVD " if not "%find%"=="UDFPD " if not "%find%"=="UDFPVD " if not "%find%"=="UDFVDS " if not "%find%"=="UDFVAT " if not "%find%"=="UDFSPT " |; set PTstart= && set PTlength= && set UDFrev= && set FSDloc= && set MPTofset= && call :UDFvolumedescriptorsequence &; if "%find%"=="UDFVDS " && goto :eov ! if "%find%"=="UDFVRS " && goto :eov ! if "%find%"=="UDFPVD " && goto :eov ! if "%find%"=="UDFPD " && goto :eov ! if "%find%"=="UDFLVD " && goto :eov ! if "%find%"=="UDFIUVD " && goto :eov ! if "%find%"=="UDFUSD " && goto :eov ! if "%find%"=="UDFLVID " && goto :eov ! if "%find%"=="UDFVAT " && goto :eov ! if "%find%"=="UDFVDS2 " && goto :eov ! if not exist PTstart && echo Can not locate start of partition && set result=0 && set reuse=N && goto :eov ! if not exist FSDloc && echo Can not locate File Set Descriptor && set result=0 && set reuse=N && goto :eov
if %nxttagID%==1 &; if exist PTstart if exist UDFrev if exist FSDloc |; set MPTofset= && call :UDFvolumedescriptorsequence &; set nxttagID= && set SEQ= && set SEQlen= && set volsec= && set voladdr= && set address= &; if not exist PTstart && echo Can not locate start of partition && set result=0 && set reuse=N && goto :eov ! if not exist FSDloc && echo Can not locate File Set Descriptor && set result=0 && set reuse=N && goto :eov
set "Csession=%Csession% && set "volsetID=%volsetID%" && set VDSlen=%VDSlen% && set UDFSsec=%UDFSsec% && set ISstart=%ISstart% && set ISlength=%ISlength%" && set volsetID= && set VDSlen= && set UDFSsec= && set ISstart= && set ISlength=
if exist metafLBN && if not %MIRROR%==Y && if not exist MFofset &; set /A volsec=%PTstart%+%metafLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; echo%NULL% && call :fileentry &; set nxttagID= && set volsec= && set voladdr= && set address= &; if %fileTp%==250 && if not exist MAtarget && set MPTofset=%LBNloc% && set MFofset=%LBNloc% && set MMofset= && set fileTp= ! if %fileTp%==250 && if exist MAtarget && set MFofset=0 && set MMofset= && set fileTp= ! echo Can not locate Metadata File && set result=0 && set reuse=N && goto :eov
if exist metamLBN && if %MIRROR%==Y && if not exist MMofset &; set /A volsec=%PTstart%+%metamLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; echo%NULL% && call :fileentry &; set nxttagID= && set volsec= && set voladdr= && set address= &; if %fileTp%==251 && if not exist MAtarget && set MPTofset=%LBNloc% && set MMofset=%LBNloc% && set MFofset= && set fileTp= ! if %fileTp%==251 && if exist MAtarget && set MMofset=0 && set MFofset= && set fileTp= ! echo Can not locate Metadata Mirror File && set result=0 && set reuse=N && goto :eov
if not exist MPTofset && if not exist MAtarget &; if not exist metafLBN && if not exist metamLBN && set MPTofset=0 && set MFofset= && set MMofset= ! if %MIRROR%==Y && if exist MMofset && set MPTofset=%MMofset% && set MFofset= ! if exist MFofset && set MPTofset=%MFofset% && set MMofset= ! echo Variable 'Lsession' incomplete, Try again && set result=0 && set reuse=N && goto :eov
if not exist udffile if not exist UDFDIR if not exist UDFROOT |; if not exist PTstart && echo No UDF File Descriptors found, no info about %cdpath%%%cdname%%%cdext% available && set result=0 && goto :eov ! if not exist RTinfsec && set GETROOT=Y
if exist MAtarget && set MPTofset=0 && if exist FSDLOC && set FSDloc= && set /A Maddress=%FSDLOC% * 4 &; call :read %Maddress% %MAtarget% &; set /A FSDloc=%result%&0xffffffff+%FSDLOC% && set result= && set Maddress= && set FSDLOC= &; if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist FSDloc && call :sparingtable "FSDloc" "%FSDloc%" &; if not exist FSDloc && echo Physical Block Address of File Set Descriptor not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL% && set result=0 && set reuse=N && goto :eov
if exist SPtarget && if exist FSDLOC && if exist SPTBsize && if exist SPacklen && if not exist MAtarget && call :sparingtable "FSDloc" "%FSDLOC%" &; set FSDLOC= &; if not exist FSDloc && echo Physical Block Address of File Set Descriptor not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL% && set result=0 && goto :eov
if not exist MAtarget && if not exist SPtarget &; if exist FSDLOC && if exist FSDloc && set FSDLOC= ! if exist FSDLOC && set FSDloc=%FSDLOC% && set FSDLOC=
if not %PREVIOUS%==N && if exist USECTOR && if not exist LBN &; set volsec=%USECTOR% && set /A voladdr=%USECTOR% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; set /A address=%voladdr%+12 &; call :read %address% %target% &; set /A LSNloc=%result%&0xffffffff && set result= && set address= &; if %LSNloc%==%volsec% && setlocal && set NULL= &; if %nxttagID%==0 && call :sparingtable ! if %nxttagID%==1 && call :UDFprimaryVDS ! if %nxttagID%==2 && call :UDFbridgeanchorpoint ! if %nxttagID%==3 && call :VDSpointer ! if %nxttagID%==4 && call :implementationuseVD ! if %nxttagID%==5 && call :partitiondescriptor ! if %nxttagID%==6 && call :logicalvolumedescriptor ! if %nxttagID%==7 && call :unallocatedspacedescriptor ! if %nxttagID%==8 && call :terminatingdescriptor ! if %nxttagID%==9 && goto :logicalvolumeintegrityDS &; endlocal && set result=1 && goto :eov
if not %PREVIOUS%==N && if not exist USECTOR && if exist LBN &; if exist MAtarget && set /A Maddress=%LBN% * 4 &; call :read %Maddress% %MAtarget% &; set /A LBN=%result%&0xffffffff+%LBN% &; if not exist LBN && set result=0 && set Maddress= && echo Logical Block Address on Metadata Partition for given Logical Block Number not found (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%) && goto :eov
if not %PREVIOUS%==N && if not exist USECTOR && if exist LBN &; if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist LBN && call :sparingtable "LBN" "%LBN%" &; if not exist LBN && echo Physical Block Address for given Logical Block Number not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%) && goto :eov
if not %PREVIOUS%==N && if not exist USECTOR && if exist LBN &; if %VIRTUALP%==Y && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if exist LBN && call :virtualallocationtable "LBN" "%LBN%" &; if not exist LBN && echo Logical Block Address of given Logical Block Number not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%) && goto :eov
if not %PREVIOUS%==N && if not exist USECTOR && if exist LBN &; set /A USECTOR=%PTstart%+%MPTofset%+%LBN% &; set LSN=%USECTOR% && set volsec=%USECTOR% && set /A voladdr=%USECTOR% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
if not %PREVIOUS%==N && if exist USECTOR &; set nxttagid=%nxttagID% &; setlocal && set NULL= && set LBNofset=%OFFSET% &; if %nxttagID%==256 && call :filesetdescriptor ! if %nxttagID%==257 && call :fileidentifierdescriptor ! if %nxttagID%==258 && call :allocationextentdescriptor ! if %nxttagID%==259 && call :indirectentry ! if %nxttagID%==260 && call :terminalentry ! if %nxttagID%==261 && call :fileentry ! if %nxttagID%==262 && call :extendedattributeheaderDS ! if %nxttagID%==263 && call :unallocatedspaceentry ! if %nxttagID%==264 && call :spacebitmapdescriptor ! if %nxttagID%==266 && call :fileentry ! set nxttagid= &; if not exist nxttagid && echo No valid UDF Descriptor Tag Identifier found on address %voladdr% ! set nxttagid=%nxttagid% &; if exist nxttagid && endlocal && set result=1 && goto :eov ! if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=%LBsize% %target% && endlocal && set result=1 && goto :eov ! if exist LBN && endlocal && set /A LSN=%PTstart%+%LBN% && set LBN= && set result=0 && set USECTOR= && set OFFSET= && goto :eov ! endlocal && set result=0 && set USECTOR= && set OFFSET= && goto :eov
if %UDFMF%==Y && if exist metafLBN && set /A volsec=%PTstart%+%metafLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; set NULL= && call :fileentry &; if %fileTp%==250 && set "found=%found%UDFMF " && set result=1 ! set result=0 &; set "NULL= > nul" && goto :eov
if %UDFMF%==Y && if exist metafLBN &; if %nxttagID%==261 if %nxttagID%==266 || echo Can not locate File Entry/ Extended File Entry && set result=0 ! if not %fileTp%==250 && echo Can not locate Metadata File && set result=0 ! set result=0 &; goto :eov
if %UDFMMF%==Y && if exist metamLBN && set /A volsec=%PTstart%+%metamLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; set NULL= && call :fileentry &; if %fileTp%==251 && set "found=%found%UDFMMF " && set result=1 ! set result=0 &; set "NULL= > nul" && goto :eov
if %UDFMMF%==Y && if exist metamLBN &; if %nxttagID%==261 if %nxttagID%==266 || echo Can not locate File Entry/ Extended File Entry && set result=0 ! if not %fileTp%==251 && echo Can not locate Metadata Mirror File && set result=0 ! set result=0 &; goto :eov
if %UDFMBF%==Y && if exist metabLBN && set /A volsec=%PTstart%+%metabLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; set NULL= && call :fileentry &; if %fileTp%==252 && set "found=%found%UDFMBF " && set result=1 ! set result=0 &; set "NULL= > nul" && goto :eov
if %UDFSBD%==Y && if exist metabLBN && set /A volsec=%PTstart%+%metabLBN% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 if not %nxttagID%==266 |; call :fileentry &; if %fileTp%==252 && set /A volsec=%PTstart%+%LBNloc% &; if exist LBNofset && set /A voladdr=%volsec% * %LBsize% + %LBNofset% ! set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if %nxttagID%==0x108 && call :spacebitmapdescriptor && set result=1 && goto :eov ! echo Can not locate Space Bitmap Descriptor && set result=0 && goto :eov
if not %UDFSBD%==Y if not %UDFMBF%==Y |; if exist metabLBN &; if %nxttagID%==261 if %nxttagID%==266 || echo Can not locate File Entry/ Extended File Entry && set result=0 ! if not %fileTp%==252 && echo Can not locate Metadata Bitmap File && set result=0 ! set result=0 &; goto :eov
set /A volsec=%PTstart%+%MPTofset%+%FSDloc% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
if %nxttagID%>=256 && set SEQ=6 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " if not "%find%"=="UDFFSD " if not "%find%"=="UDFFE " if not "%find%"=="UDFEFE " if not "%find%"=="UDFTD " |; set RTinfsec= && call :UDFfilesetdescriptorsequence &; goto :eov
if %nxttagID%>=256 && set SEQ=6 &; if exist RTinfsec |; call :UDFfilesetdescriptorsequence &; set SEQ= &; if %result%==0 && set reuse=N && goto :eov
if not %PREVIOUS%==N &; if not exist udffile if not exist UDFDIR if not exist UDFROOT |; if exist RTinfsec && set GETROOT= && call :getudffileinfo &; if exist result && goto :eov
:eov
if not exist skipAVDP && if %VIRTUALP%==Y && if %PREVIOUS%==N && if not exist UDFVAT && if exist AVDPsec && if not exist udffile && if not exist UDFDIR && if not exist UDFROOT && set tagID= && set fileTp= &; if %AVDPsec%==0x100 && echo No previous Anchor Volume Descriptor Pointer available && set PREVIOUS= && set find= ! if not %VDSsec%>=%AVDPsec% && set /A skipAVDP=%AVDPsec% - 0x100 - 1 * %LBsize% ! set /A skipAVDP=%AVDPsec% - 1 * %LBsize%
if %skipAVDP%>=0x24000 && if not exist tagID &; raw cat --skip=%skipAVDP% --locate=\x05\x01 --length=%LBsize% %target% > nul && set tagID=261 ! raw cat --skip=%skipAVDP% --locate=\x0A\x01 --length=%LBsize% %target% > nul && set tagID=266 ! set /A skipAVDP=-0x10 * %LBsize% + %skipAVDP% && goto :eov
if %skipAVDP%>=0x24000 && if exist tagID && set /A address=%skipAVDP%+27 &; call :read %address% %target% &; set /A fileTp=%result%&0xff &; if %UDFrev%==0x150 && if not %fileTp%==0 && set /A skipAVDP=-0x10 * %LBsize% + %skipAVDP% && goto :eov ! if %UDFrev%>=0x200 && if not %fileTp%==248 && set /A skipAVDP=-0x10 * %LBsize% + %skipAVDP% && goto :eov ! set /A cdtotsec=%skipAVDP%/%LBsize%+1 && set skipAVDP=
if %VIRTUALP%==Y && if %PREVIOUS%==N &; if not exist UDFVAT if not exist udffile if not exist UDFDIR if not exist UDFROOT |; if not %VATprLBN%==0xFFFFFFFF && set /A CDFSsec=%PTstart%+%VATprLBN%+1 && set /A CDtotsec=%PTstart%+%VATprLBN%+1 && set AVDPsec= && set VDSsec= && set VDSlen= && set ISstart= && set ISlength= && set PTstart= && set UDFrev= && set FSDloc= && set RTinfsec= && set rootLBN= && set VIRTUALP= && set VATaddr= && set VATsize= && set VAtarget= && set VATprLBN= && set volsetID= && set SEQlen= && set SEQ= && set i= && set nxttagID= && set MPTofset= && set h= && set v= && set found= && set startsec= && set volsec= && set voladdr= && set address= && set accessTp= && set DIRsize= && set ENTRY= && set LBNlen= && set LBNloc= && set fileTp= && set allocdTp= && set tagID= && set DIRlen= && set DIRloc= && set FileID= && set DONE= && set GO= && set DR= && set FOUND= && set Nasterix= && set Easterix= && set asterix= && set mdtarget= && set PREVIOUS=Y && set result= && set GETROOT= && set numfiles= && set numdirs= && set volsecLV= && set PTlength= && set search= && set Lsession= && set mountUDF= && goto :parseswitchloop ! if %VATprLBN%==0xFFFFFFFF && echo No previous Virtual Allocation Table available && set find=
if %VIRTUALP%==Y && if %PREVIOUS%==N && if not exist UDFVAT && if not exist udffile && if not exist UDFDIR && if not exist UDFROOT &; if exist cdtotsec && set /A CDFSsec=%cdtotsec% && set /A CDtotsec=%cdtotsec% && set cdtotsec= && set AVDPsec= && set VDSsec= && set VDSlen= && set ISstart= && set ISlength= && set PTstart= && set UDFrev= && set FSDloc= && set RTinfsec= && set rootLBN= && set VIRTUALP= && set VATaddr= && set VATsize= && set VAtarget= && set VATprLBN= && set volsetID= && set SEQlen= && set SEQ= && set i= && set nxttagID= && set MPTofset= && set h= && set v= && set found= && set startsec= && set volsec= && set voladdr= && set address= && set accessTp= && set DIRsize= && set ENTRY= && set LBNlen= && set LBNloc= && set fileTp= && set allocdTp= && set tagID= && set DIRlen= && set DIRloc= && set FileID= && set DONE= && set GO= && set DR= && set FOUND= && set Nasterix= && set Easterix= && set asterix= && set mdtarget= && set PREVIOUS=Y && set result= && set GETROOT= && set numfiles= && set numdirs= && set volsecLV= && set PTlength= && set search= && set Lsession= && set mountUDF= && goto :parseswitchloop ! echo No previous recordings available && set find=
set i= && set volsec= && set folder= && set GO= && set voladdr= && set address= && set nxttagID= && set DIR= && set tagID= && set ENTRY= &; %Csession% && set Csession=
#OKE_54vars#echo -n > (md)0x302+60 && set > (md)0x302+60 && raw cat --locate=\x0A (md)0x302+60 > nul &; echo NUMVARS=%@retval% && cat --locate=\x0A --replace=\x20 (md)0x302+60 && raw cat (md)0x302+60 && echo
if exist UDFINFO &; if %accessTP%==0 && set "accessTp=%accessTp%: pseudo-overwritable" ! if %accessTp%==1 && set "accessTp=%accessTp%: read-only" ! if %accessTp%==2 && set "accessTp=%accessTp%: write-once" ! if %accessTp%==3 && set "accessTp=%accessTp%: rewritable" ! if %accessTp%==4 && set "accessTp=%accessTp%: overwritable" ! set accessTp= &; if %ISO9660%==Y && if not %UDFbridg%==Y && echo -n Filesystem ISO-9660 ! if %ISO9660%==Y && if %UDFbridg%==Y && echo -n Filesystem ISO-9660/ UDF-Bridge ! if %UDFbridg%==Y && echo -n Filesystem UDF &; if %ISO9660%==Y && if %UDFbridg%==Y && if not %mountISO%==Y && if not %mountUDF%==Y && set result%=0 && echo -e \x20 Both filesystems can not be mounted ! if %ISO9660%==Y && if %UDFbridg%==Y && if not %mountISO%==Y && if %mountUDF%==Y && set result%=0 && echo -e -n \x20ISO-9660 filesystem can not be mounted ! if %ISO9660%==Y && if not %UDFbridg%==Y && if not %mountISO%==Y && set result%=0 && echo -e \x20ISO-9660 filesystem can not be mounted ! set mountUDF=%mountUDF% &; if %mountUDF%==Y && set result=1 && echo -e \x20revision %UDFrev:~2,1%.%UDFrev:~3%, access type %accessTp:~2% ! if %UDFbridge%==Y && if not %mountUDF%==Y && set result%=0 && echo -e \x20UDF filesystem can not be mounted
if not exist Q && if exist found &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist ISOVDS if not exist UDFVDS if not exist UDFFSDS |; set NULL= && set result= &; if not "%find%"=="ISO-9660/UDFdescriptors " && if "%found:~0,6%"=="UDFED " && set "found=%found:~6%"
if not %result%==0 &; if exist CDFSsec && if not %UDFbridg%==Y && if not exist cdfile && if not exist cdfile2 && if not exist cdfile3 && if not exist ISODIR && if not exist ISODIR2 && if not exist ISODIR3 && if not exist ISODIRR && if not exist ISODIRR2 && if not exist ISODIRR3 && if not exist udffile && if not exist UDFDIR && set /a cdfssec=%CDFSsec% &; if not exist CDtotsec && set /A CDtotsec=%totsect% * 0x200 / %LBsize% && set /a cdtotsec=%totsect% * 0x200 / %LBsize% ! set CDtotsec=%CDtotsec% &; set /A Cdtotsec=%CDtotsec%+%CDadjust% &; set /a cdtotsec=%Cdtotsec% && set /a cdfssec=%CDFSsec% &; if not %CDFSsec%==%Cdtotsec% && echo Estimated/recorded number of sectors: %CDFSsec%/%Cdtotsec% (%cdfssec%/%cdtotsec%)%NULL% && echo%NULL% ! echo Estimated/recorded number of sectors: equal (%Cdtotsec%=%cdfssec%)%NULL% && echo%NULL%
if not %result%==0 &; if %UDFbridg%==Y && if not exist cdfile2 && if not exist cdfile3 && if not exist ISODIR && if not exist ISODIR2 && if not exist ISODIR3 && if not exist udffile && if not exist UDFDIR &; if exist CDFSsec && set /A UDFSsec=%CDtotsec%-%CDadjust% ! set UDFSsec= &; if not exist UDFSsec && set /A address=%CDtotsec% - 1 * %LBsize% &; call :read %address% %target% &; set /A TAGID=%result%&0xffff &; if not %TAGID%==0x2 if not %TAGID%==261 if not %TAGID%==266 || set /A CDFSsec=%CDtotsec%-%CDadjust% && set /A UDFSsec=%CDtotsec%-%CDadjust% && set TAGID= ! set TAGID=
if not %result%==0 &; if %UDFbridg%==Y && if not exist cdfile2 && if not exist cdfile3 && if not exist ISODIR && if not exist ISODIR2 && if not exist ISODIR3 && if not exist udffile && if not exist UDFDIR && if exist UDFSsec && setlocal && set /A Udfssec=%UDFSsec%+%CDadjust% &; set /a udfssec=%Udfssec% &; if exist totsect && if not exist cdfile && if not exist CDtotsec && set /A CDtotsec=%totsect% * 0x200 / %LBsize% && set /a cdtotsec=%totsect% * 0x200 / %LBsize% ! set CDtotsec=%CDtotsec% && set /a cdtotsec=%CDtotsec% &; if not %CDadjust%==0 && set "CDmsg=, %CDadjust% empty sectors ignored" ! set CDmsg= &; echo%NULL% &; if not %UDFSsec%==%CDtotsec% && if %accessTp%==2 && echo Available/recorded number of sectors: %Udfssec%/%CDtotsec% (%udfssec%/%cdtotsec%)%CDmsg%%%NULL% && echo%NULL% ! if not %UDFSsec%==%CDtotsec% && echo Estimated/recorded number of sectors: %Udfssec%/%CDtotsec% (%udfssec%/%cdtotsec%)%CDmsg%%%NULL% && echo%NULL% ! echo Estimated/recorded number of sectors: equal (%Udfssec%=%udfssec%)%CDmsg%%%NULL% && echo%NULL% &; endlocal && set CDFSsec=%UDFSsec%
if not %CDFSsec%>=0x21 && set /a divider=%LBsize%/0x200 &; if exist CDtotsec && set CDFSsec=%CDtotsec% ! set /A CDFSsec=%totsect%/%divider% && set /A CDtotsec=%totsect%/%divider%
if exist find &; call Fn.11 "%find%" "RR" &; call Fn.11 "%find%" "UDF" |; if not %RR%==Y && set result=0 && set numdirs= && set numfiles= && set find= && if not %Q%==Y && echo No Rock Ridge Extensions found
if not exist cdfile if not exist cdfile2 if not exist cdfile3 if not exist udffile |; if not %result%==0 && set result=1 ! if exist udffile && if not exist Q && echo File not found
if not %result%==0 && if not exist USECTOR &; if not "%find%"=="ISO-9660/UDFdescriptors " && if not exist ISOVDS && if not exist UDFVDS && if not exist UDFFSDS &; if exist find && if exist found &; call Fn.11 "%found%" "%find%" && set result=1 ! set result=0 && if not exist Q && echo %find%not found
if not %result%==0 &; if exist found &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist ISOVDS if not exist UDFVDS if not exist UDFFSDS |; if not exist Q && echo Found: %found%
if not %result%==0 && if not exist USECTOR &; if exist find && if not exist found && if not exist FOUND && set result=0 && if not exist Q && echo %find%not found
if not exist cdfile if not exist cdfile2 if not exist cdfile3 |; if %DATALBN%>=13 && if %DATASIZE%>=1 && set "Rfile=%cdpath%%%RfileID%" && set RfileID= && set Rsector=%DATALBN% && set /a Rsize=%DATASIZE% && set /A Rsectors=%DATASIZE%/%LBsize% &; calc %DATASIZE% % %LBsize% && set /A Rsectors=%Rsectors%+1 ! set Rsectors=%Rsectors% &; set /A Raddress=%DATALBN% * %LBsize% && set DATASIZE= && set DATALBN= &; call Fn.11 "%target%" "/" && set Rsector= && set Rsectors= && set device= ! set Rblock=%device%%%Rsector%+%Rsectors% && set "Rfile=%device%%%Rfile%" && set device=
if exist udffile && if %LBNlen%>=1 && if %LBNloc%>=1 &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; if exist RfileID && set "Rfile=%cdpath%%%RfileID%" && set /a Rsize=%LBNlen% && set /A Rsector=%PTstart%+%LBNloc% &; if exist LBNofset && set /A Raddress=%Rsector% + %MPTofset% * %LBsize% + %LBNofset% && set Roffset=%LBNofset% ! set /A Raddress=%Rsector% * %LBsize% &; if %COPY:~0,2%==MD && if exist mdtarget && set Rmtarget=%mdtarget% && set Rsector= && set Raddress= && set Roffset= && set mdtarget= && set block=
if exist udffile && if exist RfileID && if %LBNlen%>=1 && set /a Rsize=%LBNlen% && set LBNlen= && if exist block &; if exist LBNofset && set Rblock=%device%%%block% && set "Rfile=%device%%%cdpath%%%RfileID%" && set Roffset=%LBNofset% ! set Rblock=%device%%%block% && set "Rfile=%device%%%cdpath%%%RfileID%" &; set fileID= && set block= && set device= && set cdpath= && set LBNofset=
if exist udffile && if exist COPY &; if not %COPY:~0,2%==MD if not %COPY:~0,2%==ER |; map --unmap=%COPY:~2% && if not exist @uefi && map --rehook
if exist Rfile &; call call Fn.11 "%^Rfile%" "\x20" &; echo -n > (md)0x300+2 && call pause --wait=0 "%^Rfile%" > (md)0x301+1 && raw cat --skip=1 --locate=\x22\x0A (md)0x301+1 > nul &; set /a length=%?%-1 &; raw dd if=(md)0x301+1 of=(md)0x300+1 bs=1 count=%length% skip=1 > nul && set length= && raw cat --locate=\x20 --replace=\x5C (md)0x300+1 > nul && set lsskip=0 && call :lsspaces "Rfile"
if not exist volsetID && if not exist UDFrev && if exist LBsize &; setlocal && set /A address=0x10 * %LBsize% + 0x28 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=31 && call :getlfnloop ! call :getentityID "%ADDRESS%" "32" &; if exist result && set "volsetID=%result%" && set result= ! set volsetID=EMPTY &; endlocal && set "volsetID=%volsetID%"
if not exist volsetID && if exist UDFrev && if exist VDSsec && if exist LBsize &; setlocal && set /A address=%VDSsec% * %LBsize% + 72 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=0xA && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop ! call :getentityID "%address%" "127" &; if exist result && set "volsetID=%result%" && set result= ! set volsetID=EMPTY &; endlocal && set "volsetID=%volsetID%"
root %rt% > nul ;; if %pagersts%==1 && pager on > nul ! pager off > nul ;; debug %debugsts% > nul ;; set /a g4dver=*0x8278&0xffffffff > nul &; if not %g4dver%<=20160118 && set g4dver= && debug msg=3 ! set g4dver=
#ORG#if exist find &; call Fn.11 "%find%" "RR" &; call Fn.11 "%find%" "UDF" |; if not %RR%==Y && set result=0 && set numdirs= && set numfiles= && if not %Q%==Y && echo No Rock Ridge Extensions found
if not %Q%==Y &; call Fn.11 "%find%" "DIR" &; if %numdirs%>=1 && if not %numfiles%>=1 && echo -e \x20\x20\x20\x20Number of Directories: %numdirs% ! if not %numdirs%>=1 && if %numfiles%>=1 && echo -e \x20\x20\x20\x20Number of Files: %numfiles% ! if %numdirs%>=1 && if %numfiles%>=1 && echo -e \x20\x20\x20\x20Number of Directories: %numdirs%  Number of Files: %numfiles%
set "volsetID=%volsetID:~0,31%" &; if %reuse%==N && set Lsession= ! set reuse= &; if not exist Rsize && set Rstart= && set Raddress= && set Rmtarget= && set RfileID=
if %reuse%==N && set Lsession= ! set "Lsession=set LBsz=%LBsize% && set CDFS=%CDFSsec% && set CDtotsec=%CDtotsec% && set AVDPsc=%AVDPsec% && set VDsc=%VDSsec% && set VDln=%VDSlen% && set PTstart=%PTstart% && set rev=%UDFrev% && set FSD=%FSDloc% && set RTsc=%RTinfsec% && set "ID=%volsetID%" && set "tgt=%target%" && set mdb=%mdbase%"
if exist Lsession &; if exist VIRTUALP && set "Lsession=%Lsession% && set VP=%VIRTUALP% && set VATa=%VATaddr% && set VATsz=%VATsize% && set VAtgt=%VAtarget% && set VATpr=%VATprLBN%" ! if exist METADATP && set "Lsession=%Lsession% && set MP=%METADATP% && set mf=%metafLBN% && set mm=%metamLBN% && set mb=%metabLBN% && set MFof=%MFofset% && set MMof=%MMofset% && set mir=%MIRROR% && set MAtg=%MAtarget%" &; if exist SPARETBL && set "Lsession=%Lsession% && set SPTB=%SPARETBL% && set SPtg=%SPtarget% && set SPTsz=%SPTBsize% && set SPl=%SPacklen%"
if exist Lsession &; set "Lsession=%Lsession%" &; if %@retval%>=511 && set Lsession=
endlocal && set result=%result% && set Rsize=%Rsize% && set Rstart=%Rsector% && set Rsectors=%Rsectors% && set Rblock=%Rblock% && set Raddress=%Raddress% && set Roffset=%Roffset% && set Rmtarget=%Rmtarget% && set "Rfile=%Rfile%" && set LSN=%LSN% && set numdirs=%numdirs% && set numfiles=%numfiles% && set "Lsession=%Lsession%" &; if %@retval%>=512 && set Lsession=
goto :eof
:getudffileinfo
echo -n > (md)0x300+1 && raw write (md)0x300+1 \x0A > nul && pause --wait=0 %cdpath% >> (md)0x300+1 && raw cat --locate=/ --replace=\x0A (md)0x300+1 &; set /a depth=%@retval% &; if %depth%==1 && set lastdir='/' && set DIR=Y
set SEQ= && set SEQlen= &; set /A volsec=%RTinfsec% && set /A voladdr=%RTinfsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 && if not %nxttagID%==266 && echo File Entry/ Extended File Entry of Root Directory not found && set result=0 && goto :eof
if not %nxttagID%==261 if not %nxttagID%==266 |; call :fileentry &; if not exist LBNloc && set result=0 && goto :eof ! set /A volsec=%PTstart%+%MPTofset%+%LBNloc% && set search=%LBNlen%
if exist UDFROOT && set lastdir= && call :fileidentifierdescriptor &; goto :eof
if exist depth && if %depth%>=2 && raw cat (md)0x300+1 | call :findlastudfdirectory &; if %result%==0 &; if exist udffile && echo '%udffile%' not found && goto :eof ! echo '%subdir%' not found && goto :eof
if "%cdname:~-2,2%"=="**" && set "cdname=%cdname:~0,-1%"
if "%cdext:~-2,2%"=="**" && set "cdext=%cdext:~0,-1%"
if "%cdname%"=="*" && set "Nasterix=*" && set folder= && set cdname=
if "%cdext%"==".*" && set "Easterix=*" && set folder= && set cdext=
if not "%Nasterix%"=="*" &; if "%cdname:~-1,1%"=="*" && set "asterix=*" && set "cdname=%cdname:~0,-1%" && set folder= ! set folder=Y
if "%cdext:~-1,1%"=="*" && set "Easterix=*" && set "cdext=%cdext:~0,-1%" && set folder=
call Fn.11 "%cdname%" "\x20" &; set SPACE=Y && echo -e "%cdname%" | set cdname="
if %SPACE%==Y && set "cdname=%cdname:~2,-1%"
set SPACE= && call Fn.11 "%cdext%" "\x20" &; set SPACE=Y && echo -e "%cdext%" | set cdext="
if %SPACE%==Y && set "cdext=%cdext:~2,-1%"
set SPACE= && set depth= && set subdir= &; if not exist Nasterix if not exist asterix if not exist Easterix || set folder= ! set folder=Y
if exist udffile &; if not "%udffile:~-1,1%"=="/" if not "%udffile:~-2,2%"=="/*" if not "%udffile:~-4,4%"=="/*.*" |; set UDFROOT=Y && set NULL= && set lastdir= && set udffile= && set folder= && call :fileidentifierdescriptor &; if %FOUND%==Y && set "found=%found%UDFFID " && set result=1 ! set result=0 &; set udffile=NONE && goto :eof
if exist UDFDIR && set lastdir= &; if %DIR%==Y && if "%UDFDIR:~-1,1%"=="/" && set GO=DIR ! set GO=FILE &; call :fileidentifierdescriptor &; if %FOUND%==Y && set result=1 ! if not exist Q && set result=0 && echo -e \t File not found ! set result=0 &; set depth= && goto :eof
if exist udffile &; set lastdir= && set DR=Y && set DONE= && set GO=FILE && call :fileidentifierdescriptor &; if exist udffile && if not %DONE%==Y && set result=0 && goto :eof ! set /A volsec=%PTstart%+%MPTofset%+%DIRloc%
if exist udffile &; set /A address=%volsec% * %LBsize% &; call :read %address% %target% &; set /A nxttagID=%result%&0xffff && set result= && set DIRlen= && set DIRloc=
if exist udffile &; if not %nxttagID%==261 if not %nxttagID%==266 |; set NULL= && set LBNofset= &; if not exist Q && echo ! set Q=%Q% &; call :fileentry &; if not exist LBNloc && set result=0 && set depth= && echo '%udffile%' not found && goto :eof
if %DONE%==Y &; call Fn.11 "%found%" "UDFFID " || set "found=%found%UDFFID "
goto :eof
:findlastudfdirectory
if "%~1"=="" && set folder= && set "lastdir=%subdir%" && goto :eof
set "subdir=%~1" && set folder=Y &; call Fn.11 "%subdir%" "\x20" &; set SPACE=Y && echo -e "%subdir%" | set subdir="
if %SPACE%==Y && set "subdir=%subdir:~2,-1%"
set SPACE= && set "subdir=%subdir%" &; set /a sublen=%@retval%
call :findudfdirectoryrecord &; if %result%==0 && goto :eof
shift
goto :findlastudfdirectory
:findudfdirectoryrecord
set "NULL= > nul" && set DONE= && set FOUND= && call :fileidentifierdescriptor &; if exist udffile && if not %DONE%==Y && set result=0 && goto :eof ! if exist UDFDIR && if not %FOUND%==Y && set result=0 && goto :eof ! if exist UDFDIR && if not exist DIRloc && set result=0 && goto :eof ! set subdir=
set /A address=%PTstart% + %MPTofset% + %DIRloc% * %LBsize% &; call :read %address% %target% &; set /A nxttagID=%result%&0xffff && set result=
if not %nxttagID%==261 if not %nxttagID%==266 |; set /A volsec=%PTstart%+%MPTofset%+%DIRloc% && set LBNofset= && call :fileentry &; if %LBNloc%<=0 && set result=0 && goto :eof ! if %allocdTp%==3 && set volsec=%volsec% && set search=%LBNlen% ! if %fileTp%==5 && set /A volsec=%PTstart%+%LBNloc% && set search=%LBNlen% ! set /A volsec=%PTstart%+%MPTofset%+%LBNloc% && set search=%LBNlen%
goto :eof
:UDFfilesetdescriptorsequence
if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " || if not exist Q && echo
if %nxttagID%==256 && call :filesetdescriptor ! if %nxttagID%==257 && call :fileidentifierdescriptor ! if %nxttagID%==258 && call :allocationextentdescriptor ! if %nxttagID%==259 && call :indirectentry ! if %nxttagID%==260 && call :terminalentry ! if %nxttagID%==261 && call :fileentry ! if %nxttagID%==262 && call :extendedattributeheaderDS ! if %nxttagID%==263 && call :unallocatedspaceentry ! if %nxttagID%==264 && call :spacebitmapdescriptor ! if %nxttagID%==266 && call :fileentry ! if %nxttagID%==8 && call :terminatingdescriptor
if %nxttagID%==256 &; if exist rootLBN &; if not exist RTinfsec && set /A RTinfsec=%PTstart%+%MPTofset%+%rootLBN% ! set RTinfsec=%RTinfsec% &; set /A volsec=%PTstart%+%MPTofset%+%rootLBN%-1 && set search=%DIRsize% &; if "%find%"=="UDFFSD " && set SEQ= && goto :eof
if %nxttagID%==261 && if %LBNloc%>=2 && set /A volsec=%PTstart%+%MPTofset%+%LBNloc%-1
if %nxttagID%==266 &; set /A volsec=%PTstart%+%MPTofset%+%LBNloc%-1 && set search=%LBNlen%
if %nxttagID%==257 &; if not exist strmLBN &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " || set SEQ= && goto :eof
if %nxttagID%==257 &; if exist strmLBN &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " || if exist STRMloc && if not exist STRMsec && set STRMsec=%STRMloc% && set STRMloc= && set SEQ= && goto :eof ! if exist STRMloc && set STRMloc= && set SEQ= && goto :eof ! set /A volsec=%PTstart%+%MPTofset%+%strmLBN%-1
if not %nxttagID%==261 if not %nxttagID%==266 |; if exist strmLBN && if %fileTp%==13 && set /A STRMloc=%volsec%+1
if not %nxttagID%==261 if not %nxttagID%==266 |; if "%find%"=="UDFFE " && set SEQ= && goto :eof ! if "%find%"=="UDFEFE " && set SEQ= && goto :eof
set /A volsec=%volsec%+1 &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
if not exist udffile if not exist UDFDIR if not exist UDFROOT |; if %GETROOT%==Y && if exist RTinfsec && set SEQ= && goto :eof
if %nxttagID%>=1 && set /a SEQ=%SEQ%-1 &; if %SEQ%>=1 && goto :UDFfilesetdescriptorsequence ! set SEQ=
set /A volsec=%volsec%+1 &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
set SEQ= &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " || if not exist Q && echo
goto :eof
:filesetdescriptor
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFFSD=%UDFFSD% && set UDFFSDS=%UDFFSDS% && set hexview=%hexview% && set search=%search% && set "find=%find%" && set "found=%found%" && set PTstart=%PTstart% && set FSDloc=%FSDloc% && set UDFrev=%UDFrev% && set PREVIOUS=%PREVIOUS% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if not exist Q && if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFFSD " && set NULL= ! call Fn.11 "%find%" "UDFFSDS " && set NULL=
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e File Set Descriptor:\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFFSD " && set show= && set show2= && set len=
set TGTsec=2 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=512 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]010$[] Recording Date and Time\t\t%Rdatime%%%NULL%
set /A address=%voladdr%+28 &; if not exist NULL &; call :read %address% %target% &; set /A intchlev=%result%&0xffff && set result= &; set /a len=%intchlev% &; echo -e $[0x08]01C$[] Interchange Level\t\t\t%intchlev%%%NULL%
set /A address=%voladdr%+30 &; if not exist NULL &; call :read %address% %target% &; set /A maxintcl=%result%&0xffff && set result= &; set /a len=%maxintcl% &; echo -e $[0x08]01E$[] Maximum Interchange Level\t\t%maxintcl%%%NULL%
set /A address=%voladdr%+32 &; if not exist NULL &; call :read %address% %target% &; set /A chrsetID=%result%&0xffffffff && set result= &; set /a len=%chrsetID% &; echo -e $[0x08]020$[] Character Set List\t\t\t%chrsetID%%%NULL%
set /A address=%voladdr%+36 &; if not exist NULL &; call :read %address% %target% &; set /A maxchrID=%result%&0xffffffff && set result= &; set /a len=%maxchrID% &; echo -e $[0x08]024$[] Max Character Set List\t\t%maxchrID%%%NULL%
set /A address=%voladdr%+40 &; if not exist NULL &; call :read %address% %target% &; set /A filesetN=%result%&0xffffffff && set result= &; set /a len=%filesetN% &; echo -e $[0x08]028$[] File Set Number\t\t\t%filesetN%%%NULL%
set /A address=%voladdr%+44 &; if not exist NULL &; call :read %address% %target% &; set /A maxfsetN=%result%&0xffffffff && set result= &; set /a len=%maxfsetN% &; echo -e $[0x08]02C$[] Max File Set Number\t\t\t%maxfsetN%%%NULL%
set /A address=%voladdr%+48 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63"  "WRAP" &; set "volsetID=%result%" && set result= &; echo -e $[0x08]030$[] Logical Volume Identifier Char Set  %volsetID%%%NULL%
set /A address=%voladdr%+112 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "127" "WRAP" &; set "logvolID=%result%" && set result= &; echo -e $[0x08]070$[] Logical Volume Identifier\t\t%logvolID%%%NULL%
set /A address=%voladdr%+240 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63" "WRAP" &; set "Fcharset=%result%" && set result= &; echo -e $[0x08]0F0$[] File Set Character Set\t\t%Fcharset%%%NULL% && set /u "Fcharset=%Fcharset%" &; call Fn.11 "%Fcharset%" "UNICODE"
set /A address=%voladdr%+304 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=30 && call :getlfnloop ! call :getentityID "%address%" "31" &; set "FsetID=%result%" && set result= &; echo -e $[0x08]130$[] File Set Identifier\t\t\t%FsetID%%%NULL%
set /A address=%voladdr%+336 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=30 && call :getlfnloop ! call :getentityID "%address%" "31" &; set "copyrigh=%resul%" && set result= &; if not exist copyrigh && set copyrigh=EMPTY ! set "copyrigh=%copyrigh%" &; echo -e $[0x08]150$[] Copyright File Identifier\t\t%copyrigh%%%NULL%
set /A address=%voladdr%+368 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=30 && call :getlfnloop ! call :getentityID "%address%" "31" &; set "abstract=%result%" && set result= &; if not exist abstract && set abstract=EMPTY ! set "abstract=%abstract%" &; echo -e $[0x08]170$[] Abstract File Identifier\t\t%abstract%%%NULL%
echo -e $[0x08]190$[] Root Directory ICB%NULL%
set /A address=%voladdr%+400 &; call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff && set result= &; set /a len=%DIRsize% && set "show=%DIRsize%            " &; echo -e $[0x08]    000$[] Length of File Entry\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+4 &; call :read8 %address% %target% &; set /A rootLBN=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%rootLBN% && set "show=%rootLBN%            " &; echo -e $[0x08]    004$[] Location of File Entry\t\t%show:~0,12% %len%%%NULL% && echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL% && set show= && set len=
set /A address=%address%+6 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=6 %target% > nul &; set /A lastICB=%@retval% ;; if not exist NULL &; if %lastICB%==6 && set lastICB=0x0 ! set nextext=NON-ZERO &; echo -e $[0x08]    00A$[] ICB Implementation Use\t\t%lastICB%%%NULL%
set /A address=%voladdr%+416 &; if not exist NULL &; call :read8 %address% %target% &; set /A domainID=%result%&0xffffffffffffffff && set result= &; if %domainID%==0 && set domainID=EMPTY
if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result=
if not exist NULL &; echo -n -e $[0x08]1A0$[] Domain Identifier%NULL% &; if "%domainID%"=="EMPTY" && echo -e \t\t\t%domainID%%%NULL% ! echo%NULL%
if not "%domainID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Domain Identifier\t\t%identifi%%%NULL%
set /A address=%address%+24 &; if not "%domainID%"=="EMPTY" && setlocal && call :read8 %address% %target% &; set /A DMsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%DMsuffix%&0xffff && set /A DMflags=%DMsuffix%&0xff0000>>16 &; if not %DMsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] Flags\t\t\t%DMflags%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
set /A address=%voladdr%+448 &; raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; if %@retval%==16 && set nextext=EMPTY
if not %nextext%==EMPTY && echo -e $[0x08]1C0$[] Next Extent%NULL% ! echo -e $[0x08]1C0$[] Next Extent\t\t\t\tEMPTY%NULL% &; call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff && set result= &; set /a len=%DIRsize% && set "show=%DIRsize%            " &; echo -e $[0x08]    000$[] Length of Next Extent\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+4 && if not %nextext%==EMPTY &; call :read8 %address% %target% &; set /A nextLBN=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%nextLBN% && set "show=%nextLBN%            " &; echo -e $[0x08]    004$[] Location of Next Extent\t\t%show:~0,12% %len%%%NULL% && echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL% && set show= && set len=
set /A address=%address%+6 && if not %nextext%==EMPTY && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=6 %target% > nul &; set /A lastICB=%@retval% ;; if not %nextext%==EMPTY && if not exist NULL &; if %lastICB%==6 && set lastICB=0x0 ! set nextext=NON-ZERO &; echo -e $[0x08]    00A$[] Implementation Use\t\t%lastICB%%%NULL%
if %UDFrev%>=0x200 && set /A address=%voladdr%+464 &; call :read %address% %target% &; set /A strmDIR=%result%&0xffffffff && set result= &; if not %strmDIR%==0 && echo -e $[0x08]1D0$[] System Stream Directory ICB%NULL% ! echo -e $[0x08]1D0$[] System Stream Directory ICB\t\tEMPTY%NULL% &; if not %strmDIR%==0 && call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff && set result= &; set /a len=%DIRsize% && set "show=%DIRsize%            " &; echo -e $[0x08]    000$[] Length of Directory\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %UDFrev%>=0x200 && set /A address=%address%+4 && if not %strmDIR%==0 &; call :read8 %address% %target% &; set /A strmLBN=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%strmLBN% && set "show=%strmLBN%            " &; echo -e $[0x08]    004$[] Location of Directory\t\t%show:~0,12% %len%%%NULL% && echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL% && set show= && set len=
if %UDFrev%>=0x200 && set /A address=%address%+6 && if not %strmDIR%==0 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=6 %target% > nul &; set /A lastICB=%@retval% ;; if %UDFrev%>=0x200 && if not %strmDIR%==0 && if not exist NULL &; if %lastICB%==6 && set lastICB=0x0 ! set nextext=NON-ZERO &; echo -e $[0x08]    00A$[] Implementation Use\t\t%lastICB%%%NULL%
if %hexview%==Y && set /A len=%address%+6-%voladdr% &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
endlocal && set volsec=%volsec% && set DIRsize=%DIRsize% && set rootLBN=%rootLBN% && set "found=%found%" && set UDFrev=%UDFrev% && set strmLBN=%strmLBN%
if exist MAtarget && if exist rootLBN && set /A Maddress=%rootLBN% * 4 &; call :read %Maddress% %MAtarget% &; set /A rootLBN=%result%&0xffffffff+%rootLBN% && set result=0 && set Maddress=
if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist rootLBN && call :sparingtable "rootLBN" "%rootLBN%" &; if not exist rootLBN && echo Physical Block Address for '%rootLBN%' of Root Directory not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if exist MAtarget && if exist strmLBN && set /A Maddress=%strmLBN% * 4 &; call :read %Maddress% %MAtarget% &; set /A strmLBN=%result%&0xffffffff+%strmLBN% && set result=0 && set Maddress=
if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist strmLBN && call :sparingtable "strmLBN" "%strmLBN%" &; if not exist strmLBN && echo Physical Block Address for '%strmLBN%' of System Stream Directory not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if %VIRTUALP%==Y && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if exist rootLBN && call :virtualallocationtable "rootLBN" "%rootLBN%" &; if not exist rootLBN && echo Logical Block Address '%rootLBN%' for Root Directory not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
goto :eof
:fileidentifierdescriptor
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFROOT=%UDFROOT% && set "udffile=%udffile%" && set "cdname=%cdname%" && set "cdext=%cdext%" && set folder=%folder% && set "subdir=%subdir%" && set sublen=%sublen% && set hexview=%hexview% && set search=%search% && set "UDFDIR=%UDFDIR%" && set GO=%GO% && set "Nasterix=%Nasterix%" && set "asterix=%asterix%" && set "Easterix=%Easterix%" && set "found=%found%" && set LBNofset=%LBNofset% && set DR=%DR% && set GETROOT=%GETROOT% && set PTstart=%PTstart% && set "find=%find%" && set mdtarget=%mdtarget% && set LBNlen=%LBNlen% && set MPTofset=%MPTofset% && set MAtarget=%MAtarget% && set VATaddr=%VATaddr% && set VATsize=%VATsize% && set VAtarget=%VAtarget% && set PREVIOUS=%PREVIOUS% && set USECTOR=%USECTOR% && set mdbase=%mdbase% && set "i=%i%" && set Q=%Q% && set ATTRIB=%ATTRIB% && set "cdpath=%cdpath%" && set "NULL=%NULL%"
if not %search%>=32 && if exist LBNlen && set search=%LBNlen%
if exist NULL && if not exist Q && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFFID " && set NULL= ! call Fn.11 "%find%" "UDFFSDS " && set NULL=
if not exist Q &; if not exist udffile if not exist UDFDIR || set "NULL= > nul" ! if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " || set NULL=
if exist USECTOR && set UDFROOT=Y && set search=%LBsize%
if not exist UDFROOT |; if exist cdpath && echo File Identifier Descriptors in: '%cdpath%'%NULL% && echo%NULL% ! echo File Identifier Descriptors in: '/'%NULL% && echo%NULL%
set /A voladdr=%volsec% * %LBsize% &; if exist LBNofset && set /A voladdr=%voladdr%+%LBNofset% && set nxttagID=257 ! set LBNofset=0 &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e File Identifier Descriptor:\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set show= && set show2= && set len=
if not exist mdtarget &; set /a TGTsec=%search%/0x200 &; calc %search% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; if %TGTsec%<=255 && echo -n > (md)%mdbase%+%TGTsec% ! echo -n > (md)%mdbase%+255 &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%search% skip=%voladdr% > nul && set "CDtarget=%target%" && set CDofset=%LBNofset% && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set TGTsec=
if exist mdtarget &; set target=%mdtarget% && set /A voladdr=%LBNofset%
set address=%voladdr% && set /A num=0 && set loop=0 && set fulladdr=%voladdr% && set orgsec=%volsec%
if %GO%==FILE && if not exist subdir && if not exist cdname && if not exist cdext && if "%Nasterix%"=="*" && if "%Easterix%"=="*" && set GO=DIR
if exist subdir && if not exist sublen &; set "subdir=%subdir%" &; set /a sublen=%@retval%
if %Q%==Y && set "NULL= > nul" && set numdirs=0 && set numfiles=0 ! if exist UDFDIR && set numdirs=0 && set numfiles=0
if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-D" && set DIRS=N ! call Fn.11 "%ATTRIB%" "D" && set DIRS=Y && set FILES=N ;; if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-F" && set FILES=N ! call Fn.11 "%ATTRIB%" "F" && set FILES=Y && if not %DIRS%==Y && set DIRS=N ;; if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-H" && set HIDDEN=N ! call Fn.11 "%ATTRIB%" "H" && set HIDDEN=Y ;; if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-0" && set DELETED=N ! call Fn.11 "%ATTRIB%" "0" && set DELETED=Y ;; if exist ATTRIB &; if %DIRS%==N && if %FILES%==N && set DIRS= && set FILES= ! if %DIRS%==Y && if %FILES%==Y && set DIRS= && set FILES=
:fileidentifierdescriptorloop
if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " if not exist UDFROOT |; if %loop%>=1 && if not exist NULL &; if "%target:~0,4%"=="(md)" && if exist mdtarget && set /A fulladdr=%orgsec% * %LBsize% + %address% ! if "%target:~0,4%"=="(md)" && set /A fulladdr=%orgsec% * %LBsize% + %address% + %LBNofset% ! set fulladdr=%address% &; set /a len=%orgsec% &; set "show=%orgsec%            " && set "show2=%len%            " &; echo -e File Identifier Descriptor:\t\t%show:~0,12% %show2:~0,12% %fulladdr%%%NULL% && set show= && set show2= && set len=
if %DONE%==Y && if not exist NULL &; if exist cdpath && echo Entry in: '%cdpath%'%NULL% ! echo Entry in: '/'%NULL%
if %DONE%==Y && if not exist NULL &; if "%target:~0,4%"=="(md)" && if exist mdtarget && set /A fulladdr=%orgsec% * %LBsize% + %address% ! if "%target:~0,4%"=="(md)" && set /A fulladdr=%orgsec% * %LBsize% + %address% + %LBNofset% ! set fulladdr=%address% &; set /a len=%orgsec% &; set "show=%orgsec%            " && set "show2=%len%            " &; echo -e File Identifier Descriptor:\t\t%show:~0,12% %show2:~0,12% %fulladdr%%%NULL% && set show= && set show2= && set len=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%address%" &; set orgaddr=%address% && set /A num=%num%+16
if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " if not exist UDFROOT if not %DONE%==Y |; if exist MAtarget && if %taglocat%>=1 && set /A Maddress=%taglocat% * 4 &; call :read %Maddress% %MAtarget% &; set /A taglocat=%result%&0xffffffff+%taglocat% && set result= && set Maddress=
if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " if not exist UDFROOT if not %DONE%==Y |; if exist VATaddr && if exist VATsize && if %taglocat%>=1 && call :virtualallocationtable "taglocat" "%taglocat%" &; if not exist taglocat && set taglocat=%orgsec%
if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " if not exist UDFROOT if not %DONE%==Y || set /A orgsec=%taglocat%+%PTstart%+%MPTofset% && set taglocat= ! set taglocat=
set /A address=%address%+16 &; if not exist NULL &; call :read %address% %target% &; set /A filevnum=%result%&0xffff && set result= &; echo -e $[0x08]010$[] File Version Number\t\t\t%filevnum%%%NULL% &; set /A num=%num%+2
set /A address=%address%+2 &; call :read %address% %target% &; set /A filecara=%result%&0xff && set result= &; echo -e $[0x08]012$[] File Characteristics\t\t%filecara%%%NULL% &; set /A num=%num%+1
setlocal && call :getbits0-7 "%filecara%" &; endlocal && set bit0=%bit0% && set bit1=%bit1% && set bit2=%bit2% && set bit3=%bit3% && set bit4=%bit4% && set filecara= &; if %bit1%==1 && set DIR=Y ! set DIR= &; if %bit4%==1 && set METADATA=Y ! set METADATA=
if not exist NULL && if %bit0%==1 && echo -e \x20\x20\x20\x20\x20Bit 0 = %bit0%  HIDDEN%NULL%
if not exist NULL &; if %bit1%==0 && echo -e \x20\x20\x20\x20\x20Bit 1 = %bit1%  FILE%NULL% ! if %bit1%==1 && echo -e \x20\x20\x20\x20\x20Bit 1 = %bit1%  DIRECTORY%NULL%
if not exist NULL && if %bit2%==1 && echo -e \x20\x20\x20\x20\x20Bit 2 = %bit2%  DELETED%NULL%
if %bit3%==1 && set mountUDF=Y && if not exist NULL && echo -e \x20\x20\x20\x20\x20Bit 3 = %bit3%  PARENT%NULL%
if not exist NULL && if %bit4%==1 && echo -e \x20\x20\x20\x20\x20Bit 4 = %bit4%  METADATA
set /A address=%address%+1 &; call :read %address% %target% &; set /A L_FI=%result%&0xff && set result= &; set /a len=%L_FI% &; set "show=%L_FI%            " &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; echo -e $[0x08]013$[] Length of File Identifier\t\t%show:~0,12% %len%%%NULL% &; set /A num=%num%+1 && set show= && set len=
if not exist NULL && echo -e $[0x08]014$[] Directory Record ICB%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A DIRlen=%result%&0xffffffff && set result= &; set /a len=%DIRlen% &; set "show=%DIRlen%            " &; echo -e $[0x08]    000$[] Directory Record Length\t\t%show:~0,12% %len%%%NULL% &; set /A num=%num%+4 && set show= && set len=
set /A address=%address%+4 &; call :read8 %address% %target% &; set /A DIRloc=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%DIRloc% &; set "show=%DIRloc%            " &; echo -e $[0x08]    004$[] Directory Record Location\t%show:~0,12% %len%%%NULL% && echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL% && set /A num=%num%+6 && set show= && set len=
set /A address=%address%+6 &; call :read8 %address% %target% &; set /A DIRIus=%result%&0xffffffffffff && set result= &; call :read %address% %target% &; set /A flags=%result%&0xffff && set result= &; set /A address=%address%+2 &; call :read %address% %target% &; set /A UDFuniqI=%result%&0xffffffff && set result= &; if not %DIRIus%==0 && echo -e $[0x08]    00A$[] Directory Record Implement Use%NULL% && echo -e $[0x08]        000$[] Flags\t\t\t%flags%%%NULL% && echo -e $[0x08]        002$[] UDF Unique ID\t\t%UDFuniqI%%%NULL% ! echo -e $[0x08]    00A$[] Directory Record Implement Use  EMPTY%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A L_IU=%result%&0xffff && set result= &; set /a len=%L_IU% &; set "show=%L_IU%            " &; echo -e $[0x08]024$[] Length of Implementation Use\t%show:~0,12% %len%%%NULL% &; set /A num=%num%+2 && set show= && set len=
set /A address=%address%+2 && if %L_IU%>=1 &; raw cat --skip=%address% --locate=\x00 --length=%L_IU% %target% > nul &; set /A zeros=%@retval% ;; if %L_IU%>=1 &; if not %zeros%==%L_IU% && echo -e $[0x08]026$[] Implementation Use%NULL% ! echo -e $[0x08]026$[] Implementation Use\t\t\tEMPTY%NULL% && set implemID=EMPTY
if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "devlprID=%result%" && set result= &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Developer ID\t\t\t%devlprID%%%NULL%
set /A address=%address%+24 &; if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffff0000>>16 &; call :OStypes &; if %IIbytes%==0 && set IIbytes=EMPTY ! set IIbytes=%IIbytes% &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal ! echo -e $[0x08]    018$[] Identifier Suffix\t\t\tEMPTY%NULL% && endlocal
if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL && if not %L_IU%<=32 && set /A address2=%address%+8 && set /A remL_IU=%L_IU%-32 &; raw cat --skip=%address2% --locate=\x00 --length=%remL_IU% %target% > nul &; set /A zeros=%@retval% ;; if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL && if not %L_IU%<=32 &; if not %zeros%==%remL_IU% && echo -e $[0x08]    020$[] Implementation Use\t\tNot Empty%NULL% ! echo -e $[0x08]    020$[] Implementation Use\t\tEMPTY%NULL% &; set address2= && set remL_IU= && set zeros=
set /A address=%address%-24+%L_IU% && set /A num=%num%+%L_IU% &; call :read %address% %target% &; set /A charID=%result%&0xff && set result=
if not %bit2%==1 && if %L_FI%>=1 && if %charID%<=8 && set /a LEN_FI=%L_FI%-1 && set /A num=38+%L_IU% &; call :getentityID "%address%" "%LEN_FI%" "WRAP" &; call set "FileID=%^result%" && set result= && if not exist NULL &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; call echo -e $[0x08]%HEX:~-3,3%$[0x0]"$[]File Identifier\t\t\t%^FileID%
if not %bit2%==1 && if %L_FI%>=1 && if %charID%<=8 && set /A num=%num%+%L_FI% && set /A address=%address%+%L_FI% &; call set "FileID=%lfnfile%"
if %bit2%==1 && if %L_FI%>=1 && if %charID%==0xFE && set /a LEN_FI=%L_FI%-1 && set /A num=38+%L_IU% &; call :getentityID "%address%" "%LEN_FI%" "WRAP" &; call set "FileID=%^result%" && set result= && if not exist NULL &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; call echo -e $[0x08]%HEX:~-3,3%$[0x0]"$[]File Identifier\t\t\t%^FileID%
if %bit2%==1 && if %L_FI%>=1 && if %charID%==0xFE && set /A num=%num%+%L_FI% && set /A address=%address%+%L_FI% && call set "FileID=%^lfnfile%"
if not %bit2%==1 &; if %L_FI%>=1 && if %charID%>=10 && set /A skipzero=%address%+2 && set /a namelen=%L_FI%-2 && set /A num=38+%L_IU% && call :getlfnloop "WRAP" &; call set "FileID=%^result%" && set result= && if not exist NULL &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; call echo -e $[0x08]%HEX:~-3,3%$[0x0]"$[]File Identifier\t\t\t%^FileID%
if not %bit2%==1 &; if %L_FI%>=1 && if %charID%>=10 && set /A num=%num%+%L_FI% && set /A address=%address%+%L_FI% && call set "FileID=%^lfnfile%"
if %bit2%==1 &; if %L_FI%>=1 && if %charID%==0xFF && set /A skipzero=%address%+2 && set /a namelen=%L_FI%-2 && set /A num=38+%L_IU% && call :getlfnloop "WRAP" &; call set "FileID=%^result%" && set result= && if not exist NULL &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; call echo -e $[0x08]%HEX:~-3,3%$[0x0]"$[]File Identifier\t\t\t%^FileID%
if %bit2%==1 &; if %L_FI%>=1 && if %charID%==0xFF && set /A num=%num%+%L_FI% && set /A address=%address%+%L_FI% && call set "FileID=%^lfnfile%"
if not %L_FI%>=1 && if %charID%==0 && set /A num=38+%L_IU% &; if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; echo -e $[0x08]%HEX:~-3,3%$[] File Identifier\t\t\t0x0%NULL%
set lfnfile= && set /a padding=%L_FI%+%L_IU%+38 &; calc %padding% % 4 &; set /A padding=4-%@retval% &; set /A address=%address%+%padding% && set /A num=%num%+%padding%
set len= && set HEX= && set LEN_FI= && set charID= && set padding= && set UDFuniqI= && set bit3= && set bit4=
if %loop%==1 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find%"=="UDFFSDS " |; set DONE=Y && set nxttagID=0x101
if %DONE%==Y && if %hexview%==Y && set /a length=%address%-%orgaddr% &; if exist CDtarget && set /A orgaddr=%fulladdr% ! set orgaddr=%orgaddr% &; if exist CDtarget && raw cat --hex --skip=%orgaddr% --length=%length% %CDtarget%%%NULL% ! raw cat --hex --skip=%orgaddr% --length=%length% %target%%%NULL%
if %DONE%==Y &; if %bit1%==0 && set "RfileID=%FileID%" ! set RfileID= &; set "found=%found%UDFFID " && goto :endoffileidentifierdescriptor
if exist udffile && if exist subdir && if exist FileID &; if %folder%==Y && call if %i% "%^subdir%"=="%^FileID%" && set DONE=Y && goto :endoffileidentifierdescriptor
if exist UDFDIR && if not exist GO && if %folder%==Y && if exist FileID &; call if %i% "%^subdir%"=="%^FileID%" &; if %bit1%==1 && set DIR=Y ! set DIR= &; set FOUND=Y && goto :endoffileidentifierdescriptor
if not %show%==Y &; if not exist UDFDIR |; if %GO%==DIR && if exist FileID && set show=Y && set folder=
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if %folder%==Y && if exist cdname && if exist cdext &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name%"=="%^cdname%" && call if %i% "%^ext%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if %folder%==Y && if exist cdname && if not exist cdext &; call call :getnameandextension "%^FileID%" &; if exist name && if not exist ext &; call if %i% "%^name%"=="%^cdname%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if %folder%==Y && if not exist cdname && if exist cdext &; call call :getnameandextension "%^FileID%" &; if not exist name && if exist ext &; call if %i% "%^ext%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if exist cdext &; if not "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name%"=="%^cdname%" && call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" &; set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if exist cdext &; if "%asterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && call if %i% "%^ext%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if not exist cdname && if not exist cdext &; if "%Nasterix%"=="*" && if "%Easterix%"=="*" &; set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if not exist cdname && if exist cdext &; if "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if not exist cdname && if exist cdext &; if "%Nasterix%"=="*" && if "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if exist cdext &; if "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if not exist cdext &; if not "%asterix%"=="*" && if "%Easterix%"=="*" &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name%"=="%^cdname%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if not exist cdext &; if "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if not exist cdext &; if not "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not %show%==Y if not exist subdir &; if not exist UDFDIR if not %DR%==Y |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if not exist cdname && if exist cdext &; if not "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" &; set show=Y
if %show%==Y &; if %DR%==Y && set DONE=Y && set address=%orgaddr% &; if not exist Q && set NULL= ! set Q=%Q% &; goto :fileidentifierdescriptorloop
if %show%==Y && if exist ATTRIB && if exist HIDDEN &; if %bit0%==0 && if %HIDDEN%==Y && set show= ! if %bit0%==1 && if %HIDDEN%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist DIRS &; if %bit1%==0 && if %DIRS%==Y && set show= ! if %bit1%==1 && if %DIRS%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist FILES &; if %bit1%==1 && if %FILES%==Y && set show= ! if %bit1%==0 && if %FILES%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist DELETED &; if %bit2%==1 && if %DELETED%==N && set show= ! if %bit2%==0 && if %DELETED%==Y && set show=
#NOTSOGOOD#if %show%==Y &; if not exist ATTRIB && if %bit2%==1 && set show= ! set show=%show% &; if exist ATTRIB && if exist HIDDEN &; if %bit0%==0 && if %HIDDEN%==Y && set show= ! if %bit0%==1 && if %HIDDEN%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist DIRS &; if %bit1%==0 && if %DIRS%==Y && set show= ! if %bit1%==1 && if %DIRS%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist FILES &; if %bit1%==1 && if %FILES%==Y && set show= ! if %bit1%==0 && if %FILES%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist DELETED &; if %bit2%==1 && if %DELETED%==N && set show= ! if %bit2%==0 && if %DELETED%==Y && set show=
if %show%==Y && if not exist Q &; call call Fn.11 "%^FileID%" "\x20" &; echo -n > (md)0x300+1 && echo -n > (md)0x301+1 && call pause --wait=0 "%^FileID%" > (md)0x301+1 && raw cat --skip=1 --locate=\x22\x0A (md)0x301+1 > nul &; set /a length=%?%-1 &; raw dd if=(md)0x301+1 of=(md)0x300+1 bs=1 count=%length% skip=1 > nul && set length= && raw cat --locate=\x20 --replace=\x5C (md)0x300+1 > nul && set lsskip=0 && call :lsspaces "FileID"
if %show%==Y && if not exist Q && set show= &; if %bit0%==1 && set "property=(H)" ! set bit0= &; if %bit2%==1 && set "property=%property%(0)" ! set bit2= &; if exist property && set "property=$[0x08]%property%" ! set property= &; if %bit1%==1 && set /a numdirs=%numdirs%+1 && call echo -n $[0x0F] %^FileID%%%property% ! set /a numfiles=%numfiles%+1 && call echo -n $[] %^FileID%%%property% &; set FOUND=Y && set property= &; if %folder%==Y && set numdirs= && set numfiles= && goto :endoffileidentifierdescriptor
if %show%==Y && if %Q%==Y && set show= && set FOUND=Y &; if %bit1%==1 && set /a numdirs=%numdirs%+1 ! set /a numfiles=%numfiles%+1 &; if %folder%==Y && goto :endoffileidentifierdescriptor
set name= && set cdnameln= && set ext= && set cdextln=
if exist search && set /A searched=%address%-%voladdr% &; calc %searched% % %LBsize% && set /a remain=%LBsize%-%@retval% ! set remain=0 &; if not %remain%>=16 && if not %remain%==0 && set /A address=%address%+%remain% ! set address=%address% &; call :read %address% %target% &; set /A tagID=%result%&0xffff
if exist search && if not %searched%>=%search% && if %tagID%==257 && echo%NULL% && set /a loop=%loop%+1 && set FileID= && set remain= && set DIRlen= && set DIRloc= && set tagID= && set bit0= && set bit1= && set bit2= && goto :fileidentifierdescriptorloop ! goto :endoffileidentifierdescriptor
:endoffileidentifierdescriptor
if %UDFROOT%==Y && set FOUND=Y
if not %DONE%==Y && if %hexview%==Y &; if exist CDtarget && set /A voladdr=%volsec% * %LBsize% + %CDofset% && set /A len=%address%-%voladdr% ! set voladdr=%voladdr% && set /a len=%address%-%voladdr% &; if exist CDtarget && raw cat --hex --skip=%voladdr% --length=%len% %CDtarget%%%NULL% ! raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
endlocal && set mountUDF=%mountUDF% && set DIRlen=%DIRlen% && set DIRloc=%DIRloc% && set DONE=%DONE% && set DIR=%DIR% && set FOUND=%FOUND% && set "found=%found%" && set nxttagID=%nxttagID% && set mdtarget=%mdtarget% && set METADATA=%METADATA% && set numdirs=%numdirs% && set numfiles=%numfiles% && set "FileID=%FileID%" && set "RfileID=%RfileID%" && set search= && set asterix= && set Nasterix= && set Easterix= && set sublen= && set LBNofset=
if exist MAtarget && set /A Maddress=%DIRloc% * 4 &; call :read %Maddress% %MAtarget% &; set /A DIRloc=%result%&0xffffffff+%DIRloc% && set result=0 && set Maddress=
if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist DIRloc && call :sparingtable "DIRloc" "%DIRloc%" &; if not exist DIRloc && echo Physical Block Address for '%DIRloc%' of (Extended) File Entry not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if %VIRTUALP%==Y && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if exist DIRloc && call :virtualallocationtable "DIRloc" "%DIRloc%" &; if not exist DIRloc && echo Logical Block Address '%DIRloc%' for (Extended) File Entry not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
goto :eof
:indirectentry
setlocal
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /A volsec=%volsec% && set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Indirect Entry:\t\t\t %volsec%\t%t% %len%\t%t2% %voladdr% && set "found=%found%UDFIE " && set t= && set t2= && set len=
set TGTsec=1 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%address% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=52 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set address=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
if not exist NULL && echo -e $[0x08]010$[] ICB Tag%NULL%
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A prnmdent=%result%&0xffffffff && set result= &; set /a len=%prnmdent% &; echo -e $[0x08]    000$[] Prior Recorded Direct En %prnmdent%\t\t %len%%%NULL% && set len=
set /A address=%address%+4 &; if not exist NULL &; call :read %address% %target% &; set /A stratTp=%result%&0xffff && set result= &; set /a len=%stratTp% &; echo -e $[0x08]    004$[] Strategy Type\t\t %stratTp%\t\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A stratPar=%result%&0xffff && set result= &; set /a len=%stratPar% &; echo -e $[0x08]    006$[] Strategy Parameter\t %stratPar%\t\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A Mxnmentr=%result%&0xffff && set result= &; set /a len=%Mxnmentr% &; echo -e $[0x08]    008$[] Maximum Number o Entries %Mxnmentr%\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A reserved=%result%&0xff && set result= &; echo -e $[0x08]    00A$[] Reserved\t\t %reserved%%%NULL%
set /A address=%address%+1 &; if not exist NULL &; call :read %address% %target% &; set /a fileTp=%result%&0xff && set result= &; echo -e $[0x08]    00B$[] File Type\t\t %fileTp%%%NULL%
set /A address=%address%+1 &; call :read8 %address% %target% &; set /A parICBlc=%result%&0xffffffffffffffff && set result= &; if %parICBlc%==0 && set parICBlc=EMPTY ! set /A LBNloc=%parICBlc%&0xffffffff && set /A PTrefnum=%parICBlc%&0xffff00000000>>32
if not exist NULL &; echo -n -e $[0x08]    00C$[] Parent ICB Location%NULL% &; if "%parICBlc%"=="EMPTY" && echo -e \t %parICBlc%%%NULL% ! echo%NULL%
if not "%parICBlc%"=="EMPTY" && if not exist NULL && set /a len=%LBNloc% &; if %LBNloc%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]        000$[] Logical Block Number %LBNloc%%%t% %len%%%NULL% && set len= && set t= &; set /a len=%PTrefnum% &; if %PTrefnum%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]        004$[] Partition Reference  %PTrefnum%%%t% %len%%%NULL% && set len= && set t=
set /A address=%address%+6 &; if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xffff && set result= &; echo -e $[0x08]    012$[] Flags\t\t\t %flags%%%NULL%
echo -e $[0x08=024$[] Indirect ICB%NULL%
set /A address=%voladdr%+32 &; call :read %address% %target% &; set /A LBNlen=%result%&0xffffffff && set result= &; set /a len=%LBNlen% &; if %LBNlen%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]    000$[] ICB Length\t\t %LBNlen%\t%t% %len%%%NULL% && set len= && set t=
set /A address=%address%+4 &; call :read8 %address% %target% &; set /A LBNloc=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%LBNloc% &; if %LBNloc%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]    004$[] ICB Location %LBNloc%\t%t% %len%%%NULL% && echo -e $[0x08]    008$[] Partition Reference Numb %PTrefnum%\t%t% %len%%%NULL% && set LBNofset= && set len= && set t=
set /A address=%address%+6 &; call :read8 %address% %target% &; set /A implmuse=%result%&0xffffffffffff && set result= &; set /a len=%implmuse% &; if %implmuse%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]    00A$[] Implementation Use\t\t %implmuse%\t %len%%%NULL% && set len=
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=48 %target%%%NULL%
endlocal && set "found=%found%" && goto :eof
:terminalentry
setlocal
if not exist Q && if not exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFTD " && set NULL= ! call Fn.11 "%find%" "UDFFSDS " && set NULL= ! call Fn.11 "%find%" "UDFVDS" && set NULL=
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Terminal Entry:\t\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFTE " && set len= && set show= && set show2=
set TGTsec=1 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%address% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=36 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set address=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
if not exist NULL && echo -e $[0x08]010$[] ICB Tag%NULL%
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A prnmdent=%result%&0xffffffff && set result= &; set /a len=%prnmdent% &; echo -e $[0x08]    000$[] Prior Recorded Direct En %prnmdent%\t\t %len%%%NULL% && set len=
set /A address=%address%+4 &; if not exist NULL &; call :read %address% %target% &; set /A stratTp=%result%&0xffff && set result= &; set /a len=%stratTp% &; echo -e $[0x08]    004$[] Strategy Type\t\t %stratTp%\t\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A stratPar=%result%&0xffff && set result= &; set /a len=%stratPar% &; echo -e $[0x08]    006$[] Strategy Parameter\t %stratPar%\t\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A Mxnmentr=%result%&0xffff && set result= &; set /a len=%Mxnmentr% &; echo -e $[0x08]    008$[] Maximum Number o Entries %Mxnmentr%\t %len%%%NULL% && set len=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A reserved=%result%&0xff && set result= &; echo -e $[0x08]    00A$[] Reserved\t\t %reserved%%%NULL%
set /A address=%address%+1 &; if not exist NULL &; call :read %address% %target% &; set /a fileTp=%result%&0xff && set result= &; echo -e $[0x08]    00B$[] File Type\t\t %fileTp%%%NULL%
set /A address=%address%+1 &; call :read8 %address% %target% &; set /A parICBlc=%result%&0xffffffffffffff && set result= &; if %parICBlc%==0 && set parICBlc=EMPTY ! set /A LBNloc=%parICBlc%&0xffffffff && set /A PTrefnum=%parICBlc%&0xff00000000>>32
if not exist NULL &; echo -n -e $[0x08]    00C$[] Parent ICB Location%NULL% &; if "%parICBlc%"=="EMPTY" && echo -e \t %parICBlc%%%NULL% ! echo%NULL%
if not "%parICBlc%"=="EMPTY" && if not exist NULL && set /a len=%LBNloc% &; if %LBNloc%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]        000$[] Logical Block Number %LBNloc%%%t% %len%%%NULL% && set len= && set t= && set /a len=%PTrefnum% &; if %PTrefnum%<=0xFFFF && set "t=\t" ! set t= &; echo -e $[0x08]        004$[] Partition Reference  %PTrefnum%%%t% %len%%%NULL% && set len= && set t=
set /A address=%address%+6 &; if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xffff && set result= &; echo -e $[0x08]    012$[] Flags\t\t\t %flags%%%NULL%
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=36 %target%%%NULL%
endlocal && set "found=%found%" && goto :eof
:fileentry
if exist LBNofset && call :fileidentifierdescriptor &; goto :eof
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFFE=%UDFFE% && set UDFEFE=%UDFEFE% && set UDFFSDS=%UDFFSDS% && set "find=%find%" && set "found=%found%" && set PTstart=%PTstart% && set UDFrev=%UDFrev% && set DIR=%DIR% && set MPTofset=%MPTofset% && set MAtarget=%MAtarget% && set "udffile=%udffile%" && set "COPY=%COPY%" && set VAtarget=%VAtarget% && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set mdbase=%mdbase% && set SPARETBL=%SPARETBL% && set SPtarget=%SPtarget% && set SPTBsize=%SPTBsize% && set SPacklen=%SPacklen% && set PTstartN=%PTstartN% && set Q=%Q% && set "NULL=%NULL%"
if not exist Q && if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFFE " && set NULL= ! call Fn.11 "%find%" "UDFEFE " && set NULL= ! call Fn.11 "%find%" "UDFFSDS " && set NULL=
if %Q%==Y && set "NULL= > nul"
set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A tagID=%result%&0xffff && set result=
if not exist NULL &; if %tagID%==266 && if "%find%"=="UDFFE " && endlocal && goto :eof ! if %tagID%==261 && if "%find%"=="UDFEFE " && endlocal && goto :eof
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; if %tagID%==261 && echo -e File Entry:\t\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFFE " ! echo -e Extended File Entry:\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFEFE " &; set show= && set show2= && set len=
set /a TGTsec=%LBsize%/0x200 &; echo -n > (md)%mdbase%+%TGTsec% && raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%LBsize% skip=%voladdr% > nul && set "CDtarget=%target%" && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set TGTsec=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%" &; if not exist NULL && echo -e $[0x08]010$[] ICB Tag%NULL%
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A prnmdent=%result%&0xffffffff && set result= &; echo -e $[0x08]    000$[] Prior Recorded Direct Entry\t%prnmdent%%%NULL% && set len= && set prnmdent=
set /A address=%address%+4 &; if not exist NULL &; call :read %address% %target% &; set /A stratTp=%result%&0xffff && set result= &; echo -e $[0x08]    004$[] Strategy Type\t\t\t%stratTp%%%NULL% && set len= && set stratTp=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A stratPar=%result%&0xffff && set result= &; echo -e $[0x08]    006$[] Strategy Parameter\t\t%stratPar%%%NULL% && set len= && set stratPar=
set /A address=%address%+2 &; if not exist NULL &; call :read %address% %target% &; set /A Mxnmentr=%result%&0xffff && set result= &; set /a len=%Mxnmentr% &; set "show=%Mxnmentr%            " &; echo -e $[0x08]    008$[] Maximum Number of Entries\t%show:~0,12% %len%%%NULL% && set len= && set Mxnmentr= && set show=
set /A address=%address%+3 &; call :read %address% %target% &; set /a fileTp=%result%&0xff && set result= &; set "show=%fileTp%            " &; echo -n -e $[0x08]    00B$[] File Type\t\t\t%show:~0,12% %NULL% && set show=
if %fileTp%==0 &; if %UDFrev%==0x150 && echo -e $[0x0F]Virtual Allocation Table%NULL% ! echo -e $[0x0F]Undefined%NULL%
if %fileTp%==4 && echo -e Directory%NULL% && set DIR=Y ! if %fileTp%==5 && echo -e File%NULL% && set DIR= ! if %fileTp%==1 && echo -e $[0x0F]Unallocated Space Entry%NULL% ! if %fileTp%==2 && echo -e $[0x0F]Partition Integrity Entry%NULL% ! if %fileTp%==3 && echo -e $[0x0F]Indirect Entry%NULL% ! if %fileTp%==6 && echo -e $[0x0F]Block special device file%NULL% ! if %fileTp%==7 && echo -e $[0x0F]Character special device file%NULL% ! if %fileTp%==8 && echo -e $[0x0F]Extended Attributes%NULL% ! if %fileTp%==9 && echo -e $[0x0F]FIFO file%NULL% ! if %fileTp%==10 && echo -e $[0x0F]C_ISSOCK file%NULL% ! if %fileTp%==11 && echo -e $[0x0F]Terminal Entry%NULL% ! if %fileTp%==12 && echo -e $[0x0F]Symbolic link pathname%NULL% ! if %fileTp%==13 && echo -e $[0x0F]Stream Directory%NULL%
if %fileTp%==248 && echo -e $[0x0F]Virtual Allocation Table%NULL% ! if %fileTp%==249 && echo -e $[0x0F]Real Time File%NULL% ! if %fileTp%==250 && echo -e $[0x0F]Metadata File%NULL% ! if %fileTp%==251 && echo -e $[0x0F]Metadata Mirror File%NULL% ! if %fileTp%==252 && echo -e $[0x0F]Metadata Bitmap File%NULL%
if not %fileTp%<=13 && if not %fileTp%>=248 && echo%NULL% ! if not %fileTp%<=252 && echo%NULL%
set /A address=%address%+1 &; if not exist NULL &; call :read8 %address% %target% &; set /A parICBlc=%result%&0xffffffffffffff && set result= &; if %parICBlc%==0 && set parICBlc=EMPTY ! set /A LBNloc=%parICBlc%&0xffffffff && set /A PTrefnum=%parICBlc%&0xff00000000>>32 &; echo -n -e $[0x08]    00C$[] Parent ICB Location%NULL% &; if "%parICBlc%"=="EMPTY" && echo -e \t\t%parICBlc%%%NULL% ! echo%NULL%
if not "%parICBlc%"=="EMPTY" && if not exist NULL && set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]        000$[] Logical Block Number\t%show:~0,12% %len%%%NULL% && echo -e $[0x08]        004$[] Partition Reference Number  %PTrefnum%%%NULL% && set show= && set len= && set LBNloc= && set parICBlc= && set PTrefnum=
set /A address=%address%+6 &; call :read %address% %target% &; set /A flags=%result%&0xffff && set result= &; set "show=%flags%            " &; echo -n -e $[0x08]    012$[] Flags\t\t\t\t%show:~0,12% %NULL% && set show=
setlocal &; set "space=\x20\x20\x20\x20" && set /a bit0=%flags%>>0&1 && set /a bit1=%flags%>>1&1 &; if %bit0%==0 && echo -e Short Allocation Descrptor%NULL% && set allocdTp=0 ! if %bit0%==1 && if %bit1%==0 && echo -e Long Allocation Descriptor%NULL% && set allocdTp=1 ! if %bit0%==1 && if %bit1%==1 && echo -e Extent in File Entry%NULL% && set allocdTp=3 &; endlocal && set allocdTp=%allocdTp%
if not %flags%<=3 &; setlocal && set * && set flags=%flags% && set "space=\x20\x20\x20\x20" && set "NULL=%NULL%" &; if %DIR%==Y && set BIT3=Sorted ! set BIT3= &; call :getudfbits "%flags%" "" "" "" "%BIT3%" "Non-relocate" "Archive" "Setuid" "Setguid" "Sticky" "Contiguous" "" "Transformed" "Multi-versio" "Stream" "" "" &; endlocal && set bit5=%bit5% && set bit9=%bit9% && set bit13=%bit13%
if %bit0%==0 && set ADtype=SHORT ! if %bit0%==1 && set ADtype=LONG ! if %bit1%==1 && set ADtype=EXTENDED ! if %bit5%==1 && set ARCHIVE=Y ! if %bit9%==1 && set CONTIGU=Y ! if %bit13%==1 && set STREAM=Y
set bit5= && set bit9= && set bit13= && set flags= && set DIR= && set /A address=%voladdr%+36 &; if not exist NULL &; call :read %address% %target% &; set /A Uid=%result%&0xffffffff && set result= &; set /a len=%Uid% &; set "show=%Uid%            " &; if %Uid%==0xFFFFFFFF && set len=N/A ! set len=%len% &; echo -e $[0x08]024$[] Uid\t\t\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len= && set Uid=
set /A address=%voladdr%+40 &; if not exist NULL &; call :read %address% %target% &; set /A Gid=%result%&0xffffffff && set result= &; set /a len=%Gid% &; set "show=%Gid%            " &; if %Gid%==0xFFFFFFFF && set len=N/A ! set len=%len% &; echo -e $[0x08]028$[] Gid\t\t\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len= && set Gid=
set /A address=%voladdr%+44 &; if not exist NULL &; call :read %address% %target% &; set /A permisio=%result%&0xffffffff && set result= &; echo -e $[0x08]02C$[] Permissions\t\t\t\t%permisio%%%NULL%
if not %permisio%==0 &; setlocal && set * && set permisio=%permisio% && set "NULL=%NULL%" &; call :getudfbits "%permisio%" "OTHER_Execute" "OTHER_Write" "OTHER_Read" "OTHER_ChAttribute" "OTHER_Delete" "GROUP_Execute" "GROUP_Write" "GROUP_Read" "GROUP_ChAttribute" "GROUP_Delete" "OWNER_Execute" "OWNER_Write" "OWNER_Read" "OWNER_ChAttribute" "OWNER_Delete" "" &; endlocal && set permisio=
set /A address=%voladdr%+48 &; if not exist NULL &; call :read %address% %target% &; set /A flnkcnt=%result%&0xffff && set result= &; set /a len=%flnkcnt% &; set "show=%flnkcnt%            " &; echo -e $[0x08]030$[] File Link Count\t\t\t%show:~0,12% %len%%%NULL% && set len= && set flnkcnt= && set show=
set /A address=%voladdr%+50 &; if not exist NULL &; call :read %address% %target% &; set /A recform=%result%&0xff && set result= &; echo -e $[0x08]032$[] Recorded Format\t\t\t%recform%%%NULL% && set len= && set recform=
set /A address=%voladdr%+51 &; if not exist NULL &; call :read %address% %target% &; set /A recdattr=%result%&0xff && set result= &; echo -e $[0x08]033$[] Recorded Display Attributes\t\t%recdattr%%%NULL% && set len= && set recdattr=
set /A address=%voladdr%+52 &; call :read %address% %target% &; set /A reclen=%result%&0xffffffff && set result= &; set /a len=%reclen% &; set "show=%reclen%            " &; echo -e $[0x08]034$[] Record Length\t\t\t%show:~0,12% %len%%%NULL% && set len= && set show= && set reclen=
set /A address=%voladdr%+56 &; call :read8 %address% %target% &; set /A inflen=%result%&0xffffffffffffffff && set result= &; set /a len=%inflen% &; set "show=%inflen%            " &; echo -e $[0x08]038$[] Information Length\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %tagID%==266 && set /A address=%voladdr%+64 &; if not exist NULL &; call :read8 %address% %target% &; set /A objsize=%result%&0xffffffffffffffff && set result= &; set /a len=%objsize% &; set "show=%objsize%            " &; echo -e $[0x08]040$[] Object Size\t\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len= && set objsize=
if %tagID%==261 && set /A address=%voladdr%+64 ! set /A address=%voladdr%+72 &; call :read8 %address% %target% &; set /A logblckr=%result%&0xffffffffffffffff && set result= &; set "show=%logblckr%            " &; set /a len=%logblckr% &; if %tagID%==261 && echo -e $[0x08]040$[] Logical Block Recorded\t\t%show:~0,12% %len%%%NULL% ! echo -e $[0x08]048$[] Logical Block Recorded\t\t%show:~0,12% %len%%%NULL% &; set len= && set show=
if %tagID%==261 && set /A address=%voladdr%+72 ! set /A address=%voladdr%+80 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; if %tagID%==261 && echo -e $[0x08]048$[] Access Date and Time\t\t%Rdatime%%%NULL% ! echo -e $[0x08]050$[] Access Date and Time\t\t%Rdatime%%%NULL% &; set len= && set Rdatime= && set datetime=
if %tagID%==261 && set /A address=%voladdr%+84 ! set /A address=%voladdr%+92 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; if %tagID%==261 && echo -e $[0x08]054$[] Modification Date and Time\t\t%Rdatime%%%NULL% ! echo -e $[0x08]05C$[] Modification Date and Time\t\t%Rdatime%%%NULL% &; set len= && set Rdatime= && set datetime=
if %tagID%==261 && set /A address=%voladdr%+96 ! set /A address=%voladdr%+104 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; if %tagID%==261 && echo -e $[0x08]060$[] Attribute Date and Time\t\t%Rdatime%%%NULL% ! echo -e $[0x08]068$[] Creation Date and Time\t\t%Rdatime%%%NULL% &; set len= && set Rdatime= && set datetime=
if %tagID%==266 && set /A address=%voladdr%+116 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]074$[] Attribute Date and Time\t\t%Rdatime%%%NULL% && set len= && set Rdatime= && set datetime=
if %tagID%==261 && set /A address=%voladdr%+108 ! set /A address=%voladdr%+128 &; if not exist NULL &; call :read %address% %target% &; set /A chkpoint=%result%&0xffffffff && set result= &; if %tagID%==261 && echo -e $[0x08]06C$[] Checkpoint\t\t\t\t%chkpoint%%%NULL% ! echo -e $[0x08]080$[] Checkpoint\t\t\t\t%chkpoint%%%NULL% &; set len= && set chkpoint=
if %tagID%==261 && set /A address=%voladdr%+112 ! set /A address=%voladdr%+136 &; if not exist NULL &; call :read8 %address% %target% &; set /A ICBexatr=%result%&0xffffffffffffffff && set result= &; if %ICBexatr%==0 && set ICBexatr=EMPTY
if not exist NULL &; if %tagID%==261 && echo -n -e $[0x08]070$[] Extended Attribute ICB%NULL% ! echo -n -e $[0x08]088$[] Extended Attribute ICB%NULL% &; if "%ICBexatr%"=="EMPTY" && echo -e \t\t%ICBexatr%%%NULL% ! echo%NULL% && set len=
if not "%ICBexatr%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A xattrlen=%result%&0xffffffff && set result= &; set /a len=%xattrlen% &; set "show=%xattrlen%            " &; echo -e $[0x08]    000$[] Extended Attribute Length\t%show:~0,12% %len%%%NULL% && set len= && set xattrlen= && set show=
if not "%ICBexatr%"=="EMPTY" && set /A address=%address%+4 &; if not exist NULL &; call :read8 %address% %target% &; set /A xattrloc=%result%&0xffffffffffff && set result= &; set /a len=%xattrloc% &; set "show=%xattrloc%            " &; echo -e $[0x08]    004$[] Extended Attribute Location\t%show:~0,12% %len%%%NULL% && set len= && set xattrloc= && set show=
if not "%ICBexatr%"=="EMPTY" && set /A address=%address%+6 &; if not exist NULL &; call :read8 %address% %target% &; set /A xattrIus=%result%&0xffffffffffff && set result= &; echo -e $[0x08]    0A0$[] Extended Attribute Implem Use\t%xattrIus%%%NULL% && set len= && set xattrIus=
set permisio= && set ICBexatr= &; if %tagID%==266 && set /A address=%voladdr%+152 &; raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; set /a zeros=%@retval% ;; if %tagID%==266 &; if %zeros%==16 && set strmDIR=EMPTY && set zeros= ! set zeros=
if %tagID%==266 && echo -n -e $[0x08]098$[] Stream Directory ICB%NULL% &; if %strmDIR%==EMPTY && echo -e \t\tEMPTY%NULL% ! echo%NULL%
if %tagID%==266 && if not %strmDIR%==EMPTY && call :read %address% %target% &; set /A strdrlen=%result%&0xffffffff && set result= &; set /a len=%strdrlen% &; set "show=%stdrlen%            " &; echo -e $[0x08]    000$[] Stream Directory Length\t\y%show:~0,12% %len%%%NULL% && set len= && set show=
if %tagID%==266 && if not %strmDIR%==EMPTY && set /A address=%address%+4 &; if not exist NULL &; call :read8 %address% %target% &; set /A strdrloc=%result%&0xffffffffffff && set result= &; set /a len=%strdrloc% &; set "show=%stdrloc%            " &; echo -e $[0x08]    004$[] Stream Directory Location\t%show:~0,12% %len%%%NULL% && set len= && set show=
if %tagID%==266 &; if not %strmDIR%==EMPTY && set /A address=%address%+6 &; if not exist NULL &; call :read8 %address% %target% &; set /A strdrIus=%result%&0xffffffffffff && set result= &; echo -e $[0x08]    0A0$[] Stream Directory Implement Use\t%strdrIus%%%NULL% && set len= && set strdrIus= && set strmDIR=
if %tagID%==261 && set /A address=%voladdr%+128 ! set /A address=%voladdr%+168 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=21 && call :getlfnloop ! call :getentityID "%address%" "22" &; set "implemID=%result%" && set result= &; if not exist implemID && set implemID=EMPTY ! set "implemID=%implemID%" &; if %tagID%==261 && echo -n -e $[0x08]080$[] Implementation Identifier%NULL% ! echo -n -e $[0x08]0A8$[] Implementation Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%charID%%%NULL% && echo -e $[0x08]    001$[] Identifier\t\t\t%implemID%%%NULL%
set /A address=%address%+24 &; if not "%implemID%"=="EMPTY" && if not exist NULL &; setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffff0000>>16 &; call :OStypes &; if %IIbytes%==0 && set IIbytes=EMPTY ! set IIbytes=%IIbytes% &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal && set flags= && set implemID= ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set flags= && set implemID=
if %tagID%==261 && set /A address=%voladdr%+160 ! set /A address=%voladdr%+200 &; call :read8 %address% %target% &; set /A uniqID=%result%&0xffffffffffffffff && set result= &; if %tagID%==261 && echo -n -e $[0x08]0A0$[] Unique ID\t\t\t\t%uniqID%%%NULL% ! echo -n -e $[0x08]0C8$[] Unique ID\t\t\t\t%uniqID%%%NULL% &; if %uniqID%==0 && if %fileTp%==4 && echo -e $[0x0F]\t     Root Directory%NULL% && set DIR=Y ! echo%NULL%
if %tagID%==261 && set /A address=%voladdr%+168 ! set /A address=%voladdr%+208 &; call :read %address% %target% &; set /A L_EA=%result%&0xffffffff && set result= &; set LEN_EA=%L_EA% && set /a len=%L_EA% &; set "show=%L_EA%            " &; if %tagID%==261 && echo -e $[0x08]0A8$[] Length of Extended Attribute(s)\t%show:~0,12% %len%%%NULL% ! echo -e $[0x08]0D0$[] Length of Extended Attribute(s)\t%show:~0,12% %len%%%NULL% &; set len= && set show=
if %tagID%==261 && set /A address=%voladdr%+172 ! set /A address=%voladdr%+212 &; call :read %address% %target% &; set /A L_AD=%result%&0xffffffff && set result= &; set LEN_AD=%L_AD% && set /a len=%L_AD% &; set "show=%L_AD%            " &; if %tagID%==261 && echo -e $[0x08]0AC$[] Length of Allocation Descriptor(s)\t%show:~0,12% %len%%%NULL% ! echo -e $[0x08]0D4$[] Length of Allocation Descriptor(s)\t%show:~0,12% %len%%%NULL% &; set len= && set show=
if not exist NULL &; if %L_EA%>=1 &; if %tagID%==261 && echo -e $[0x08]0B0$[] Extended Attributes%NULL% ! echo -e $[0x08]0D8$[] Extended Attributes%NULL%
if %tagID%==261 && set /A address=%voladdr%+176 && set /A num=176 ! set /A address=%voladdr%+216 && set /A num=216 &; if %L_EA%>=1 && if not exist NULL &; call :extendedattributeheaderDS
if not %fileTp%==0 if not %fileTp%==248 |; if %allocdTp%==3 && if %UDFrev%>=0x150 &; if %tagID%==261 && set /A address=%voladdr%+176+%L_EA% ! set /A address=%voladdr%+216+%L_EA% &; set /A num=%num%+%L_EA%
if %hexview%==Y &; if not %fileTp%==0 if not %fileTp%==248 |; if %allocdTp%==3 && if %UDFrev%>=0x150 &; if %tagID%==261 && set /A hexaddr=%voladdr% && set /A hexlen=176+%LEN_EA% ! set /A hexaddr=%voladdr% && set /A hexlen=216+%LEN_EA% &; raw cat --hex --skip=%hexaddr% --length=%hexlen% %target%%%NULL%
if not %fileTp%==0 if not %fileTp%==248 |; if %allocdTp%==3 && if %UDFrev%>=0x150 && set /a TGTsec=%LBsize%/0x200 && set /A mdbase2=%LBsize%/0x200+%mdbase% &; echo -n > (md)%mdbase2%+%TGTsec% && set /A CDskip=176+%L_EA% &; raw dd if=%target% of=(md)%mdbase2%+%TGTsec% bs=1 count=%inflen% skip=%CDskip% seek=%CDskip% > nul && endlocal && set VATaddr=%CDskip% && set VATsize=%inflen% && set fileTp=%fileTp% && set mdtarget=(md)%mdbase2%+%TGTsec% && set /A mdbase=%mdbase2%+%TGTsec%+0x1F && set allocdTp=%allocdTp% && set CDskip=%CDskip% && set "found=%found%" && goto :eof ! endlocal && set result=0 && goto :eof
if %allocdTp%==0 && if not %L_AD%<=8 && set /a numAD=%L_AD%/8 && set n=1 ! if %allocdTp%==1 && if not %L_AD%<=16 && set /a numAD=%L_AD%/16 && set n=1 ! if exist COPY && if %allocdTp%>=0 && if %allocdTp%<=3 && set numAD=1
if exist COPY &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; echo -n > (md)0x300+2 && set /a g4dver=*0x8278&0xffffffff &; if exist @uefi && displaymem -s > (md)0x300+2 ! if %g4dver%>=20170830 && displaymem --s > (md)0x300+2 ! displaymem > (md)0x300+2 &; raw cat --locate=\x0A (md)0x300+2 > nul &; set /A SEARCH=%?%+1 &; setlocal && set * && set SEARCH=%SEARCH% && set /A MDB=8m/512+%mdbase%+32 && set /A ns=%LBsize% / 512 * %logblckr% && set g4dver=%g4dver% &; if %ns%<=7 && set ns=8 ! set ns=%ns% &; if %SEARCH%>=58 && set mdbase=0 && set freesect=0 && set skip=0 && call :freemem ! set SEARCH=%SEARCH% &; set /A fs=%freesect%-%MDB% &; if %SEARCH%>=58 && if not %fs%>=%ns% && echo Not enough free memory: needed sectors %ns%, available %fs%%%NULL% && set result=0 ! if %SEARCH%>=58 && if %MDB%>=%mdbase% && set mdbase5=%MDB% ! if %SEARCH%>=58 && if exist MDB && if not %MDB%>=%mdbase% && echo Needed Base '%MDB%' is not in free memory-region %mdbase%+%fs%%%NULL% && set result=0 ! if exist @uefi && echo Internal function 'displaymem -s' can not be parsed, no free memory region found%NULL% && set result=0 ! if %g4dver%>=20170830 && echo Internal function 'displaymem --s' can not be parsed, no free memory region found%NULL% && set result=0 ! echo Internal function 'displaymem' can not be parsed, no free memory region found%NULL% && set result=0 &; if %result%==0 && endlocal && set result=0 && set COPY= ! endlocal && set mdbase5=%mdbase5% && set MDBASE=%MDB% && set ns=%ns% && set fs=%fs%
if exist COPY && if exist mdbase5 &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; set /a g4dver=*0x8278&0xffffffff &; if not %COPY%==0x7F && set filesect=%ns% ! set /A rdbase=%MDBASE% + %fs% - %ns% * 0x200 &; if %COPY:~0,2%==MD && set mapdev=(%COPY:~2%) ! set mapdev=(%COPY%) &; if not %mapdev:~1,-1%==0x7F && if exist @uefi && if %g4dver%>=20240323 && set "map=map --alloc-only (md)0+%filesect% %mapdev%" ! if not %mapdev:~1,-1%==0x7F && if %g4dver%>=20240323 && if not exist @uefi && set "map=map (md)0+%filesect% %mapdev%" ! if not %mapdev:~1,-1%==0x7F && set "map=map (md)0+%filesect% %mapdev%" ! set "map=map --rd-base=%rdbase% && map --rd-size=%inflen%" &; %map% > nul && set mapped=Y ! set COPY= &; if not exist @uefi && if not %mapdev:~1,-1%==0x7F && map --hook ! set mapped=%mapped% &; if %mapped%==Y && if not %mapdev:~1,-1%==0x7F && map --status=%mapdev:~1,-1% ! set mapped=%mapped% &; if not %mapdev:~1,-1%==0x7F && set /A mdbase5=%?%&0xffffffff ! set /A mdbase5=%rdbase%/0x200 &; if %mdbase5%>=%MDBASE% && set MDBASE= ! set COPY= && set MDBASE= && map --unmap=%mapdev:~1,-1% &; set g4dver= && set mapdev= && set map= && set mapped= && set ns= && set fs= && if exist COPY &; set CDseek=0 && set TGTsec=0 && set search=0 &; if not exist MPTofset && set MPTofset=0 ! set MPTofset=%MPTofset% &; set /A membase=%mdbase5% * 0x200 &; call Fn.24 %membase% 0x00 %inflen% && set membase= ! set membase= &; if not exist @uefi && set /A membase=%mdbase% + 0x10 * 0x200
if exist numAD &; if not %fileTp%==4 |; set /A mdbase4=%LBsize%/0x200+%mdbase% && set CDseek=0 && set TGTsec=0 && set search=0 && set n=1 &; echo -n > (md)%mdbase4%+511 && if not exist MPTofset && set MPTofset=0
if exist numAD && if not exist VAtarget &; if %fileTp%==0 && if not %UDFrev%==0x150 && set fileTp= ! set fileTp=%fileTp% &; if not %fileTp%==0 if not %fileTp%==248 |; set /A mdbase0=%LBsize%/0x200+%mdbase% && set /A membase=%mdbase% * %LBsize% + %LBsize% && set CDseek=0 && set TGTsec=0 && set search=0 && set n=1 &; if not exist MPTofset && set MPTofset=0 ! set MPTofset=%MPTofset% &; call Fn.24 %membase% 0x00 %inflen% && set membase= ! set membase=
if exist numAD && if not exist MAtarget &; if not %fileTp%==250 if not %fileTp%==251 |; echo -n > (md)0x300+2 && set /a g4dver=*0x8278&0xffffffff &; if exist @uefi && displaymem -s > (md)0x300+2 ! if %g4dver%>=20170830 && displaymem --s > (md)0x300+2 ! displaymem > (md)0x300+2 &; raw cat --locate=\x0A (md)0x300+2 > nul &; set /A SEARCH=%?%+1 &; setlocal && set * && set SEARCH=%SEARCH% && set /A MDB=%LBsize%/512+%mdbase% && set /A ns=%LBsize% / 512 * %logblckr% && set g4dver=%g4dver% &; if %ns%<=7 && set ns=8 ! set ns=%ns% &; if %SEARCH%>=58 && set mdbase=0 && set freesect=0 && set skip=0 && call :freemem ! set SEARCH=%SEARCH% &; set /A fs=%freesect%-%MDB% &; if %SEARCH%>=58 && if not %fs%>=%ns% && echo Not enough free memory: needed sectors %ns%, available %fs%%%NULL% && set result=0 ! if %SEARCH%>=58 && if %MDB%>=%mdbase% && set MDBASE2=%MDB% ! if %SEARCH%>=58 && if exist MDB && if not %MDB%>=%mdbase% && echo Needed Base '%MDB%' is not in free memory-region %mdbase%+%fs%%%NULL% && set result=0 ! if exist @uefi && echo Internal function 'displaymem -s' can not be parsed, no memory region found%NULL% && set result=0 ! if %g4dver%>=20170830 && echo Internal function 'displaymem --s' can not be parsed, no free memory region found%NULL% && set result=0 ! echo Internal function 'displaymem' can not be parsed, no free memory region found%NULL% && set result=0 &; if %result%==0 && endlocal && set result=0 && set fileTp= ! endlocal && set MDBASE2=%MDBASE2% && set SEARCH=
if exist numAD && if not exist MAtarget && if exist MDBASE2 &; if not %fileTp%==250 if not %fileTp%==251 |; set TGTsec=0 && set search=0 && set MAskip=0 && set /A mdbase2=%MDBASE2% && set MDBASE2= &; set /A membase=%mdbase2% * 0x200 && set CDseek= && set n=1 && set LBNsdone=0 &; if not exist MPTofset && set MPTofset=0 ! set MPTofset=%MPTofset% &; set /A memlen=%inflen% / %LBsize% * 4 &; call Fn.24 %membase% 0x00 %memlen% && set membase= && set memlen= ! set membase= && set memlen=
if %tagID%==261 && set /A address=%voladdr%+176+%L_EA% ! set /A address=%voladdr%+216+%L_EA% &; set /A num=%num%+%L_EA% &; if %allocdTp%==3 &; if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]%HEX:~-3,3%$[] Start of Extent in File Entry%NULL% && set HEX=
if exist numAD && if %SPARETBL%==Y && if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist LBNloc &; if exist MPTofset && set /A LBNloc=%LBNloc%+%MPTofset% ! set LBNloc=%LBNloc% &; call :sparingtable "LBNloc" "%LBNloc%" &; if exist LBNloc && if exist MPTofset && set /A LBNloc=%LBNloc%-%MPTofset% ! set LBNloc=%LBNloc% &; if not exist LBNloc && echo Physical Block Address for '%LBNloc%' for File Identifier Descriptor/ File not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
:allocationdescriptorloopFE
if not %allocdTp%==3 &; if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]%HEX:~-3,3%$[] Allocation Descriptor %n%%%NULL% && set HEX=
if %allocdTp%==0 &; call :read %address% %target% &; set /A LBNlen=%result%&0x3fffffff && set /A extentTp=%result%&0xffffffff>>30 && set result= &; if %LBNlen%==0 && set extentTp=0 ! set extentTp=%extentTp% &; set /a len=%LBNlen% &; set "show=%LBNlen%            " && set "show2=%len%            " &; echo -n -e $[0x08]    000$[] Directory Record Length\t\t%show:~0,12% %show2:~0,12%%%NULL% && set len= && set show= && set show2= &; if %extentTp%==0 && echo -e +Alloc +Record%NULL% ! if %extentTp%==1 && echo -e $[0x0F]+Alloc -Record%NULL% ! if %extentTp%==2 && echo -e $[0x0F]-Alloc -Record%NULL% ! if %extentTp%==3 && echo -e $[0x0F]Alloc Next Ext%NULL% ! echo%NULL% &; if not exist LBNlen0 && set LBNlen0=%LBNlen%
if %allocdTp%==0 &; set /A L_AD=%L_AD%-8 && set /A address=%address%+4 &; call :read %address% %target% &; set /A LBNloc=%result%&0xffffffff && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Directory Record Location\t%show:~0,12% %len%%%NULL% && set len= && set show= && set LBNofset= && if exist numAD && if not exist LBNloc0 && set LBNloc0=%LBNloc%
if %allocdTp%==1 &; call :read %address% %target% &; set /A LBNlen=%result%&0x3fffffff && set /A extentTp=%result%&0xffffffff>>30 && set result= &; set "show=%LBnlen%            " &; if %LBNlen%==0 && set extentTp=0 ! set extentTp=%extentTp% &; set /a len=%LBNlen% &; set "show=%LBNlen%            " && set "show2=%len%            " &; echo -n -e $[0x08]    000$[] Directory Record Length\t\t%show:~0,12% %show2:~0,12%%%NULL% && set len= && set show= && set show2= &; if %extentTp%==0 && echo -e +Alloc +Record%NULL% ! if %extentTp%==1 && echo -e $[0x0F]+Alloc -Record%NULL% ! if %extentTp%==2 && echo -e $[0x0F]-Alloc -Record%NULL% ! if %extentTp%==3 && echo -e $[0x0F]Alloc Next Ext%NULL% ! echo%NULL% &; if not exist LBNlen0 && set LBNlen0=%LBNlen%
if %allocdTp%==1 &; set /A address=%address%+4 &; call :read8 %address% %target% &; set /A LBNloc=%result%&0xffffffff && set /A PTrefnum=%result%&0xffff00000000>>32 && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Directory Record Location\t%show:~0,12% %len%%%NULL% && set show= && set LBNofset= && set len= && echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL% && if exist numAD && if not exist LBNloc0 && set LBNloc0=%LBNloc%
if %allocdTp%==1 &; set /A L_AD=%L_AD%-16 && set /A address=%address%+6 &; call :read8 %address% %target% &; set /A implmuse=%result%&0xffffffffffff && set result= &; if %implmuse%==0 && set implmuse=EMPTY ! set implmuse=%implmuse% &; echo -e $[0x08]    00A$[] Implementation Use\t\t%implmuse%%%NULL%
if %allocdTp%==1 &; if not %implmuse%==EMPTY && set /A flags=%implmuse%&0xffff && set /A UDFuniqI=%implmuse%&0x0000ffffffff && set implmuse= &; if not exist NULL &; if %flags%==1 && set flagmsg=EXTENTErased ! set flagmsg= &; echo -e $[0x08]        000$[] Flags\t\t\t%flags%\t %flagmsg%%%NULL% && set flagmsg= && echo -e $[0x08]        002$[] UDF Unique ID\t\t%UDFuniqI%%%NULL%
if exist numAD && if %extentTp%==3 && if %hexview%==Y &; if %tagID%==261 && set /A hexaddr=%voladdr% && set /A hexlen=176+%LEN_EA%+%LEN_AD% ! set /A hexaddr=%voladdr% && set /A hexlen=216+%LEN_EA%+%LEN_AD% &; raw cat --hex --skip=%hexaddr% --length=%hexlen% %target%%%NULL%
if exist numAD && if %extentTp%==3 && if exist MAtarget &; if not %fileTp%==4 |; set /A Maddress=%LBNloc% * 4 &; call :read %Maddress% %MAtarget% &; set /A MPTofset=%result%&0xffffffff && set result= && set Maddress=
if exist numAD && if %extentTp%==3 &; setlocal && set "target=%CDtarget%" && set /A volsec=%LBNloc%+%PTstart%+%MPTofset% && call :allocationextentdescriptor &; set /a TGTsec=%LBsize%/0x200 &; set target=(md)%mdbase%+%TGTsec% &; if %result%>=8 && if %allocdTp%==0 && endlocal && set target=%target% && set /a L_AD=%result% && set /a numAD=%result%/8+%numAD% && set /A num=24 && set /a n=%n%+1 && set /A address=24 && goto :allocationdescriptorloopFE ! if %result%>=16 && if %allocdTp%==1 && endlocal && set target=%target% && set /a L_AD=%result% && set /a numAD=%result%/16+%numAD% && set /A num=24 && set /a n=%n%+1 && set /A address=24 && goto :allocationdescriptorloopFE ! endlocal && set numAD=0 && set L_AD=0 && if exist LBNloc0 && if exist search && set LBNlen=%search% && set LBNloc=%LBNloc0% && set /A volsec=%LBNloc0%+%PTstart% && set search= && set LBNloc0= && if %fileTp%==4 && set /A volsec=%LBNloc0%+%PTstart%+%MPTofset%
if %numAD%>=1 && if not exist VAtarget &; if not %fileTp%==0 if not %fileTp%==248 |; set /a TGTsec=%LBNlen%/0x200+%TGTsec% &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; set /A CDskip=%LBNloc% + %PTstart% * %LBsize% &; raw dd if=%CDtarget% of=(md)%mdbase0%+%TGTsec% bs=1 count=%LBNlen% skip=%CDskip% seek=%CDseek% > nul && set /A CDseek=%CDseek%+%LBNlen% && set /A search=%search%+%LBNlen%
if %numAD%>=1 && if exist MAtarget &; if not %fileTp%==4 |; set /A Maddress=%LBNloc% * 4 &; call :read %Maddress% %MAtarget% &; set /A MPTofset=%result%&0xffffffff && set result= && set Maddress=
if %numAD%>=1 && if %SPARETBL%==Y && if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist LBNloc &; if exist MPTofset && set /A LBNloc=%LBNloc%+%MPTofset% ! set LBNloc=%LBNloc% &; call :sparingtable "LBNloc" "%LBNloc%" &; if exist LBNloc && if exist MPTofset && set /A LBNloc=%LBNloc%-%MPTofset% ! set LBNloc=%LBNloc% &; if not exist LBNloc && echo Physical Block Address for '%LBNloc%' for File Identifier Descriptor/ File not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if %numAD%>=1 && if %fileTp%==4 &; set /a TGTsec=%LBNlen%/0x200+%TGTsec% &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; set /A CDskip=%LBNloc% + %PTstart% + %MPTofset% * %LBsize% &; raw dd if=%CDtarget% of=(md)%mdbase4%+%TGTsec% bs=1 count=%LBNlen% skip=%CDskip% seek=%CDseek% > nul && set /A CDseek=%CDseek%+%LBNlen% && set /A search=%search%+%LBNlen%
if %numAD%>=1 && if exist udffile && if %LBNlen%>=1 &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; if exist CDtarget && call Fn.11 "%CDtarget%" "/" ! call Fn.11 "%target%" "/" |; set /A LSNloc=%PTstart%+%LBNloc% && set /A LBNblock=%LBNlen%/%LBsize% &; calc %LBNlen% % %LBsize% && set /A LBNblock=%LBNblock%+1 ! set LBNblock=%LBNblock% &; if not exist block && set block=%LSNloc%+%LBNblock% ! set block=%block%,%LSNloc%+%LBNblock% &; set LSNloc= && set LBNblock=
if %numAD%>=1 && if exist udffile && if %LBNlen%>=1 &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; if exist CDtarget && call Fn.11 "%CDtarget%" "/" ! call Fn.11 "%target%" "/" |; set /A LSNloc=%PTstart%+%LBNloc% && set /A LBNblock=%LBNlen%/%LBsize% &; calc %LBNlen% % %LBsize% && set /A LBNblock=%LBNblock%+1 ! set LBNblock=%LBNblock% &; if not exist block && set block=%LSNloc%+%LBNblock% ! set block=%block%,%LSNloc%+%LBNblock% &; set LSNloc= && set LBNblock=
if %numAD%>=1 && if exist udffile && if exist @uefi &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; if exist COPY &; if %allocdTp%=3 && set LBNlen=%inflen% ! set LBNlen=%LBNlen% &; if %LBNlen%>=1 &; set /a TGTsec=%LBNlen%/0x200+%TGTsec% &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; if %allocdTp%==3 && set /A CDskip=%volsec% * %LBsize% + %address% ! set /A CDskip=%LBNloc% + %PTstart% * %LBsize% &; raw dd if=%CDtarget% of=(md)%mdbase5%+%TGTsec% bs=1 count=%LBNlen% skip=%CDskip% seek=%CDseek% > nul && set /A CDseek=%CDseek%+%LBNlen% && set /A search=%search%+%LBNlen% ! echo $[0xF0]Abort: Bad dd-copy, disk (0x%COPY:~2%) will not be used anymore && set numAD= && if %COPY:~2%==MD && map --unmap=%COPY:~2% && set COPY=ER%COPY~2% ! map --unmap=%COPY% && set COPY=ER%COPY~2%
if %numAD%>=1 && if exist udffile && if not exist @uefi &; if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 |; if exist COPY &; if %allocdTp%==3 && set LBNlen=%inflen% ! set LBNlen=%LBNlen% &; if %LBNlen%>=1 &; set /a TGTsec=%LBNlen%/0x200+%TGTsec% &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; if %allocdTp%==3 && set /A CDskip=%volsec% * %LBsize% + %address% ! set /A CDskip=%LBNloc% + %PTstart% * %LBsize% &; raw dd if=%CDtarget% of=(md)%mdbase5%+%TGTsec% bs=1 count=%LBNlen% skip=%CDskip% seek=%CDseek% > nul && set /A CDseek=%CDseek%+%LBNlen% && set /A search=%search%+%LBNlen% ! echo $[0xF0]Abort: Bad dd-copy, disk (0x%COPY:~2%) will not be used anymore &&  && set numAD= && if %COPY:~2%==MD && map --unmap=%COPY:~2% && map --rehook && set COPY=ER%COPY~2% ! map --unmap=%COPY% && map --rehook && set COPY=ER%COPY~2%
if %numAD%>=1 && if not exist MAtarget &; if not %fileTp%==250 if not %fileTp%==251 |; set /a TGTsec=%LBNlen% / %LBsize% * 4 / 0x200 + %TGTsec% && set /A MAlength=%LBNlen% / %LBsize% * 4 &; calc %LBNlen% / %LBsize% * 4 % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /A LBNloc=%LBNloc%-%LBNsdone% &; set wrLBNloc=00000000%LBNloc:~2% &; set wrLBNloc=\x%wrLBNloc:~-2,2%\x%wrLBNloc:~-4,2%\x%wrLBNloc:~-6,2%\x%wrLBNloc:~-8,2% &; raw cat --skip=%MAskip% --locate=\x00\x00\x00\x00 --replace=%wrLBNloc% --length=%MAlength% (md)%mdbase2%+%TGTsec% > nul &; set /A MAskip=%MAskip%+%MAlength% && set /A search=%search%+%MAlength% && set /A LBNsdone=%LBNlen%/%LBsize%+%LBNsdone% && set MAlength= && set wrLBNloc=
if %numAD%>=1 &; if %allocdTp%==0 && if %L_AD%>=8 && set /A address=%address%+4 && set /A num=%num%+8 && set /a n=%n%+1 && goto :allocationdescriptorloopFE ! if %allocdTp%==1 && if %L_AD%>=16 && set /A address=%address%+6 && set /A num=%num%+16 && set /a n=%n%+1 && goto :allocationdescriptorloopFE
if exist numAD && if %TGTsec%>=1 &; if exist mdbase0 && set mdtarget=(md)%mdbase0%+%TGTsec% && set /A mdbase=%mdbase0%+%TGTsec%+0x1F && set search=%inflen% && set CDtarget= && set TGTsec= && set CDskip= && set CDseek= && set n= ! if exist mdbase4 && set mdtarget=(md)%mdbase4%+%TGTsec% && set CDtarget= && set TGTsec= && set CDskip= && set CDseek= && set n= && set mdbase4= ! if exist mdbase5 && set mdtarget=(md)%mdbase5%+%TGTsec% && set CDtarget= && set TGTsec= && set CDskip= && set CDseek= && set n= && set mdbase5= ! if not exist MAskip && if not %fileTp%==0 && if not %fileTp%==248 && if not %fileTp%==250 && if not %fileTp%==251 && set mdtarget=(md)%mdbase%+%TGTsec% && set CDtarget= && set TGTsec= && set CDskip= && set CDseek= && set n= ! if exist MAskip && set MAtarget=(md)%mdbase2%+%TGTsec% && set /A mdbase=%mdbase2%+%TGTsec%+0x1F && set MAskip= && set TGTsec= && set n= && set mdbase2=
if exist udffile &; if exist CDtarget && call Fn.11 "%CDtarget%" "/" ! call Fn.11 "%target%" "/" |; if not exist block &; if %allocdTp%==3 && set /A LSNloc=%volsec% && set /A LBNblock=1 ! set /A LSNloc=%PTstart%+%LBNloc% && set /A LBNblock=%LBNlen%/%LBsize% &; calc %LBNlen% % %LBsize% && if not %allocdTp%==3 && set /A LBNblock=%LBNblock%+1 ! set LBNblock=%LBNblock% &; set block=%LSNloc%+%LBNblock% && set LSNloc= && set LBNblock=
if exist numAD && if exist LBNloc0 && set LBNloc=%LBNloc0% && set /A volsec=%LBNloc0% + %PTstart% &; if exist search && set LBNlen=%search% && set search= && set LBNloc0= ! set LBNloc0= && set LBNlen=%LBNlen0% &; if %fileTp%==4 && set /A volsec=%volsec%+%MPTofset% ! if not %fileTp%==5 if not %fileTp%==12 if not %fileTp%==249 || if not exist mdtarget && set LBNloc=0 && set LBNlen=0 && if exist inflen && set result=1
if exist block &; set "block=%block%" &; if %@retval%<=501 && if %inflen%>=1 && set LBNlen=%inflen% ! if %@retval%<=501 && echo Blocklist is invalid, not available anymore%NULL% && set block= set LBNlen= ! echo Blocklist of '%udffile%' is too long, not available now%NULL% && set block=
if not %allocdTp%==3 |; if %tagID%==261 && set /A address=%voladdr%+176+%L_EA% ! set /A address=%voladdr%+216+%L_EA% &; call :read %address% %target% &; set /A tagid=%result%&0xffff && set result=
if not %tagid%==0x101 if not %allocdTp%==3 |; set LBNlen=%inflen% && set /A LBNloc=%taglocat% &; if %tagID%==261 && set /A LBNofset=176+%L_EA% ! set /A LBNofset=216+%L_EA% &; set taglocat=
if %hexview%==Y &; if %tagID%==261 && set /A hexaddr=%voladdr% && set /A hexlen=176+%LEN_EA%+%LEN_AD% ! set /A hexaddr=%voladdr% && set /A hexlen=216+%LEN_EA%+%LEN_AD% &; raw cat --hex --skip=%hexaddr% --length=%hexlen% %target%%%NULL%
if not %fileTp%==250 |; call Fn.11 "%find%" "EFE " && echo%NULL%
endlocal && set LBNlen=%LBNlen% && set LBNloc=%LBNloc% && set LBNofset=%LBNofset% && set fileTp=%fileTp% && set allocdTp=%allocdTp% && set mdtarget=%mdtarget% && set volsec=%volsec% && set MAtarget=%MAtarget% && set tagID=%tagID% && set mdbase=%mdbase% && set "COPY=%COPY%" && set result=%result% && set "found=%found%" && set block=%block%
if %COPY:~0,2%==ER && set result=0 && set udffile= && goto :eof ! if %LBNloc%==0 && goto :eof
if exist MAtarget &; if not %fileTp%==4 if not %fileTp%==13 |; set /A Maddress=%LBNloc% * 4 &; call :read %Maddress% %MAtarget% &; set /A LBNloc=%result%&0xffffffff+%LBNloc% && set result= && set Maddress=
if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist LBNloc && call :sparingtable "LBNloc" "%LBNloc%" &; if not exist LBNloc && echo Physical Block Address for '%LBNloc%' for File Identifier Descriptor/ File not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if %VIRTUALP%==Y && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if %LBNloc%>=1 && if %allocdTp%==3 && call :virtualallocationtable "LBNloc" "%LBNloc%" &; if not exist LBNloc && echo Logical Block Address '%LBNloc%' for File Identifier Descriptor/ File not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL%
if exist udffile && set nxttagID=%tagID% && set tagID= ! set tagID=
if %fileTp%==12 && set /A volsec=%LBNloc%+%PTstart% &; set /A address=%volsec% * %LBsize% && set n=0 && set /a COMPlen=%LBNlen% && echo%NULL% && call :pathcomponent
goto :eof
:pathcomponent
set /A volsec=%address%/%LBsize% &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%          " &; echo -e $[]Path Component %n%:\t\t\t%show:~0,12% %show2:~0,12% %address%%%NULL% && set show= && set show2=
call :read %address% %target% &; set /A comptype=%result%&0xff && set result= &; echo -e -n $[0x08]000$[] Component Type\t\t\t%comptype%%%NULL% &; if %comptype%==0 && echo -e \t     reserved ! if %comptype%==1 && echo -e \t     root directory%NULL% ! if %comptype%==2 && echo -e \t     current root%NULL% ! if %comptype%==3 && echo -e \t     parent directory%NULL% ! if %comptype%==4 && echo -e \t     same directory%NULL% ! if %comptype%==5 && echo -e \t     identifies an object%NULL% ! echo%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A L_CI=%result%&0xff && set result= &; echo -e $[0x08]001$[] Length of Component Identifier\t%L_CI%%%NULL% &; set /a LEN_CI=%L_CI%-1
set /A address=%address%+1 &; call :read %address% %target% &; set /A compFver=%result%&0xffff && set result= &; echo -e $[0x08]002$[] Component File Version Number\t%compFver%%%NULL%
set /A address=%address%+2 &; if %L_CI%>=1 && if not exist NULL && call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set /a namelen=%LEN_CI% && call :getlfnloop "WRAP" ! call :getentityID "%address%" "%LEN_CI%"  "WRAP" &; set "componID=%result%" && set result= &; echo -e $[0x08]004$[] Component Identifier\t\t%componID%%%NULL% && set LEN_CI=
set /a COMPlen=%COMPlen%-%L_CI%-4 &; if %COMPlen%>=4 && set /A address=%address%+%L_CI% && set /a n=%n%+1 && set comptype= && set L_CI= && set compFver= && set componID= && echo%NULL% && goto :pathcomponent ! set COMPlen= && set n= && set comptype= && set L_CI= && set compFver= && set componID=
goto :eof
:allocationextentdescriptor
setlocal
set /A voladdr=%volsec% * %LBsize%
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Allocation Extent Descriptor:\t\t%show:~0,12% %show2:~0,12% %voladdr% && set show= && set show2= && call Fn.11 "%found%" "UDFAED " || set "found=%found%UDFAED "
set TGTsec=%LBsize%/0x200 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%LBsize% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip= && set TGTsec=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+20 &; call :read %address% %target% &; set /A result=%result%&0xffffffff
endlocal && set "found=%found%" && set result=%result% && goto :eof
:getudfbits
setlocal && set * && set "target=%target%" && set flags=%~1 && set depth=%depth% && set space=%space% && set "t=%t%" && set "t1=%t1%" && set "NULL=%NULL%"
call :getbits0-7 "%flags%" && setlocal && set flags=%flags%>>8 &; call :getbits0-7 "%flags%" &; endlocal && set bit8=%bit0% && set bit9=%bit1% && set bit10=%bit2% && set bit11=%bit3% && set bit12=%bit4% && set bit13=%bit5% && set bit14=%bit6% && set bit15=%bit7%
shift
if %bit0%==1 && if not "%~1"=="" && set "flag0=%~1"
if %bit1%==1 && if not "%~2"=="" && set "flag1=%~2"
if %bit2%==1 && if not "%~3"=="" && set "flag2=%~3"
if %bit3%==1 && if not "%~4"=="" && set "flag3=%~4"
if %bit4%==1 && if not "%~5"=="" && set "flag4=%~5"
if %bit5%==1 && if not "%~6"=="" && set "flag5=%~6"
if %bit6%==1 && if not "%~7"=="" && set "flag6=%~7"
shift && shift && shift && shift && shift && shift && shift
if %bit7%==1 && if not "%~1"=="" && set "flag7=%~1"
if %bit8%==1 && if not "%~2"=="" && set "flag8=%~2"
if %bit9%==1 && if not "%~3"=="" && set "flag9=%~3"
if %bit10%==1 && if not "%~4"=="" && set "flag10=%~4"
if %bit11%==1 && if not "%~5"=="" && set "flag11=%~5"
if %bit12%==1 && if not "%~6"=="" && set "flag12=%~6"
if %bit13%==1 && if not "%~7"=="" && set "flag13=%~7"
shift && shift && shift && shift && shift && shift && shift
if %bit14%==1 && if not "%~1"=="" && set "flag14=%~1"
if %bit15%==1 && if not "%~2"=="" && set "flag15=%~2"
if not exist NULL && call :udffileflags
endlocal && goto :eof
:udffileflags
if exist space && set t= ! set "t=\t"
if %bit0%==1 && if exist flag0 && echo -e %space%\x20\x20\x20\x20\x20Bit  0 = %bit0%  %flag0%%%NULL%
if %bit1%==1 && if exist flag1 && echo -e %space%\x20\x20\x20\x20\x20Bit  1 = %bit1%  %flag1%%%NULL%
if %bit2%==1 && if exist flag2 && echo -e %space%\x20\x20\x20\x20\x20Bit  2 = %bit2%  %flag2%%%NULL%
if %bit3%==1 && if exist flag3 && echo -e %space%\x20\x20\x20\x20\x20Bit  3 = %bit3%  %flag3%%%NULL%
if %bit4%==1 && if exist flag4 && echo -e %space%\x20\x20\x20\x20\x20Bit  4 = %bit4%  %flag4%%%NULL%
if %bit5%==1 && if exist flag5 && echo -e %space%\x20\x20\x20\x20\x20Bit  5 = %bit5%  %flag5%%%NULL%
if %bit6%==1 && if exist flag6 && echo -e %space%\x20\x20\x20\x20\x20Bit  6 = %bit6%  %flag6%%%NULL%
if %bit7%==1 && if exist flag7 && echo -e %space%\x20\x20\x20\x20\x20Bit  7 = %bit7%  %flag7%%%NULL%
if %bit8%==1 && if exist flag8 && echo -e %space%\x20\x20\x20\x20\x20Bit  8 = %bit8%  %flag8%%%NULL%
if %bit9%==1 && if exist flag9 && echo -e %space%\x20\x20\x20\x20\x20Bit  9 = %bit9%  %flag9%%%NULL%
if %bit10%==1 && if exist flag10 && echo -e %space%\x20\x20\x20\x20\x20Bit 10 = %bit10%  %flag10%%%NULL%
if %bit11%==1 && if exist flag11 && echo -e %space%\x20\x20\x20\x20\x20Bit 11 = %bit11%  %flag11%%%NULL%
if %bit12%==1 && if exist flag12 && echo -e %space%\x20\x20\x20\x20\x20Bit 12 = %bit12%  %flag12%%%NULL%
if %bit13%==1 && if exist flag13 && echo -e %space%\x20\x20\x20\x20\x20Bit 13 = %bit13%  %flag13%%%NULL%
if %bit14%==1 && if exist flag14 && echo -e %space%\x20\x20\x20\x20\x20Bit 14 = %bit14%  %flag14%%%NULL%
if %bit15%==1 && if exist flag15 && echo -e %space%\x20\x20\x20\x20\x20Bit 15 = %bit15%  %flag15%%%NULL%
goto :eof
:extendedattributeheaderDS
setlocal
if exist num && set num=0x0 && set /A voladdr=%volsec% * %LBsize% &; if not exist num && set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Extended Attribute Header Descriptor:\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set t= && set t2=
echo -e $[0x08]    000$[] Descriptor Tag%NULL% && set space=\x20\x20\x20\x20 &; if not exist num && call :tagID "%voladdr%" ! call :tagID "%address%"
set /A address=%address%+16 &; call :read %address% %target% &; set /A imatrloc=%result%&0xffffffff && set result= &; set /a len=%imatrloc% &; set "show=%imatrloc%            " &; if %imatrloc%==0xFFFFFFFF && set len=N/A ! set len=%len% &; echo -e $[0x08]    010$[] Implementation Attributes Locat\t%show:~0,12% %len%%%NULL% && set t= && set len=
set /A address=%address%+4 &; call :read %address% %target% &; set /A apatrloc=%result%&0xffffffff && set result= &; set /a len=%apatrloc% &; set "show=%apatrloc%            " &; if %apatrloc%==0xFFFFFFFF && set len=N/A ! set len=%len% &; echo -e $[0x08]    014$[] Application Attributes Location %show:~0,12% %len%%%NULL% && set t= && set len=
set /A address=%address%+4 && set /a L_EA=%L_EA%-24
if exist num && set /A num=%num%+24
:extendedattributeloop
call :read %address% %target% &; set /A attriTp=%result%&0xffffffff && set result=
if %attriTp%==1 && call :charactersetinformation ! if %attriTp%==5 && call :filetimesextendedattribute ! if %attriTp%==6 && call :informationtimesextendedattrib ! if %attriTp%==12 && call :devicespecificationextendedattr ! if %attriTp%==2048 && call :implementationuseextendedattrib ! if %attriTp%==65536 && call :applicationuseextendedattribute
set /a L_EA=%L_EA%-%attrilen% && set /A num=%num%+%attrilen% &; if %L_EA%>=1 && goto :extendedattributeloop
endlocal && goto :eof
:charactersetinformation
setlocal
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] Character Set Information%NULL% && set HEX=
echo -e $[0x08]    018$[] Attribute Type\t\t%attriTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]    01C$[] Attributes Subtype\t\t%attriSTp%%%NULL%
set /A address=%address%+3 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; set "show=%attrilen%            " &; echo -e $[0x08]    020$[] Attribute Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A ES_L=%result%&0xffffffff && set result= &; set /a len=%ES_L% && set "show=%ES_L%            " &; echo -e $[0x08]    024$[] Escape Sequences Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A charsetT=%result%&0xff && set result= &; echo -e $[0x08]    028$[] Character Set Type\t\t%charsetT%%%NULL%
set /A address=%address%+1 &; if not exist NULL && if %ES_L%>=1 &; raw cat --skip=%address% --locate=\x00 --length=%ES_L% %target% > nul &; set /A zeros=%@retval% ;; if not exist NULL && if %ES_L%>=1 &; if %zeros%==%ES_L% && echo -e $[0x08]    029$[] Escape Sequences\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=%E_SL% %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=%E_SL% %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]    029$[] echo -e $[0x08]    029$[] Escape Sequences%NULL% &; if exist impleuse && echo -e \t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=%E_SL% %target%%%NULL%
set /A address=%address%+%ES_L%
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:filetimesextendedattribute
setlocal
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] File Times Extended Attribute%NULL% && set HEX=
if not exist space && set ts=\t ! set ts=%ts% &; echo -e $[0x08]%space%    000$[] Attribute Type\t%ts%\t%attriTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]%space%    004$[] Attributes Subtype\t\t%attriSTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; set "show=%attrilen%            " &; echo -e $[0x08]%space%    008$[] Attribute Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A D_L=%result%&0xffffffff && set result= &; set /a len=%D_L% && set "show=%D_L%            " &; echo -e $[0x08]%space%    00C$[] Data Length\t\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A fltimext=%result%&0xffffffff && set result= &; echo -e $[0x08]%space%    010$[] File Time Existence\t\t%fltimext%%%NULL%
if %fltimext%>=1 && call :getbits0-7 "%fltimext%" &; set num=0x14
if %bit0%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 0 = %bit0%  CREATION%NULL% && set X=12
if %bit2%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 2 = %bit2%  DELETION%NULL% && set X=12
if %bit3%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 3 = %bit3%  EFFECTIVE%NULL% && set X=12
if %bit5%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 5 = %bit5%  BACKUP%NULL% && set X=12
set /A address=%address%+4 && if not exist space && set me=me && set t=\t
if %bit0%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%    0%num:~2%$[] Creation Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%num%+12
if %bit2%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]    0%num:~2%$[] Deletion Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%num%+12
if %bit3%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]    0%num:~2%$[] Effective Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%num%+12
if %bit5%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]    0%num:~2%$[] Backup Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime=
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:informationtimesextendedattrib
setlocal
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] Information Times Extended Attr%NULL% && set HEX=
echo -e $[0x08]%space%    000$[] Attribute Type\t\t%attriTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]%space%    004$[] Attributes Subtype\t\t%attriSTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; set "show=%attrilen%            " &; echo -e $[0x08]%space%    008$[] Attribute Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A D_L=%result%&0xffffffff && set result= &; set /a len=%D_L% && set "show=%D_L%            " &; echo -e $[0x08]%space%    00C$[] Data Length\t\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A intimext=%result%&0xffffffff && set result= &; echo -e $[0x08]%space%    010$[] Information Time Existence\t%intimext%%%NULL%
set /A address=%address%+4 && if %intimext%>=1 && call :getbits0-7 "%intimext%" &; set num=0x14
if %bit0%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 0 = %bit0%  CREATION%NULL% && set X=12
if %bit1%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 2 = %bit1%  MODIFICATION%NULL% && set X=12
if %bit2%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 3 = %bit2%  EXPIRATION%NULL% && set X=12
if %bit3%==1 && echo -e %space%\x20\x20\x20\x20\x20\x20\x20\x20\x20Bit 5 = %bit3%  EFFECTIVE%NULL% && set X=12
if %bit0%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%    0%num:~2%$[] Creation Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%mum%+12
if %bit1%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%    0%num:~2%$[] Modification Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%mum%+12
if %bit2%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%    0%num:~2%$[] Expiration Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime= && set /A num=%mum%+12
if %bit3%==1 && call :timestamp "%address%" "%X%" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%    0%num:~2%$[] Effective Date and Time\t%Rdatime%%%NULL% && set /A address=%address%+12 && set Rdatime=
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:devicespecificationextendedattr
setlocal
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] Device Specification%NULL% && set HEX=
echo -e $[0x08]    018$[] Attribute Type\t\t%attriTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]    01C$[] Attributes Subtype\t\t%attriSTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; set "show=%attrilen%            " &; echo -e $[0x08]    020$[] Attribute Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A IU_L=%result%&0xffffffff && set result= &; set /a len=%IU_L% && set "show=%IU_L%            " &; echo -e $[0x08]    024$[] Implementation Use Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A MjdevID=%result%&0xffffffff && set result= &; echo -e $[0x08]    028$[] Major Device Identification\t%MjdevID%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A MndevID=%result%&0xffffffff && set result= &; echo -e $[0x08]    02C$[] Minor Device Identification\t%MndevID%%%NULL%
set /A address=%address%+4 && if not exist NULL && if %IU_L%>=1 &; raw cat --skip=%address% --locate=\x00 --length=%IU_L% %target% > nul &; set /A zeros=%@retval% ;; if not exist NULL && if %IU_L%>=1 &; if %zeros%==%IU_L% && echo -e $[0x08]    030$[] Implementation Use\t\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=%IU_L% %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=%IU_L% %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]    030$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=%IU_L% %target%%%NULL%
set /A address=%address%+%IU_L%
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:implementationuseextendedattrib
setlocal
if not exist space && set ts=\t && set r=r && set fier=fier
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] Implementation Use Extended Att%NULL% && set HEX=
set "show=%attriTp%            " &; echo -e $[0x08]%space%    000$[] Attribute Type\t\t%show:~0,12%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]%space%    004$[] Attributes Subtype\t\t%attriSTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; set "show=%attrilen%            " &; echo -e $[0x08]%space%    008$[] Attribute Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A IU_L=%result%&0xffffffff && set result= &; set /a len=%IU_L% && set "show=%IU_L%            " &; echo -e $[0x08]%space%    00C$[] Implementation Use Length\t%show:~0,12% %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=21 && call :getlfnloop ! call :getentityID "%address%" "22" &; set implemID=%result% && set result= &; if not exist implemID && set implemID=EMPTY
if not exist NULL && echo -n -e $[0x08]%space%    010$[] Implementation Identifier  %NULL% &; if "%implemID%"=="EMPTY" && echo -e EMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]%space%        000$[] Flags\t\t\t%charID%%%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]%space%        001$[] Identifier\t%ts%\t%implemID%%%NULL%
set /A address=%address%+24 && if not "%implemID%"=="EMPTY" && if not exist NULL &; setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%IIsuffix%&0xffff && set /A OSclass=%IIsuffix%&0xff0000>>16 && set /A OSID=%IIsuffix%&0xff000000>>24 &; call :OStypes &: if not %IIsuffix%==0 && echo -e $[0x08]%space%%%space%    018$[] Identifier Suffix%NULL% && echo -e $[0x08]%space%%%space%        000$[] UDF Revision%ts%\t%UDFrev%%%NULL% && echo -e $[0x08]%space%%%space%        002$[] OS Class\t%ts%\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]%space%%%space%        003$[] OS Identifier%ts%\t%OSID%\t     %osid%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]%space%%%space%    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
set /A address=%address%+8 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=%IU_L% %target% > nul &; set /A zeros=%@retval% ;; if not exist NULL &; if not %zeros%==%IU_L% && echo -e $[0x08]%space%    030$[] Implementation Use%NULL% ! echo -e $[0x08]%space%    030$[] Implementation Use\t%ts%\tEMPTY%NULL%
if %IU_L%>=1 && if not "%implemID%"=="EMPTY" &; if not exist NULL &; if "%implemID%"=="*UDF FreeEASpace" && call :UDFFreeEASpace ! if "%implemID%"=="*UDF DVD CGMS Info" && call :UDFDVDCGMSInfo ! if "%implemID%"=="*UDF OS/2 EALength" && call :UDFOS2EALength ! if "%implemID%"=="*UDF Mac VolumeInfo" && call :UDFMacVolumeInfo ! if "%implemID%"=="*UDF Mac FinderInfo" && call :UDFMacFinderInfo ! if "%implemID%"=="*UDF OS/400 DirInfo" && call :UDFOS400DirInfo
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:UDFFreeEASpace
:UDFFreeAppEASpace
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%%%space%    000$[] Header Checksum\t\t%checksum%%%NULL%
set /A address=%address%+2 &; set /A result=%IU_L%-2 &; echo -e $[0x08]%space%%%space%    002$[] Free EA Space\t\t%result%%%NULL%
set /A address=%address%+%IU_L%-2 && goto :eof
:UDFDVDCGMSInfo
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%%%space%    000$[] Header Checksum\t\t%checksum%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%    002$[] CGMS Information\t%result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%    003$[] Data Structure Type\t%result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%    004$[] Protection System Infor\t%result%%%NULL%
set /A address=%address%+4 && goto :eof
:UDFOS2EALength
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%    000$[] Header Checksum\t%checksum%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    002$[] OS/2 Extend Attr Length %result%%%NULL%
set /A address=%address%+4 && goto :eof
:UDFMacVolumeInfo
if not exist space && set "n=n Date" && set f=nformation
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%%%space%    000$[] Header Checksum\t\t%checksum%%%NULL%
set /A address=%address%+2 &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%%%space%    002$[] Last Modification\t%Rdatime%%%NULL%
set /A address=%address%+12 &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]%space%%%space%    00C$[] Last Backup Date\t%Rdatime%%%NULL%
set /A address=%address%+12 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%    01A$[] Volume Finder Informati\t%result%%%NULL%
set /A address=%address%+34 && goto :eof
:UDFMacFinderInfo
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%%%space%    000$[] Header Checksum\t\t%checksum%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%    004$[] Parent Direct ID\t%result%%%NULL%
set /A address=%address%+4 &; if %DIR%==Y && call :UDFDInfo ! call :UDFFInfo
set /A address=%address%+16 &; if %DIR%==Y && call :UDFDXInfo ! call :UDFFXInfo
if not %DIR%==Y && set /A address=%address%+16 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%    028$[] Resource Fork Data Leng %result%%%NULL%
if not %DIR%==Y && set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%    02C$[] Resource Fork All Lengt %result%%%NULL%
set /A address=%address%+4 && goto :eof
:UDFDInfo
setlocal
raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; set /a zeros=%@retval% ;; if not %zeros%==16 && echo -e $[0x08]%space%%%space%    008$[] Directory Information%NULL% ! echo -e $[0x08]%space%%%space%    008$[] Directory Information\tEMPTY%NULL% && endlocal && goto :eof
echo -e $[0x08]%space%%%space%%%space%    000$[] FrRect%NULL%
call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    000$[] Top\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    002$[] Left\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    004$[] Bottom\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    006$[] Right\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    008$[] FrFlags\t\t%result%%%NULL%
echo -e $[0x08]%space%%%space%%%space%    00A$[] FrLocation%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    000$[] V\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    002$[] H\t\t%result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    00E$[] FrView\t\t%result%%%NULL%
endlocal && goto :eof
:UDFDXInfo
setlocal
raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; set /a zeros=%@retval% ;; if not %zeros%==16 && echo -e $[0x08]%space%%%space%    018$[] Directory Extended Info%NULL% ! echo -e $[0x08]%space%%%space%    018$[] Directory Extended Info  EMPTY%NULL% && endlocal && goto :eof
echo -e $[0x08]%space%%%space%%%space%    000$[] FrScroll%NULL%
call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    000$[] V\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    002$[] H\t\t%result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    004$[] FrOpenChain\t\t%result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%%%space%    008$[] FrScript\t\t%result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%%%space%    009$[] FrXflags\t\t%result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    00A$[] FrComment\t\t%result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    00E$[] FrPutAway\t\t%result%%%NULL%
endlocal && goto :eof
:UDFFInfo
setlocal
raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; set /a zeros=%@retval% ;; if not %zeros%==16 && echo -e $[0x08]%space%%%space%    008$[] File Information\t\t %NULL% ! echo -e $[0x08]%space%%%space%    008$[] File Information\tEMPTY%NULL% && endlocal && goto :eof
call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    000$[] FdType\t %result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    004$[] FdCreator\t %result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    008$[] FdFlags\t %result%%%NULL%
echo -e $[0x08]%space%%%space%%%space%    00A$[] FdLocation%NULL%
call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    000$[] V\t %result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%%%space%    002$[] H\t %result%%%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    00E$[] FdFldr\t %result%%%NULL%
endlocal && goto :eof
:UDFFXInfo
setlocal
raw cat --skip=%address% --locate=\x00 --length=16 %target% > nul &; set /a zeros=%@retval% ;; if not %zeros%==16 && echo -e $[0x08]%space%%%space%    018$[] File Extended Informati %NULL% ! echo -e $[0x08]%space%%%space%    018$[] File Extended Informati EMPTY%NULL% && endlocal && goto :eof
call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    000$[] FrIconID\t %result%%%NULL%
set /A address=%address%+2 &; call :read8 %address% %target% &; set /A result=%result%&0xffffffffffffff &; echo -e $[0x08]%space%%%space%%%space%    002$[] FdUnused\t %result%%%NULL%
set /A address=%address%+6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%%%space%    008$[] FdScript\t %result%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]%space%%%space%%%space%    009$[] FdXflags\t %result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xffff &; echo -e $[0x08]%space%%%space%%%space%    00A$[] FdComment\t %result%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[0x08]%space%%%space%%%space%    00E$[] FdPutAway\t %result%%%NULL%
endlocal && goto :eof
:UDFOS400DirInfo
call :read %address% %target% &; set /A checksum=%result%&0xffff && set result= &; echo -e $[0x08]%space%    000$[] Header Checksum %checksum%%%NULL%
set /A address=%address%+4 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=44 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==44 && echo -e $[0x08]%space%%%space%%%space%    008$[] Directory Info\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=44 %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=43 %target% | set impleuse= ! set impleuse= &; echo -e $[0x08]%space%%%space%%%space%    008$[] Directory Info%NULL% &; if exist impleuse && echo -e \x20%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=44 %target%%%NULL%
set /A address=%address%+44 && goto :eof
:applicationuseextendedattribute
setlocal
if %num%<=0xFF && set HEX=0%num:~2% ! set HEX=%num:~2% &; echo -e $[0x08]    %HEX%$[] Application Use Ext A%NULL% && set HEX=
echo -e $[0x08]%space%    018$[] Attribute Type\t\t %attriTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attriSTp=%result%&0xff && set result= &; echo -e $[0x08]%space%    01C$[] Attributes Subtype\t %attriSTp%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A attrilen=%result%&0xffffffff && set result= &; set /a len=%attrilen% &; echo -e $[0x08]%space%    020$[] Attribute Length\t %attrilen%\t\t %len%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /A AU_L=%result%&0xffffffff && set result= &; echo -e $[0x08]%space%    024$[] Application Use Length\t %AU_L%%%NULL%
set /A address=%address%+4 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=30 && call :getlfnloop ! call :getentityID "%address%" "31" &; set "applicID=%result%" && set result= &; echo -e $[0x08]%space%    028$[] Application Identifier\t %applicID%%%NULL%
set /A address=%address%+32 && if not exist NULL && if %AU_L%>=1 &; if "%applicID%"=="*UDF FreeAppEASpace" && echo -e $[0x08]%space%    04C$[] Application Use%NULL% && set IU_L=%AU_L% && call :UDFFreeAppEASpace ! echo -e $[0x08]%space%    04C$[] Application Use\t\t EMPTY%NULL%
endlocal && set address=%address% && set attrilen=%attrilen% && goto :eof
:unallocatedspaceentry
setlocal
set /A voladdr=%volsec% * %LBsize%
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Unallocated Space Entry:\t\t\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFUSE " && set t= && set t2=
echo -e $[0x08]000$[] Descriptor Tag%NULL%
call :tagID "%voladdr%"
endlocal && goto :eof
:spacebitmapdescriptor
setlocal
if exist LBNofset && set /A voladdr=%volsec% * %LBsize% + %LBNofset% ! set /A voladdr=%volsec% * %LBsize%
if not exist NULL &; call Fn.11 "%find%" "ISO9660/UDF" && set "found=%found%UDFSBD "
if not exist Q && if exist NULL &; call Fn.11 "%find%" "UDFSBD " && set NULL= && set "found=%found%UDFSBD "
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Space Bitmap Descriptor:\t\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFSMD " && set show= && set show2=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; call :read %address% %target% &; set /A numbits=%result%&0xffffffff && set result= &; set /a len=%numbits% &; set "show=%numbits%            " &; echo -e $[0x08]010$[] Number Of Bits\t\t\t%show:~0,12% %len%%%NULL% && set len=
set /A address=%voladdr%+20 &; call :read %address% %target% &; set /A numbytes=%result%&0xffffffff && set result= &; set /a len=%numbytes% &; set "show=%numbytes%            " &; echo -e $[0x08]014$[] Number Of Bytes\t\t\t%show:~0,12% %len%%%NULL% && set len=
if %hexview%==Y && if not exist NULL &; if not %numbytes%<=%LBNlen% && set /A length=%LBNlen% &; raw cat --hex --skip=%voladdr% --length=%length% %target% &; if not %numbytes%<=%LBNlen% && echo End of First Extent: %LBNlen% bytes
#BADifMoreThanOneExtent#if %hexview%==Y && if not exist NULL && set /A length=%numbytes%+0x18 &; raw cat --hex --skip=%voladdr% --length=%length% %target%
endlocal && set "found=%found%" && goto :eof
:findanchorVDpointer
setlocal
set /A location=%CDtotsec%-1 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x05\x01 --length=2 %target% > nul && set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; set /A address=%address%-0xC+0x1B &; call :read %address% %target% &; set /A fileTp=%result%&0xff && set result= &; if not %fileTp%==0 && if not %fileTp%==248 && set TAGloc=
if not exist TAGloc &; raw cat --skip=%address% --locate=\x0A\x01 --length=2 %target% > nul && set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; set /A address=%address%-0xC+0x1B &; call :read %address% %target% &; set /A fileTp=%result%&0xff && set result= &; if not %fileTp%==0 && if not %fileTp%==248 && set TAGloc=
if exist TAGloc && set /A location=%location%-%TAGloc% &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul && set AVDPsec=%location% &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
if exist TAGloc && set /A location=%location%-0x10 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul && set AVDPsec=%location% &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
if exist TAGloc && set /A location=%location%-0x10 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul && set AVDPsec=%location% &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
if exist TAGloc && set /A location=%location%-0x10 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul && set AVDPsec=%location% &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
if exist TAGloc && set /A location=%location%-0x10 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul && endlocal && set AVDPsec=%location% && goto :eof ! set TAGloc=
set location=256 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && set /a AVDPsec=256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
set /a location=%CDtotsec%-257 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && set /a AVDPsec=%CDtotsec%-256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
set /a location=%CDtotsec%-1 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && set /a AVDPsec=%CDtotsec%-256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
set location=512 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && echo %0 TAGloc=%TAGloc% location=%location% key... && set /a AVDPsec=%CDtotsec%-256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
set /a location=%CDtotsec%-513 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /a AVDPsec=%CDtotsec%-256 &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && echo %0 TAGloc=%TAGloc% location=%location% key... && endlocal && set AVDPsec=%AVDPsec% && goto :eof
set location=32 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && echo %0 TAGloc=%TAGloc% location=%location% key... && set /a AVDPsec=%CDtotsec%-256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
set location=64 &; set /A address=%location% * %LBsize% &; raw cat --skip=%address% --locate=\x02\x00 --length=2 %target% > nul &; set /A address=%address%+0xC &; call :read %address% %target% &; set /A TAGloc=%result%&0xffffffff && set result= &; if %TAGloc%==%location% && echo %0 TAGloc=%TAGloc% location=%location% key... && set /a AVDPsec=%CDtotsec%-256 &; endlocal && set AVDPsec=%AVDPsec% && goto :eof
endlocal && set AVDPsec= &; goto :eof
:UDFbridgeanchorpoint
setlocal
if not exist Q && if exist NULL && if not %PREVIOUS%==N &; if %UDFAVDP%==Y && set NULL= ! if %UDFVDS%==Y && set NULL= ! if %UDFVDS2%==Y && set NULL=
if not exist NULL &; if exist USECTOR && if exist AVDPsec && set AVDPsec=%volsec%
set /A volsec=%AVDPsec% && set /A voladdr=%AVDPsec% * %LBsize%
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Anchor Volume Descriptor Pointer:\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFAVDP " && set show= && set show2= && set len=
echo -e $[0x08]000$[] Descriptor Tag%NULL%
call :tagID "%voladdr%"
echo -e $[0x08]010$[] Main Volume Descrip Sequence Extent%NULL%
set /A address=%voladdr%+16 &; call :read %address% %target% &; set /A MVDSlen=%result%&0xffffffff && set result= &; set /a len=%MVDSlen% &; set "show=%MVDSlen%            " &; echo -e $[0x08]    000$[] Main Extent Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%voladdr%+20 &; call :read %address% %target% &; set /A MVDSsec=%result%&0xffffffff && set result= &; set /a len=%MVDSsec% &; set "show=%MVDSsec%            " &; echo -e $[0x08]    004$[] Main Extent Location\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
echo -e $[0x08]018$[] Reserve Volume Desc Sequence Extent%NULL%
set /A address=%voladdr%+24 &; call :read %address% %target% &; set /A RVDSlen=%result%&0xffffffff && set result= &; set /a len=%RVDSlen% &; set "show=%RVDSlen%            " &; echo -e $[0x08]    000$[] Reserve Extent Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%voladdr%+28 &; call :read %address% %target% &; set /A RVDSsec=%result%&0xffffffff && set result= &; set /a len=%RVDSsec% &; set "show=%RVDSsec%            " &; echo -e $[0x08]    004$[] Reserve Extent Location\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if not exist UDFVDS2 && if not exist VDSsec &; if not %MVDSsec%==0 && set VDSsec=%MVDSsec% && set VDSlen=%MVDSlen% ! if not %RVDSsec%==0 && set VDSsec=%RVDSsec% && set VDSlen=%RVDSlen% ! endlocal && set result=0 && goto :eof
if %UDFVDS2%==Y &; if not %RVDSsec%==0 && set VDSsec=%RVDSsec% && set VDSlen=%RVDSlen% ! endlocal && set result=0 && goto :eof
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=32 %target%%%NULL%
endlocal && set VDSsec=%VDSsec% && set VDSlen=%VDSlen% && set nxttagID=%nxttagID% && set "found=%found%"
if %UDFVDS2%==Y && set UDFVDS=Y && set UDFVDS2= && set "find=UDFVDS "
call Fn.11 "%find%" "AVDP " || goto :eof ! if not exist AVDPsorg && set AVDPsorg=%AVDPsec%
if not exist AVDPsec2 && set /A AVDPsec2=%CDtotsec%-1 &; set /A address=%AVDPsec2% * %LBsize% &; call :read %address% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if %nxttagID%==0x2 && set AVDPsec=%AVDPsec2% &; if not exist Q && echo ! set Q=%Q% &; goto :UDFbridgeanchorpoint
if exist AVDPsec2 && if not exist AVDPsec3 && set /A AVDPsec3=%CDtotsec%-257 &; set /A address=%AVDPsec3% * %LBsize% &; call :read %address% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if %nxttagID%==0x2 && set AVDPsec=%AVDPsec3% &; if not exist Q && echo ! set Q=%Q% &; goto :UDFbridgeanchorpoint
set AVDPsec=%AVDPsorg% && set AVDPsorg= && set AVDPsec2= && set AVDPsec3= && set address= && set nxttagID=
goto :eof
:UDFvolumedescriptorsequence
if %nxttagID%>=1 && if %nxttagID%<=9 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS |; if not exist Q && echo
if %nxttagID%==1 && call :UDFprimaryVDS ! if %nxttagID%==2 && call :UDFbridgeanchorpoint ! if %nxttagID%==3 && call :VDSpointer ! if %nxttagID%==4 && call :implementationuseVD ! if %nxttagID%==5 && call :partitiondescriptor ! if %nxttagID%==6 && call :logicalvolumedescriptor ! if %nxttagID%==7 && call :unallocatedspacedescriptor ! if %nxttagID%==8 && call :terminatingdescriptor ! if %nxttagID%==9 && goto :logicalvolumeintegrityDS
if %nxttagID%==6 && if %UDFVAT%==Y && if not %PREVIOUS%==N && if exist PTstart &; call Fn.11 "%found%" "UDFVAT " && set result=1 && goto :eof ! set result=0 && goto :eof
set /A volsec=%volsec%+1 &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
set /a SEQlen=%SEQlen%-1 &; if %SEQlen%>=1 && goto :UDFvolumedescriptorsequence ! set SEQlen=
if not exist PTstart && if not exist accessTp &; if %accessT1%==3 && set accessTp=%accessT1% && set PTstart=%PTstart1% && set PTlength=%PTlen1% && set /A UDFSsec=%PTstart1%+%PTlen1% ! set accessTp=%accessT0% && set PTstart=%PTstart0% && set PTlength=%PTlen0% && set /A UDFSsec=%PTstart0%+%PTlen0% && if exist PTlen1 && set /A UDFSsec=%PTstart0%+%PTlen0%+%PTlen1% ! set accessT0=%accessT0% &; set accessT0= && set accessT1= && set PTstart0= && set PTstart1= && set PTlen0= && set PTlen1=
set /A volsec=%ISstart% &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if %nxttagID%==9 &; if not %UDFVDS%==Y if not %UDFVDS2%==Y || goto :eof
if %nxttagID%>=1 && if %nxttagID%<=9 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS |; if not exist Q && echo
if %nxttagID%==8 && call :terminatingdescriptor ! if %nxttagID%==9 && call :logicalvolumeintegrityDS
if %nxttagID%>=1 && if %nxttagID%<=9 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist UDFVDS |; if not exist Q && echo
set /A volsec=%volsec%+1 &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result=
if %nxttagID%==8 && call :terminatingdescriptor ! if %nxttagID%==9 && call :logicalvolumeintegrityDS
if %nxttagID%==9 && if not %PREVIOUS%==N && if not "%find%"=="UDFTD " &; call Fn.11 "%found%" "UDFLVID " && set SEQ= && set SEQlen= && goto :eof
if %nxttagID%==9 && if not %PREVIOUS%==N &; if "%find%"=="%found%" && goto :eof
goto :eof
:UDFprimaryVDS
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFPVD=%UDFPVD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set "volsetID=%volsetID%" && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if exist NULL && if not %PREVIOUS%==N &; if %UDFPVD%==Y && if not exist Q && set NULL= ! if %UDFVDS%==Y && if not exist Q && set NULL= ! if exist volsetID && endlocal && goto :eof
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Primary Volume Descriptor (UDF):\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFPVD " && set show= && set show2=
set TGTsec=2 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=512 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A VDSseqnr=%result%&0xffffffff && set result= &; set /a len=%VDSseqnr% &; echo -e $[0x08]010$[] Volume Descriptor Sequence Number\t%VDSseqnr%
set /A address=%voladdr%+20 &; if not exist NULL &; call :read %address% %target% &; set /A PVDSnr=%result%&0xffffffff && set result= &; set /a len=%PVDSnr% &; echo -e $[0x08]014$[] Primary Volume Descriptor Number\t%PVDSnr%
set /A address=%voladdr%+24 &; if not exist NULL &; call :read %address% %target% &; set /a volIDnr=%result%&0xff && set result= &; if %volIDnr%==0x10 && set /A skipzero=%address%+2 && set namelen=30 && call :getlfnloop ! call :getentityID "%address%" "31" &; if exist result && set "volumeID=%result%" ! set volumeID=EMPTY &; echo -e $[0x08]018$[] Volume Identifier\t\t\t%volumeID%
set /A address=%voladdr%+56 &; if not exist NULL &; call :read %address% %target% &; set /A volseqnr=%result%&0xffff && set result= &; set /a len=%volseqnr% &; echo -e $[0x08]038$[] Volume Sequence Number\t\t%volseqnr%
set /A address=%voladdr%+58 &; if not exist NULL &; call :read %address% %target% &; set /A maxvsqnr=%result%&0xffff && set result= &; set /a len=%maxvsqnr% &; echo -e $[0x08]03A$[] Maximum Volume Sequence Number\t%maxvsqnr%
set /A address=%voladdr%+60 &; if not exist NULL &; call :read %address% %target% &; set /A intchlev=%result%&0xffff && set result= &; set /a len=%intchlev% &; echo -e $[0x08]03C$[] Interchange Level\t\t\t%intchlev%
set /A address=%voladdr%+62 &; if not exist NULL &; call :read %address% %target% &; set /A maxintcl=%result%&0xffff && set result= &; set /a len=%maxintcl% &; echo -e $[0x08]03E$[] Maximum Interchange Level\t\t%maxintcl%
set /A address=%voladdr%+64 &; if not exist NULL &; call :read %address% %target% &; set /A chrsetID=%result%&0xffffffff && set result= &; set /a len=%chrsetID% &; echo -e $[0x08]040$[] Character Set Identifier\t\t%chrsetID%
set /A address=%voladdr%+68 &; if not exist NULL &; call :read %address% %target% &; set /A maxchrID=%result%&0xffffffff && set result= &; set /a len=%maxchrID% &; echo -e $[0x08]044$[] Maximum Character Set Identifier\t%maxchrID%
set /A address=%voladdr%+72 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=0xA && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "127" "WRAP" &; if exist result && set "volsetID=%result%" ! set volsetID=EMPTY &; echo -e $[0x08]048$[] Volume Set Identifier\t\t%volsetID%%%NULL% && if not "volsetID"=="EMPTY" && if exist lfnfile && set "volsetID=%lfnfile%" && set lfnfile=
if exist NULL= && if not %PREVIOUS%==N && endlocal && set "volsetID=%volsetID%" && goto :eof
set /A address=%voladdr%+200 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63" "WRAP" &; if exist result && set "Dcharset=%result%" ! set Dcharset=EMPTY &; echo -e $[0x08]0C8$[] Desciptor Character Set\t\t%Dcharset%
set /A address=%voladdr%+264 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63" "WRAP" &; if exist result && set "Echarset=%result%" ! set Echarset=EMPTY &; echo -e $[0x08]0C8$[] Explanatory Character Set\t\t%Echarset%
set /A address=%voladdr%+328 &; if not exist NULL &; call :read8 %address% %target% &; set /A abstract=%result%&0xffffffffffffffff && set result= &; if %abstract%==0 && set abstract=EMPTY
if not exist NULL &; echo -n -e $[0x08]148$[] Volume Abstract%NULL% &; if "%abstract%"=="EMPTY" && echo -e \t\t\t%abstract%%%NULL% ! echo%NULL%
if not "%abstract%"=="EMPTY" && set /A address=%voladdr%+328 &; call :read %address% %target% &; set /A LBNlen=%result%&0xffffffff && set result= &; set /a len=%LBNlen% &; set "show=%LBNlen%            " &; echo -e $[0x08]    000$[] Extent Length\t\t\t%show:~0,12% %len%%%NULL% && set t=
if not "%abstract%"=="EMPTY" && set /A address=%address%+4 &; call :read %address% %target% &; set /A LBNloc=%result%&0xffffffff && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Extent Location\t\t\t%show:~0,12% %len%%%NULL% && set t=
set /A address=%voladdr%+336 &; if not exist NULL &; call :read8 %address% %target% &; set /A copyrigh=%result%&0xffffffffffffffff && set result= &; if %copyrigh%==0 && set copyrigh=EMPTY
if not exist NULL &; echo -n -e $[0x08]150$[] Volume Copyright Notice%NULL% &; if "%copyrigh%"=="EMPTY" && echo -e \t\t%copyrigh%%%NULL% ! echo%NULL%
if not "%copyrigh%"=="EMPTY" && set /A address=%voladdr%+336 &; call :read %address% %target% &; set /A LBNlen=%result%&0xffffffff && set result= &; set /a len=%LBNlen% &; set "show=%LBNlen%            " &; echo -e $[0x08]    000$[] Extent Length\t\t\t%show:~0,12% %len%%%NULL% && set t=
if not "%copyrigh%"=="EMPTY" && set /A address=%address%+4 &; call :read %address% %target% &; set /A LBNloc=%result%&0xffffffff && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Extent Location\t\t\t%show:~0,12% %len%%%NULL% && set t=
set /A address=%voladdr%+344 &; if not exist NULL &; call :read8 %address% %target% &; set /A ApplicID=%result%&0xffffffffffffffff &; if %ApplicID%==0 && set ApplicID=EMPTY
if not exist NULL &; echo -n -e $[0x08]158$[] Application Identifier%NULL% &; if "%ApplicID%"=="EMPTY" && echo -e \t\t%ApplicID%%%NULL% ! echo %NULL%
if not "%ApplicID%"=="EMPTY" && call :read %address% %target% &; set /A flags=%result%&0xff && set result= && call :getentityID "%address%" "23" &; set "IdtifyAI=%result%" && set result= &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Last Write Identifier\t\t%IdtifyAI%%%NULL%
set /A address=%address%+24 && if not "%ApplicID%"=="EMPTY" && if not exist NULL &; call :read8 %address% %target% &; set /A AIsuffix=%result%&0xffffffffffffffff &; if not %AIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t\t%AIsuffix%%%NULL% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL%
set /A address=%voladdr%+376 &; if not exist NULL &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]178$[] Recording Date and Time\t\t%Rdatime%
set /A address=%voladdr%+388 &; call :read8 %address% %target% &; set /A implemID=%result%&0xffffffffffffffff && set result= &; if %implemID%==0 && set implemID=EMPTY
if not "%implemID%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result=
if not exist NULL && echo -n -e $[0x08]184$[] Implementation Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \t\tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Developer Identifier\t\t%identifi%%%NULL%
set /A address=%address%+24 &; if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffffff0000>>16 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal
set /A address=%voladdr%+420 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=64 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==64 && echo -e $[0x08]1A4$[] Implementation Use\t\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=64 %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=63 %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]1A4$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t\t\t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=64 %target%%%NULL%
set /A address=%voladdr%+484 &; if not exist NULL &; call :read %address% %target% &; set /A prevoloc=%result%&0xffffffff && set result= &; echo -e $[0x08]1E4$[] Predecessor Volume Location\t\t%prevoloc%
set /A address=%voladdr%+488 &; if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xffff && set result= &; echo -e $[0x08]1E8$[] Flags\t\t\t\t%flags%
if %hexview%==Y && raw cat --hex --skip=0x0 --length=492 %target%%%NULL%
endlocal && set volsec=%volsec% && set "found=%found%" && set "volsetID=%volsetID%" && goto :eof
:VDSpointer
setlocal
if exist NULL && if not %PREVIOUS%==N &; if %UDFVDP%==Y && if not exist Q && set NULL= ! if %UDFVDS%==Y && if not exist Q && set NULL= ! endlocal && goto :eof
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Volume Descriptor Pointer:\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFVDP " && set show= && set show2=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
echo -e $[0x08]010$[] Next Volume Descriptor Sequence Extent
set /A address=%voladdr%+16 &; call :read %address% %target% &; set /A LBNlen=%result%&0xffffffff && set result= &; set /a len=%LBNlen% &; set "show=%LBNlen%            " &; echo -e $[0x08]    000$[] Extent Length\t\t\t%show:~0,12% %len%%%NULL% && set t=
set /A address=%address%+4 &; call :read %address% %target% &; set /A LBNloc=%result%&0xffffffff && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Extent Location\t\t%show:~0,12% %len%%%NULL% && set t=
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=24 %target%%%NULL%
set /A volsec=%LBNloc%+1 &; set /A address=%volsec% * %LBsize% &; call :read %address% %target% &; set /A nxttagID=%result%&0xffff
endlocal && set volsec=%volsec% && set nxttagID=%nxttagID% && set "found=%found%" &; goto :eof
:implementationuseVD
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFIUVD=%UDFIUVD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set PREVIOUS=%PREVIOUS% && set UDFrev=%UDFrev% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if exist NULL && if not %PREVIOUS%==N &; if %UDFIUVD%==Y && if not exist Q && set NULL= ! if %UDFVDS%==Y && if not exist Q && set NULL= ! endlocal && goto :eof
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Implementation Use Volume Descr:\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFIUVD " && set t= && set t2=
set TGTsec=2 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=512 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; call :read %address% %target% &; set /A vdseqnr=%result%&0xffffffff && set result= &; set /a len=%vdseqnr% &; echo -e $[0x08]010$[] Volume Descr Sequence Number\t%vdseqnr% %NULL%
set /A address=%voladdr%+20 &; call :read8 %address% %target% &; set /A implemID=%result%&0xffffffffffffffff && set result= &; if %implemID%==0 && set implemID=EMPTY
if not exist NULL && echo -n -e $[0x08]014$[] Implementation Identifier\t%NULL% &; if "%implemID%"=="EMPTY" && echo -e \tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "UDFLVinf=%result%" && set result= &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] UDF Entity Identifier\t\t%UDFLVinf%%%NULL%
set /A address=%address%+24 && if not "%implemID%"=="EMPTY" && if not exist NULL &; setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%IIsuffix%&0xffff && set /A OSclass=%IIsuffix%&0xff0000>>16 && set /A OSID=%IIsuffix%&0xff000000>>24 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        003$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
if not exist NULL && echo -e $[0x08]034$[] Implementation Use%NULL%
set /A address=%voladdr%+52 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63" "WRAP" &; set "LVIcharS=%result%" && set result= &; if not exist LVIcharS && set LVIcharS=EMPTY ! set "LVIcharS=%LVIcharS%" &; echo -e $[0x08]    000$[] LVI Charset\t\t\t%LVIcharS%%%NULL%
set /A address=%address%+64 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "127" "WRAP" &; set "logvolID=%result%" && set result= &; if not exist logvolID && set logvolID=EMPTY ! set "logvolID=%logvolID%" &; echo -e $[0x08]    040$[] Logical Volume Identifier\t%logvolID%%%NULL%
set /A address=%address%+128 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=34 && call :getlfnloop ! call :getentityID "%address%" "35" &; set "LVinfo1=%result%" && set result= &; if not exist LVinfo1 && set LVinfo1=EMPTY ! set "LVinfo1=%LVinfo1%" &; echo -e $[0x08]    0C0$[] LV Info 1\t\t\t%LVinfo1%%%NULL%
set /A address=%address%+36 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=34 && call :getlfnloop ! call :getentityID "%address%" "35" &; set "LVinfo2=%result%" && set result= &; if not exist LVinfo2 && set LVinfo2=EMPTY ! set "LVinfo2=%LVinfo2%" &; echo -e $[0x08]    0E4$[] LV Info 2\t\t\t%LVinfo2%%%NULL%
set /A address=%address%+36 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=34 && call :getlfnloop ! call :getentityID "%address%" "35" &; set "LVinfo3=%result%" && set result= &; if not exist LVinfo3 && set LVinfo3=EMPTY ! set "LVinfo3=%LVinfo3%" &; echo -e $[0x08]    108$[] LV Info 3\t\t\t%LVinfo3%%%NULL%
set /A address=%address%+36 &; call :read8 %address% %target% &; set /A implemID=%result%&0xffffffffffffffff && set result= &; if %implemID%==0 && set implemID=EMPTY
if not "%implemID%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result=
if not exist NULL &; echo -n -e $[0x08]    12C$[] LV Info Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \t\tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]        000$[] Flags\t\t\t%flags%%%NULL% && echo -e $[0x08]        001$[] Developer Identifier\t%identifi%%%NULL%
set /A address=%address%+24 &; if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffffff0000>>16 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]        018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]            000$[] OS Class\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]            001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]            002$[] Implementation Use Area %IIbytes%%%NULL% && endlocal ! echo -e $[0x08]            018$[] Identifier Suffix\tEMPTY%NULL% && endlocal
set /A address=%address%+8 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=128 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==128 && echo -e $[0x08]    14C$[] Implementation Use\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=128 %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=127 %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]    14C$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t\t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=128 %target%%%NULL%
if %hexview%==Y && set /A len=%address%-%voladdr% &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
endlocal && set volsec=%volsec% && set "found=%found%" && set UDFrev=%UDFrev% &; goto :eof
:partitiondescriptor
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFPD=%UDFPD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set UDFSsec=%UDFSsec% && set PREVIOUS=%PREVIOUS% && set accessT0=%accessT0% && set accessTp=%accessTp% && set PTstart0=%PTstart0% && set PTstart=%PTstart% && set PTlen0=%PTlen0% && set PTlength=%PTlength% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set tagID=%tagID% && set "NULL=%NULL%"
if not exist Q && if exist NULL && if not %PREVIOUS%==N &; if %UDFPD%==Y && set NULL= ! if %UDFVDS%==Y && set NULL=
set /A voladdr=%volsec% * %LBsize% &; if %tagID%==0x5 && set "NULL= > nul" ! set "NULL=%NULL%" &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Partition Descriptor:\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFPD " && set show= && set show2=
set TGTsec=2 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=512 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A vdseqnr=%result%&0xffffffff && set result= &; echo -e $[0x08]010$[] Volume Descriptor Sequence Number\t%vdseqnr%%%NULL%
set /A address=%voladdr%+20 &; if not exist NULL &; call :read %address% %target% &; set /A PTflags=%result%&0xffff && set result= &; echo -e $[0x08]014$[] Partition Flags\t\t\t%PTflags%%%NULL%
set /A address=%voladdr%+22 &; call :read %address% %target% &; set /A PTnum=%result%&0xffff && set result= &; echo -e $[0x08]016$[] Partition Number\t\t\t%PTnum%%%NULL%
set /A address=%voladdr%+24 &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "Pcontent=%result%" &; if not exist Pcontent && set Pcontent=EMPTY
if "%Pcontent%"=="EMPTY" && echo -e $[0x08]018$[] Partition Contents\t\t\t%Pcontent%%%NULL% ! echo -e $[0x08]018$[] Partition Contents%NULL%
if not "%Pcontent%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL%
if not "%Pcontent%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    001$[] Content Identifier\t\t%Pcontent%%%NULL%
set /A address=%address%+24 &; if not "%Pcontent%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A PCsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%PCsuffix%&0xffff && set /A PCflags=%PCsuffix%&0xff0000>>16 &; if not %PCsuffix%==0 && echo -e $[0x08]    018$[] Partition Identifier Suffix%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] Partition Flags\t\t%PCflags%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
set /A address=%voladdr%+56 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=128 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==128 && set PTcontnt=EMPTY
if not exist NULL && echo -n -e $[0x08]038$[] Partition Contents Use%NULL% &; if "%PTcontnt%"=="EMPTY" && echo -e \t\t%PTcontnt%%%NULL% ! echo%NULL%
if not "%PTcontnt%"=="EMPTY" &; if not exist NULL &; call :read %address% %target% &; set /A UspaceTb=%result%&0xffffffff && set result= &; echo -e $[0x08]    000$[] Unallocated Space Table\t\t%UspaceTb%%%NULL%
if not "%PTcontnt%"=="EMPTY" &; set /A address=%address%+8 &; if not exist NULL &; call :read %address% %target% &; set /A UspaceBm=%result%&0xffffffff && set result= &; echo -e $[0x08]    008$[] Unallocated Space Bitmap\t%UspaceBm%%%NULL%
if not "%PTcontnt%"=="EMPTY" &; set /A address=%address%+8 &; if not exist NULL &; call :read %address% %target% &; set /A PTintgTb=%result%&0xffffffff && set result= &; echo -e $[0x08]    010$[] Partition Integrity Table\t%PTintgTb%%%NULL%
if not "%PTcontnt%"=="EMPTY" &; set /A address=%address%+8 &; if not exist NULL &; call :read %address% %target% &; set /A FspaceTb=%result%&0xffffffff && set result= &; echo -e $[0x08]    018$[] Freed Space Table\t\t%FspaceTb%%%NULL%
if not "%PTcontnt%"=="EMPTY" &; set /A address=%address%+8 &; if not exist NULL &; call :read %address% %target% &; set /A FspaceBm=%result%&0xffffffff && set result= &; echo -e $[0x08]    020$[] Freed Space Bitmap\t\t%FspaceBm%%%NULL%
set /A address=%voladdr%+184 &; call :read %address% %target% &; set /A accessTP=%result%&0xffffffff && set result= &; echo -n -e $[0x08]0B8$[] Access Type\t\t\t\t%accessTP%%%NULL% &; if %accessTP%==0 && echo -e \t     pseudo-overwritable%NULL% ! if %accessTP%==1 && echo -e \t     read-only%NULL% ! if %accessTP%==2 && echo -e \t     write-once%NULL% ! if %accessTP%==3 && echo -e \t     rewritable%NULL% ! if %accessTP%==4 && echo -e \t     overwritable%NULL% ! echo%NULL% &; if not exist accessTp &; if not exist accessT0 && set accessT0=%accessTP% && set accessTP= ! set accessT1=%accessTP% && set accessTP=
set /A address=%voladdr%+188 &; call :read %address% %target% &; set /A ptstart=%result%&0xffffffff && set result= &; set /a len=%ptstart% && set /A ptstaddr=%ptstart% * %LBsize% &; set "show=%ptstart%            " && set "show2=%len%            " &; echo -e $[0x08]0BC$[] Partition Start Location\t\t%show:~0,12% %show2:~0,12% %ptstaddr%%%NULL% && set show= && set show2= && set len= &; if not exist PTstart &; if not exist PTstart0 && set PTstart0=%ptstart% && set ptstart= ! set PTstart1=%ptstart% && set ptstart=
set /A address=%voladdr%+192 &; call :read %address% %target% &; set /A ptlength=%result%&0xffffffff && set result= &; set /a len=%ptlength% &; set "show=%ptlength%            " &; echo -e $[0x08]0C0$[] Partition Length\t\t\t%show:~0,12% %len%%%NULL% &; if not exist PTlength &; if not exist PTlen0 && set PTlen0=%ptlength% && set ptlength= ! set PTlen1=%ptlength% && set ptlength=
set /A address=%voladdr%+196 &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "implemID=%result%" &; if not exist implemID && set implemID=EMPTY
if not exist NULL &; echo -n -e $[0x08]0C4$[] Implementation Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Developer Identifier\t\t%implemID%%%NULL%
set /A address=%address%+24 &; if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffffff0000>>16 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal
set /A address=%voladdr%+228 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=128 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==128 && echo -e $[0x08]0E4$[] Implementation Use\t\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=128 %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=127 %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]0E4$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t\t\t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=128 %target%%%NULL%
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=356 %target%%%NULL%
endlocal && set volsec=%volsec% && set "found=%found%" && set UDFrev=%UDFrev% && set UDFSsec=%UDFSsec% && set accessT0=%accessT0% && set accessT1=%accessT1% && set PTstart0=%PTstart0% && set PTstart1=%PTstart1% && set PTlen0=%PTlen0% && set PTlen1=%PTlen1%
goto :eof
:logicalvolumedescriptor
call Fn.11 "%found%" "UDFPD " |; if not exist volsecLV && set volsecLV=%volsec% && set seqlen=%SEQlen% ! set volsecLV=%volsecLV% &; set /A address=%volsec% + 1 * %LBsize% &; call :read %address% %target% &; set /A tagID=%result%&0xffff && set result= &; if %tagID%==0x5 && set /A volsec=%volsec%+1 && call :partitiondescriptor && set /A volsec=%volsec%+1 && set address= && set tagID= && set /a seqlen=%seqlen%-1 && goto :logicalvolumedescriptor ! if %seqlen%>=1 && set /a seqlen=%seqlen%-1 && set address= && set tagID= && set /A volsec=%volsec%+1 && goto :logicalvolumedescriptor ! set volsec=%volsecLV% && set volsecLV= && set address= && set tagID= && set seqlen=
if not exist accessTp &; if %accessT1%==3 && set accessTp=%accessT1% && set PTstart=%PTstart1% && set PTlength=%PTlen1% && set /A UDFSsec=%PTstart1%+%PTlen1% ! if exist accessT0 && set accessTp=%accessT0% && set PTstart=%PTstart0% && set PTlength=%PTlen0% && set /A UDFSsec=%PTstart0%+%PTlen0% && if exist PTlen1 && set /A UDFSsec=%PTstart0%+%PTlen0%+%PTlen1% ! set accessT0=%accessT0% &; if exist accessTp && set accessT0= && set accessT1= && set PTstart0= && set PTstart1= && set PTlen0= && set PTlen1=
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFLVD=%UDFLVD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set UDFVAT=%UDFVAT% && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set SPARETBL=%SPARETBL% && set mdbase=%mdbase% && set FSDloc=%FSDloc% && set Q=%Q% && set "NULL=%NULL%"
if not exist Q && if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFLVD " && set NULL= ! call Fn.11 "%find%" "UDFVDS " && set NULL=
set /A voladdr=%volsec% * %LBsize%
if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Logical Volume Descriptor:\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFLVD " && set show= && set show2=
if not exist DIRsize && set DIRsize=%LBsize% ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%DIRsize% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip= && set TGTsec=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; if not exist NULL &; call :read %address% %target% &; set /A vdseqnr=%result%&0xffffffff && set result= &; echo -e $[0x08]010$[] Volume Descriptor Sequence Number\t%vdseqnr%%%NULL%
set /A address=%voladdr%+20 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=62 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "63" "WRAP" &; set "DScharS=%result%" && set result= &; if not exist DScharS && set DScharS=EMPTY ! set "DScharS=%DScharS%" &; echo -e $[0x08]014$[] Descriptor Charset\t\t\t%DScharS%%%NULL%
set /A address=%voladdr%+84 &; if not exist NULL &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "127" "WRAP" &; set "volumeID=%result%" && set result= &; if not exist volumeID && set volumeID=EMPTY ! set "volumeID=%volumeID%" &; echo -e $[0x08]054$[] Logical Volume Identifier\t\t%volumeID%%%NULL%
set /A address=%voladdr%+212 &; call :read %address% %target% &; set /A LBlcsize=%result%&0xffffffff && set result= &; set /a len=%LBlcsize% &; echo -e $[0x08]0D4$[] Logical Block Size\t\t\t%LBlcsize%\t      %len%%%NULL% &; if not %LBlcsize%==%LBsize% && echo $[0xF0] Variable LBsize is %LBsize%!
set /A address=%voladdr%+216 &; call :read8 %address% %target% &; set /A domainID=%result%&0xffffffffffffffff && set result= &; if %domainID%==0 && set domainID=EMPTY
if not "%domainID%"=="EMPTY" && call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identiDM=%result%" && set result=
if not exist NULL &; echo -n -e $[0x08]0D8$[] Domain Identifier%NULL% &; if "%domainID%"=="EMPTY" && echo -e \t\t\t%domainID%%%NULL% ! echo%NULL%
if not "%domainID%"=="EMPTY" && echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Domain Identifier\t\t%identiDM%%%NULL%
if not "%domainID%"=="EMPTY" && set /A address=%address%+24 &; setlocal && call :read8 %address% %target% &; set /A DMsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%DMsuffix%&0xffff && set /A DMflags=%DMsuffix%&0xff0000>>16 &; if not %DMsuffix%==0 && echo -e $[0x08]    018$[] Domain Identifier Suffix%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] Domain Flags\t\t%DMflags%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
set /A address=%voladdr%+248 &; echo -e $[0x08]0F8$[] Logical Volume Content Use%NULL%
call :read %address% %target% &; set /A LBNlen=%result%&0xffffffff && set result= &; set /a len=%LBNlen% &; set "show=%LBNlen%            " &; echo -e $[0x08]    000$[] Directory Record Length\t\t%show:~0,12% %len%%%NULL% && set show=
set /A address=%address%+4 &; call :read %address% %target% &; set /A LBNloc=%result%&0xffffffff && set result= &; set /a len=%LBNloc% &; set "show=%LBNloc%            " &; echo -e $[0x08]    004$[] Directory Record Location\t%show:~0,12% %len%%%NULL% && set show=
set /A address=%address%+4 &; call :read %address% %target% &; set /A PTrefnum=%result%&0xffff && set result= &; echo -e $[0x08]    008$[] Partition Reference Number\t%PTrefnum%%%NULL%
if not exist FSDloc && set FSDloc=%LBNloc% && set LBNloc= && set LBNlen=
set /A address=%address%+2 &; if not exist NULL &; call :read8 %address% %target% &; set /A implmuse=%result%&0xffffffffffff && set result= &; set /a len=%implmuse% &; set "show=%implmuse%            " &; echo -e $[0x08]    00A$[] Implementation Use\t\t%show:~0,12%%%NULL% && set show=
set /A address=%voladdr%+264 &; call :read %address% %target% &; set /A mapTblen=%result%&0xffffffff && set result= &; set /a len=%mapTblen% &; set "show=%mapTblen%            " &; echo -e $[0x08]108$[] Map Table Length\t\t\t%show:~0,12% %len%%%NULL%
set /A address=%voladdr%+268 &; call :read %address% %target% &; set /A numPTmap=%result%&0xffffffff && set result= &; set /a len=%numPTmap% &; echo -e $[0x08]10C$[] Number of Partition Maps\t\t%numPTmap%%%NULL%
set /A address=%voladdr%+272 &; call :read8 %address% %target% &; set /A implemID=%result%&0xffffffffffffffff &; if %implemID%==0 && set implemID=EMPTY
if not "%implemID%"=="EMPTY" && if not exist NULL && call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result=
if not exist NULL &; echo -n -e $[0x08]110$[] Implementation Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if not exist NULL &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Developer Identifier\t\t%identifi%%%NULL%
if not "%implemID%"=="EMPTY" && set /A address=%address%+24 &; if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffffff0000>>16 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal
set /A address=%voladdr%+304 && if not exist NULL &; raw cat --skip=%address% --locate=\x00 --length=128 %target% > nul &; set /a zeros=%@retval% ;; if not exist NULL &; if %zeros%==128 && echo -e $[0x08]130$[] Implementation Use\t\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=128 %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=127 %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]130$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t\t\t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=128 %target%%%NULL%
if not exist NULL && echo -e $[0x08]1B0$[] Integrity Sequence Extent\t%NULL%
set /A address=%voladdr%+432 &; call :read %address% %target% &; set /A ISlength=%result%&0xffffffff && set result= &; set /a len=%ISlength% && set "show=%ISlength%            " &; echo -e $[0x08]    000$[] Sequence Length\t\t\t%show:~0,12% %len%%%NULL% && set show=
set /A address=%address%+4 &; call :read %address% %target% &; set /A ISstart=%result%&0xffffffff && set result= &; set /a len=%ISstart% &; set /A ISstaddr=%ISstart% * %LBsize% &; set "show=%ISstart%            " && set "show2=%len%            " &; echo -e $[0x08]    004$[] Sequence Start Location\t\t%show:~0,12% %show2:~0,12% %ISstaddr%%%NULL% && set show= && set show2=
if %numPTmap%>=2 && set n=0 ! set n= &; set num=0x1B8
set /A address=%voladdr%+440
:partitionmaploop
call :read %address% %target% &; set /A PTmapTp=%result%&0xff && set result= &; set address0=%address%
if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; echo -e $[0x08]%HEX%$[] Partition Map %n% %NULL% && set HEX=
echo -e $[0x08]    000$[] Partition Map Type\t\t%PTmapTp%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A PTmaplen=%result%&0xff && set result= &; set /a len=%PTmaplen% &; set "show=%PTmaplen%            " &; echo -e $[0x08]    001$[] Partition Map Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %PTmapTp%==1 && set /A address=%address%+1 &; call :read %address% %target% &; set /A vdseqnr=%result%&0xffff && set result= &; set /a len=%vdseqnr% &; echo -e $[0x08]    002$[] Volume Sequence Number\t\t%vdseqnr%%%NULL%
if %PTmapTp%==1 && set /A address=%address%+2 &; call :read %address% %target% &; set /A PTnum=%result%&0xffff && set result= &; set /a len=%PTnum% &; set "show=%PTnum%            " &; echo -e $[0x08]    004$[] Partition Number\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %PTmapTp%==1 && set /A address=%address%+2 && if exist n && set /a n=%n%+1 &; if not %n%>=%numPTmap% && set /A mapTblen=%mapTblen%-6 &; if %mapTblen%>=6 && set /A num=%num%+6 && set /A address=%address0%+%PTmaplen% && set address0= && set PTmaplen= && goto :partitionmaploop
if %PTmapTp%==2 && set /A address=%address%+3 &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result= &; if exist identifi && echo -e $[0x08]    004$[] Partition Type Identifier%NULL% && echo -e $[0x08]        000$[] Flags\t\t\t%flags%%%NULL% && echo -e $[0x08]        001$[] Type Identifier\t\t%identifi%%%NULL% ! echo -e $[0x08]    004$[] Partition Type Identifier\t\tEMPTY%NULL%
if %PTmapTp%==2 && set /A address=%address%+24 &; setlocal && call :read8 %address% %target% &; set /A PTsuffix=%result%&0xffffffffffffffff && set result= &; set /A UDFrev=%PTsuffix%&0xffff && set /A OSclass=%PTsuffix%&0xff0000>>16 && set /A OSID=%PTsuffix%&0xff000000>>24 &; call :OStypes &; if not %PTsuffix%==0 && echo -e $[0x08]        018$[] Identifier Suffix%NULL% && echo -e $[0x08]            000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]            002$[] OS Class\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]            003$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]        018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
if %PTmapTp%==2 &; if "%identifi%"=="*UDF Virtual Partition" && set PTTYPE=virtual && set VIRTUALP=Y ! if "%identifi%"=="*UDF Sparable Partition" && set PTTYPE=sparable && set SPAREBLP=Y ! if "%identifi%"=="*UDF Metadata Partition" && set PTTYPE=metadata && set METADATP=Y
if %PTmapTp%==2 && set /A address=%address%+8 &; call :read %address% %target% &; set /A VOLsqnum=%result%&0xffff && set result= &; set /a len=%VOLsqnum% &; echo -e $[0x08]    024$[] Volume Sequence Number\t\t%VOLsqnum%%%NULL%
if %PTmapTp%==2 && set /A address=%address%+2 &; call :read %address% %target% &; set /A PTnumber=%result%&0xffff && set result= &; set /a len=%PTnumber% &; set "show=%PTnumber%            " &; echo -e $[0x08]    026$[] Partition Number\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %PTmapTp%==2 && if %PTTYPE%==virtual && set VPTsect=%PTmaplen% set /A address=%address%+24 && if exist n && set /a n=%n%+1 &; if not %n%>=%numPTmap% && set /A mapTblen=%mapTblen%-40 &; if %mapTblen%>=6 && set /A num=%num%+6 && set PTTYPE= && set /A address=%address0%+%PTmaplen% && set address0= && set PTmaplen= && goto :partitionmaploop
if %PTmapTp%==2 && if %PTTYPE%==sparable && set /A address=%address%+2 &; call :read %address% %target% &; set /A packlen=%result%&0xffff &; set /a len=%packlen% &; set "show=%packlen%            " &; echo -e $[0x08]    028$[] Packet Length\t\t\t%show:~0,12% %len%%%NULL% && if not exist SPacklen && set SPacklen=%packlen%
if %PTmapTp%==2 && if %PTTYPE%==sparable && set /A address=%address%+2 &; call :read %address% %target% &; set /A N_ST=%result%&0xff &; echo -e $[0x08]    02A$[] Number of Sparing Tables\t%N_ST%%%NULL% && set n_st=1 && set num_st=0x2C && set /A address=%address%+2
:partitionsparingtableloop
if %PTmapTp%==2 && if %PTTYPE%==sparable &; call :read %address% %target% &; set /A SpTbsize=%result%&0xffffffff &; set /a len=%SpTbsize% &; set "show=%SpTbsize%            " &; echo -e $[0x08]    0%num_st:~2%$[] Size of each Sparing Table %n_st%\t%show:~0,12% %len%%%NULL% && set /A num_st=%num_st%+4 && if not exist SPTBsize && set /A SPTBsize=%SpTbsize%-56 && set /A SpTbsize=%SpTbsize%-56
if %PTmapTp%==2 && if %PTTYPE%==sparable && set /A address=%address%+4 &; call :read %address% %target% &; set /A SPTloc=%result%&0xffffffff &; set /a len=%SPTloc% &; set "show=%SPTloc%            " &; echo -e $[0x08]    0%num_st:~2%$[] Locations of Sparing Tables %n_st%\t%show:~0,12% %len%%%NULL% && set /A num_st=%num_st%+4 &; if not exist SPTloc0 && set SPTloc0=%SPTloc% ! if not %SPTBsize%<=%SpTbsize% && set /A SPTBsize=%SpTbsize%-56 && set SPTloc0=%SPTloc%
if %PTmapTp%==2 && if %PTTYPE%==sparable && set /A address=%address%+4 &; set /a n_st=%n_st%+1 &; if %n_st%<=%N_ST% && set /A num=%num%+8 && goto :partitionsparingtableloop
if %PTmapTp%==2 && if %PTTYPE%==sparable &; set /A address=-4 * %N_ST% + 16 + %address% &; if exist n && set /a n=%n%+1 &; if not %n%>=%numPTmap% && set /A mapTblen=-4 * %N_ST% + %mapTblen% - 48 &; if %mapTblen%>=6 && set /A num=%num%+%PTmaplen% && set PTTYPE= && set /A address=%address0%+%PTmaplen% && set address0= && set PTmaplen= && goto :partitionmaploop
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+2 &; call :read %address% %target% &; set /A metafLBN=%result%&0xffffffff && set result= &; set /a len=%metafLBN% &; set "show=%metafLBN%            " &; echo -e $[0x08]    028$[] Metadata File Location\t\t%show:~0,12% %len%%%NULL% && set show=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+4 &; call :read %address% %target% &; set /A metamLBN=%result%&0xffffffff && set result= &; set /a len=%metamLBN% &; set "show=%metamLBN%            " &; echo -e $[0x08]    02C$[] Metadata Mirror Location\t%show:~0,12% %len%%%NULL% && set show=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+4 &; call :read %address% %target% &; set /A metabLBN=%result%&0xffffffff && set result= &; set /a len=%metabLBN% &; if %metabLBN%==0xFFFFFFFF && set len=N/A ! set len=%len% &; set "show=%metabLBN%            " &; echo -e $[0x08]    030$[] Metadata Bitmap Location\t%show:~0,12% %len%%%NULL% && set show= && set len= && if %metabLBN%==0xFFFFFFFF && set metabLBN=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+4 &; call :read %address% %target% &; set /A allocUsz=%result%&0xffffffff && set result= &; set /a len=%allocUsz% &; set "show=%allocUsz%            " &; echo -e $[0x08]    034$[] Allocation Unit Size\t\t%show:~0,12% %len%%%NULL% && set t=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+4 &; call :read %address% %target% &; set /A alignUsz=%result%&0xffff && set result= &; set /a len=%alignUsz% &; echo -e $[0x08]    038$[] Alignment Unit Size\t\t%alignUsz%\t     %len%%%NULL% && set len=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+2 &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; set /a bit0==%flags%&0x1 &; echo -n -e $[0x08]    03A$[] Flags\t\t\t\t%flags%%%NULL% &; if %bit0%==1 && echo -e $[0x0F]\t     Duplicate Metadata Flag%NULL% ! echo%NULL% &; set bit0=
if %PTmapTp%==2 && if %PTTYPE%==metadata && set /A address=%address%+6 &; if exist n && set /a n=%n%+1 &; if not %n%>=%numPTmap% && set /A mapTblen=%mapTblen%-64 &; if %mapTblen%>=6 && set /A num=%num%+%PTmaplen% && set PTTYPE= && set /A address=%address0%+%PTmaplen% && set address0= && set PTmaplen= && goto :partitionmaploop
if %hexview%==Y && set /A len=%address%-%voladdr% &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
if %SPTloc0%>=1 && if not exist SPARETBL && set SPARETBL=F
if not exist VIRTUALP if not exist SPARETBL if not exist METADATP |; set FSDLOC=%FSDloc%
endlocal && set result=%result% && set ISstart=%ISstart% && set ISlength=%ISlength% && set FSDloc=%FSDloc% && set "found=%found%" && set VIRTUALP=%VIRTUALP% && set SPARETBL=%SPARETBL% && set METADATP=%METADATP% && set UDFrev=%UDFrev% && set metafLBN=%metafLBN% && set metamLBN=%metamLBN% && set metabLBN=%metabLBN% && set SPTBsize=%SPTBsize% && set SPTloc=%SPTloc0% && set SPacklen=%SPacklen% && set FSDLOC=%FSDLOC%
if exist SPARETBL &; if exist NULL && call Fn.11 "%find%" "UDFSPT " && set volsec=%SPTloc% && call :sparingtable ! if not exist NULL && set volsec=%SPTloc% && echo%NULL% && call :sparingtable ! if %SPARETBL%==F && set volsec=%SPTloc% && echo%NULL% && call :sparingtable ! set SPARETBL=%SPARETBL% &; set SPTloc= &; if %SPARETBL%==N && set SPTBsize= && set SPacklen= &; if exist FSDLOC && if not exist METADATP && set FSDloc=%FSDLOC% && set FSDLOC=
if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist FSDLOC && if not exist METADATP && set FSDloc= && call :sparingtable "FSDloc" "%FSDLOC%" &; if exist FSDloc && set FSDLOC= && goto :eof ! echo Physical Block Address for of File Set Descriptor not found in Sparing Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%)%NULL% && set result=0 && goto :eof
if not %VIRTUALP%==Y &; if %UDFVAT%==Y && echo Virtual Partition not found && set result=0 && goto :eof ! goto :eof
if not %UDFVAT%==Y && if exist VAtarget && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if exist FSDLOC && call :virtualallocationtable "FSDloc" "%FSDLOC%" &; if exist FSDloc && goto :eof ! echo Logical Block Address for File Set Descriptor not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%) && set result=0 && goto :eof
setlocal
if not exist Q &; if not exist NULL && if not %PREVIOUS%==N && echo ! set "NULL=%NULL%" &; if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFVAT " && set NULL= && call Fn.11 "%find%" "UDFLVD " && echo
if %UDFrev%>=0x150 &; set /A volsec=%CDtotsec% - 1 &; set /A voladdr=%volsec% * %LBsize% &; call :read %voladdr% %target% &; set /A nxttagID=%result%&0xffff && set result= &; if not %nxttagID%==261 && if not %nxttagID%==266 && echo $[0xF0]Sector %volsec% does start with %nxttagID%, NOT with 261/ 266 of File Entry/ Extended File Entry with Virtual Allocation Table ICB not found%NULL% && endlocal && set result=0 && set FSDloc= && goto :eof
if %UDFrev%>=0x150 &; if not %nxttagID%==261 if not %nxttagID%==266 |; call :fileentry &; if not %fileTp%==0 && if not %fileTp%==248 && echo File Entry for Virtual Allocation Table (UDF v1.50) not found && endlocal && set result=0 && set FSDloc= && goto :eof
if %UDFrev%>=0x150 &; if %allocdTp%==3 && if exist mdtarget && set target=%mdtarget% && set mdtarget= ! if exist VAtarget && set target=%VAtarget%
if %UDFrev%>=0x150 &; if not %allocdTp%==3 && if not exist mdtarget && if not exist VAtarget &; set /a TGTsec=%LBNlen%/0x200 &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; set /A CDskip=%LBNloc% + %PTstart% * %LBsize% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%LBNlen% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set /A mdbase=%mdbase%+%TGTsec%+0x1F && set VATaddr=0 && set VATsize=%LBNlen% && set LBNlen= && set TGTsec= && set /A volsec=%CDskip%/%LBsize%
if %UDFrev%>=0x150 &; if not %allocdTp%==3 && if exist mdtarget && if not exist VAtarget &; set /a TGTsec=%LBNlen%/0x200 &; calc %LBNlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; raw dd if=%mdtarget% of=(md)%mdbase%+%TGTsec% bs=1 count=%LBNlen% > nul && set target=(md)%mdbase%+%TGTsec% && set /A mdbase=%mdbase%+%TGTsec%+0x1F && set /A VATaddr=0 && set VATsize=%LBNlen% && set mdtarget= && set /A volsec=%LBNloc%+%PTstart% && set LBNloc= && set LBNlen= && set TGTsec=
if %UDFrev%==0x150 &; set address=%VATaddr% &; raw cat --skip=%address% --locate=*UDF\x20Virtual\x20All --length=%VATsize% %target% > nul &; set /A valladdr=%?% &; set /A address=%valladdr%+16 &; raw cat --skip=%address% --locate=oc\x20Tbl --length=6 %target% > nul && set /A valladdr=%valladdr%-1
if not exist Q && if not exist NULL && echo
if %UDFrev%>=0x200 && if %fileTp%==248 &; call :VATheader &; if not exist VATprLBN && echo Virtual Allocation Table not found (UDF >= v2.00) && endlocal && set result= && goto :eof
if %UDFrev%==0x150 &; if not exist valladdr && echo $[0xF0]Virtual Allocation Table not found%NULL% && endlocal && set result=0 && set FSDloc= && goto :eof
if %UDFrev%==0x150 && set /A address=%valladdr% &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= && set /A address=%address% &; call :getentityID "%address%" "23" &; set "EntityID=%result%" && set result=
if %UDFrev%==0x150 && set /A address=%address%+24 &; call :read %address% %target% &; set /A UDsuffix=%result%&0xffffffff && set result= &; set /A UDFrev=%UDsuffix%&0xffff && set /A OSclass=%UDsuffix%&0xff0000>>16 && set /A OSID=%UDsuffix%&0xff000000>>24 &; call :OStypes
if %UDFrev%==0x150 && set /A address=%address%+8 &; call :read %address% %target% &; set /A VATprLBN=%result%&0xffffffff && set result=
if %UDFrev%==0x150 && if not exist NULL &; set HEX=00%valladdr:~2% &; echo -e Footer of Virtual Allocation Table && echo -e $[0x08]%HEX:~-3,3%$[] Entity Identifier%NULL% && set HEX= && echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Identifier\t\t\t%EntityID%%%NULL%
if %UDFrev%==0x150 && if not exist NULL && call :OStypes &; if not %UDFrev%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        003$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL%
if %UDFrev%==0x150 && if not exist NULL &; set /A address=%valladdr%+0x20 &; set HEX=00%address:~2% && set "show=%VATprLBN%            " && set /a len=%VATprLBN% &; if not %VATprLBN%==0xFFFFFFFF && echo -e $[0x08]%HEX:~-3,3%$[] Previous VAT Location\t\t%show:~0,12% %len%%%NULL% && set HEX= ! echo -e $[0x08]%HEX:~-3,3%$[] Previous VAT Location\t\t0xFFFFFFFF   NONE%NULL% && set HEX=
if %UDFrev%==0x150 && if %hexview%==Y && raw cat --hex --skip=%valladdr% --length=0x24 %target%%%NULL%
if exist VATaddr && if exist VATsize && if not exist NULL && set "found=%found%UDFVAT "
endlocal && set VAtarget=%target% && set VATaddr=%VATaddr% && set VATsize=%VATsize% && set "found=%found%" && set VATprLBN=%VATprLBN% && set UDFrev=%UDFrev% && set mdbase=%mdbase%
if %VIRTUALP%==Y && if %UDFrev%>=0x150 && if exist VATaddr && if exist VATsize && if exist FSDLOC && set FSDloc= && call :virtualallocationtable "FSDloc" "%FSDLOC%" &; if not exist FSDloc && echo Logical Block Address for File Set Descriptor not found in Virtual Allocation Table (UDF v%UDFrev:~2,1%.%UDFrev:~3,2%) && set result=0 ! set FSDLOC=
goto :eof
:sparingtable
setlocal
if not "%~2"=="" && if exist SPtarget && if exist SPTBsize && if exist SPacklen && if exist PTstart &; set /A SPNloc=%~2/%SPacklen% &; set /A SPNloc=%SPNloc% * %SPacklen% &; set /A SPremain=%~2-%SPNloc% &; set SPNloc=00000000%SPNloc:~2% &; set SPNloc=\x%SPNloc:~-2,2%\x%SPNloc:~-4,2%\x%SPNloc:~-6,2%\x%SPNloc:~-8,2% && set SPskip=0 && set SPlength=%SPTBsize%
:sparingtableloop
if exist SPNloc && if %SPlength%>=8 &; raw cat --skip=%SPskip% --locate=%SPNloc% --length=%SPlength% --number=1 %SPtarget% > nul &; set /A SPfound=%?% &; if %SPfound:~-1,1%==0 if %SPfound:~-1,1%==8 |; calc %SPfound% % 8 &; set /A SPfound=%SPfound%+8-%@retval% &; raw cat --skip=%SPfound% --locate=%SPNloc% --length=4 %SPtarget% > nul |; set /A SPlength=%SPTBsize%-%SPfound%-8 && set /A SPskip=%SPfound%+8 && set SPfound= &; goto :sparingtableloop
if exist SPNloc &; if exist SPfound if not %SPfound%>=%SPTBsize% |; endlocal && set %~1=%~2 && goto :eof
if exist SPNloc && set /A address=%SPfound%+4 &; call :read %address% %SPtarget% &; set /A SBNloc=%result%&0xffffffff-%PTstart%+%SPremain% &; echo %0 Redirecting Bad Sector: Sparing Table Result: %~1=%~2 => SBNloc=%SBNloc% && endlocal && set %~1=%SBNloc% && goto :eof
if not exist NULL && if not %PREVIOUS%==N && set "found=%found%UDFSPT "
if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFSPT " && set "found=%found%UDFSPT " && if not exist Q && set NULL=
set /A voladdr=%volsec% * %LBsize% && if not exist NULL && set /a len=%volsec% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Sparing Table:\t\t\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set show= && set show2=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; if not exist NULL && call :read %address% %target% &; set /a flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "sptablID=%result%" && set result= &; echo -e $[0x08]010$[] Sparing Identifier%NULL% && echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Identifier\t\t\t%sptablID%%%NULL%
set /A address=%address%+24 && if not exist NULL &; if exist sptablID && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A UDFrev=%IIsuffix%&0xffff && set /A OSclass=%IIsuffix%&0xff0000>>16 && set /A OSID=%IIsuffix%&0xff000000>>24 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]        000$[] UDF Revision\t\t%UDFrev%%%NULL% && echo -e $[0x08]        002$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        003$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && endlocal && set UDFrev=%UDFrev% ! echo -e $[0x08]    018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal && set UDFrev=%UDFrev%
set /A address=%voladdr%+48 &; call :read %address% %target% &; set /A RT_L=%result%&0xffff && set result= &; set /a len=%RT_L% &; set "show=%RT_L%            " &; echo -e $[0x08]030$[] Reallocation Table Length\t\t%show:~0,12% %len%%%NULL%
set /A address=%voladdr%+52 &; call :read %address% %target% &; set /A sqnumber=%result%&0xffffffff && set result= &; set /a len=%sqnumber% &; set "show=%sqnumber%            " &; echo -e $[0x08]034$[] Sequence Number\t\t\t%show:~0,12% %len%%%NULL% && set show= &; if %sqnumber%>=1 && set SPARETBL=Y
if %hexview%==Y && if not exist NULL && set /A len=8 * %RT_L% + 56 &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
if %SPARETBL%==F && if %sqnumber%==0 && set /A skipstHD=%voladdr%+56 && set /A len=8 * %RT_L% &; raw cat --hex --skip=%skipstHD% --locate=\xFF\xFF\xFF\xFF --length=%len% %target% > nul &; set /A retval=%@retval% ;; if %SPARETBL%==F && if %sqnumber%==0 &; if %retval%==%RT_L% && set SPARETBL=N ! set SPARETBL=Y
if not exist SPtarget && if %SPARETBL%==Y && set /A SPTlen=8 * %RT_L% &; set /a TGTsec=%SPTlen%/0x200 &; calc %SPTlen% % 0x200 && set /a TGTsec=%TGTsec%+1 ! set TGTsec=%TGTsec% &; set /A CDskip=%voladdr%+56 &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%SPTlen% skip=%CDskip% > nul && set SPtarget=(md)%mdbase%+%TGTsec% && set /A mdbase=%mdbase%+%TGTsec%+0x1F
endlocal && set SPARETBL=%SPARETBL% && set SPtarget=%SPtarget% && set mdbase=%mdbase% && set "found=%found%" && goto :eof
:VATheader
setlocal
if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFPVT " && if not exist Q && set NULL=
set /a len=%volsec% && set /A address=%volsec% * %LBsize% &; if exist CDskip && set /A address=%address%+%CDskip% ! set address=%address% &; set "show=%volsec%            " &; set "show2=%len%            " &; echo -e Virtual Allocation Table:\t\t%show:~0,12% %show2:~0,12% %address%%%NULL% && set len= && set show= && set show2=
if exist VAtarget && set /A voladdr=0 ! set /A voladdr=%VATaddr%
set /A address=%voladdr% &; call :read %address% %target% &; set /A VAheader=%result%&0xffff && set result= &; set /a len=%VAheader% &; set "show=%VAheader%            " &; echo -e $[0x08]000$[] Length of Header\t\t\t%show:~0,12% %len%%%NULL% && set len= && set show=
set /A address=%voladdr%+2 &; call :read %address% %target% &; set /A L_IU=%result%&0xffff && set result= &; set /a len=%L_IU% &; set "show=%L_IU%            " &; %echo -e $[0x08]002$[] Length of Implementation Use\t%show:~0,12% %len%%%NULL% && set len= && set show=
set /A address=%voladdr%+4 &; if not exist NULL && call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%>=10 && set /A skipzero=%address%+2 && set namelen=126 && call :getlfnloop "WRAP" ! call :getentityID "%address%" "127" "WRAP" &; set "volumeID=%result%" && set result= &; echo -e $[0x08]004$[] Logical Volume Identifier\t\t%volumeID%%%NULL%
set /A address=%voladdr%+132 &; call :read %address% %target% &; set /A VATprLBN=%result%&0xffffffff && set result= &; set /a len=%VATprLBN% &; set "show=%VATprLBN%            " &; if %VATprLBN%==0xFFFFFFFF && set len=N/A ! set len=%len% &; echo -e $[0x08]084$[] Previous VAT Location\t\t%show:~0,12% %len%%%NULL% && set len= && set show=
set /A address=%voladdr%+136 &; call :read %address% %target% &; set /A fileFIDs=%result%&0xffffffff && set result= &; set /a len=%fileFIDs% &; set "show=%fileFIDs%            " &; echo -e $[0x08]088$[] Number of file FIDs\t\t\t%show:~0,12% %len%%%NULL% && set len= && set show=
set /A address=%voladdr%+140 &; call :read %address% %target% &; set /A dirFIDs=%result%&0xffffffff && set result= &; set /a len=%dirFIDs% &; set "show=%dirFIDs%            " &; echo -e $[0x08]08C$[] Number of non-Parent Directory FIDs\t%show:~0,12% %len%%%NULL% && set len= && set show=
set /A address=%voladdr%+144 &; call :read %address% %target% &; set /A MnUDFrRv=%result%&0xffff && set result= &; echo -e $[0x08]090$[] Minimum UDF Read Revision\t\t%MnUDFrRv%%%NULL% && set UDFREV=%MnUDFrRv%
set /A address=%voladdr%+146 &; call :read %address% %target% &; set /A MnUDFwRv=%result%&0xffff && set result= &; echo -e $[0x08]092$[] Minimum UDF Write Revision\t\t%MnUDFwRv%%%NULL%
set /A address=%voladdr%+148 &; call :read %address% %target% &; set /A MxUDFwRv=%result%&0xffff && set result= &; echo -e $[0x08]094$[] Maximum UDF Write Revision\t\t%MxUDFwRv%%%NULL%
set /A address=%voladdr%+152 && if %L_IU%>=1 &; raw cat --skip=%address% --locate=\x00 --length=%L_IU% %target% > nul &; set /A zeros=%@retval% ;; if %L_IU%>=1 &; if not %zeros%==%L_IU% && echo -e $[0x08]098$[] Implementation Use%NULL% ! echo -e $[0x08]098$[] Implementation Use\t\t\tEMPTY%NULL% && set implemID=EMPTY
if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL &; call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "devlprID=%result%" && set result= &; echo -e $[0x08]    000$[] Flags\t\t\t\t%flags%%%NULL% && echo -e $[0x08]    001$[] Last Write Identifier\t\t%devlprID%%%NULL%
set /A address=%address%+24 &; if %L_IU%>=1 && if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffff0000>>16 &; call :OStypes &; if %IIbytes%==0 && set IIbytes=EMPTY ! set IIbytes=%IIbytes% &; if not %IIsuffix%==0 && echo -e $[0x08]    018$[] Identifier Suffix%NULL% && echo -e $[0x08]        000$[] OS Class\t\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]        001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]        002$[] Implementation Use Area\t%IIbytes%%%NULL% && endlocal ! echo -e $[0x08]    018$[] Identifier Suffix\t\t\tEMPTY%NULL% && endlocal
if %hexview%==Y && set /A hexlen=%VAheader% &; raw cat --hex --skip=%voladdr% --length=%hexlen% %target%%%NULL%
endlocal && set /A VATaddr=152+%L_IU% && set /A VATsize=%VATsize%-152-%L_IU% && set VATprLBN=%VATprLBN% && set UDFrev=%UDFREV% && set /a numfiles=%fileFIDs% && set /a numdirs=%dirFIDs%
goto :eof
:virtualallocationtable
setlocal && set * && set target=%VAtarget% && set VATaddr=%VATaddr% && set VATsize=%VATsize% && set hexview=%hexview% && set mdbase=%mdbase%
set /A address=%~2 * 4 + %VATaddr% &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; if %result%==0xFFFFFFFF && set result=%~2
endlocal && set %~1=%result% && goto :eof
:unallocatedspacedescriptor
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFUSD=%UDFUSD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFUSD " && if not exist Q && set NULL= ! call Fn.11 "%find%" "UDFVDS " && if not exist Q && set NULL= ! endlocal && goto :eof
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Unallocated Space Descriptor:\t\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFUSD " && set show= && set show2=
set /a TGTsec=%DIRsize%/0x200+1 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%LBsize% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; call :read %address% %target% &; set /A vdseqnr=%result%&0xffffffff && set result= &; echo -e $[0x08]010$[] Volume Descriptor Sequence Number\t%vdseqnr%%%NULL%
set /A address=%voladdr%+20 &; call :read %address% %target% &; set /A N_AD=%result%&0xffffffff && set result= &; set "show=%N_AD%            " &; set /a len=%N_AD% &; echo -e $[0x08]014$[] Number of Allocation Descriptors\t%show:~0,12% %len%%%NULL%
if %N_AD%>=2 && set n=1 ! set n= &; set num=0x18
set /A address=%voladdr%+24
:unallocatedspacedescriptorloop
call :read8 %address% %target% &; set /A numUSdcr=%result%&0xffffffffffffffff &; if %numUSdcr%==0 && set numUSdcr=EMPTY
if %num%>=0x100 && set HEX=%num:~2% ! if %num%>=0x10 && set HEX=0%num:~2% ! if %num%>=0x0 && set HEX=00%num:~2% &; echo -n -e $[0x08]%HEX%$[] Allocation Descriptor %n%%%NULL% && set HEX= &; if "%numUSdcr%"=="EMPTY" && echo -e \t\t%numUSdcr%%%NULL% ! echo %NULL%
if not "%numUSdcr%"=="EMPTY" && call :read %address% %target% &; set /A LSNlen=%result%&0xffffffff && set result= &; set /a len=%LSNlen% &; set "show=%LSNlen%            " &; echo -e $[0x08]    000$[] Extent Length\t\t\t%show:~0,12% %len%%%NULL% && set t=
set /A address=%address%+4 &; if not "%numUSdcr%"=="EMPTY" && call :read %address% %target% &; set /A LSNloc=%result%&0xffffffff && set result= &; set /a len=%LSNloc% &; set "show=%LSNloc%            " &; echo -e $[0x08]    004$[] Extent Location\t\t\t%show:~0,12% %len%%%NULL% && set t=
if exist n && set /a n=%n%+1 &; if %n%<=%N_AD% && set /A num=%num%+8 && set /A address=%address%+4 && goto :unallocatedspacedescriptorloop ! set n= && set num=
if %hexview%==Y && set /A len=%address%+4-%voladdr% &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
endlocal && set volsec=%volsec% && set "found=%found%" && goto :eof
:logicalvolumeintegrityDS
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFLVID=%UDFLVID% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFLVID " && if not exist Q && set NULL= ! call Fn.11 "%find%" "UDFVDS " && if not exist Q && set NULL=
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Logical Volume Integrity Descriptor:\t%show:~0,12% %show2:~0,12% %voladdr%%%NULL% && set "found=%found%UDFLVID " && set t= && set t2=
if not exist DIRsize && set DIRsize=%LBsize% ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%DIRsize% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
set /A address=%voladdr%+16 &; call :timestamp "%address%" "12" &; set "Rdatime=%datetime%" &; if not exist Rdatime && set Rdatime=EMPTY ! set "Rdatime=%Rdatime%" &; echo -e $[0x08]010$[] Recording Date and Time\t\t%Rdatime%%%NULL%
set /A address=%voladdr%+28 &; call :read %address% %target% &; set /A integrTp=%result%&0xffffffff && set result= &; set /a len=%integrTp% &; echo -e $[0x08]01C$[] Integrity Type\t\t\t%integrTp%%%NULL%
set /A address=%voladdr%+32 &; call :read %address% %target% &; set /A NIextent=%result%&0xffffffffffffffff && set result= &; if %NIextent%==0 && set NIextent=EMPTY
if not exist NULL && echo -n -e $[0x08]020$[] Next Integrity Extent%NULL% &; if "%NIextent%"=="EMPTY" && echo -e \t\t%NIextent%%%NULL% ! echo%NULL%
if not "%NIextent%"=="EMPTY" && set /A address=%voladdr%+32 &; call :read %address% %target% &; set /A Nintlen=%result%&0xffffffff && set result= &; set /a len=%Nintlen% &; set "show=%Nintlen%            " &; echo -e $[0x08]    000$[] Next Integrity Length\t\t%show:~0,12% %len%%%NULL% && set show=
if not "%NIextent%"=="EMPTY" && set /A address=%address%+4 &; call :read %address% %target% &; set /A Nintloc=%result%&0xffffffff && set result= &; set /a len=%Nintloc% &; set "show=%Nintloc%            " &; echo -e $[0x08]    004$[] Next Integrity Start Location\t%show:~0,12% %len%%%NULL% && set show=
if not exist NULL && echo -e $[0x08]028$[] Logical Volume Contents Use%NULL%
set /A address=%voladdr%+40 &; call :read8 %address% %target% &; set /A uniqID=%result%&0xffffffffffffffff && set result= &; echo -e $[0x08]    000$[] Unique ID\t\t\t%uniqID%%%NULL%
set /A address=%voladdr%+72 &; call :read %address% %target% &; set /A N_P=%result%&0xffffffff && set result= &; set /a NUM_P=%N_P% && set /a len=%N_P% &; echo -e $[0x08]048$[] Number of Partitions\t\t%N_P%%%NULL%
set /A address=%voladdr%+76 &; call :read %address% %target% &; set /A L_IU=%result%&0xffffffff && set result= &; set /A LEN_IU=%L_IU% && set /a len=%L_IU% &; set "show=%L_IU%            " &; echo -e $[0x08]04C$[] Length of Implementation Use\t%show:~0,12% %len%%%NULL%
if %N_P%>=2 && set n=0 ! set n=\x20
:PTnumsloop
if %N_P%>=1 && set /A address=%address%+4 &; call :read %address% %target% &; set /A FspaceTb=%result%&0xffffffff && set result= &; set /a len=%FspaceTb% &; set "show=%FspaceTb%            " &; if %FspaceTb%==0xFFFFFFFF && set len=unknown ! set len=%len% &; echo -e $[0x08]050$[] Free Space Table %n%\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
if %N_P%>=1 && set /A address=%address%+4 &; call :read %address% %target% &; set /A sizeTb=%result%&0xffffffff && set result= &; set /a len=%sizeTb% &; set "show=%sizeTb%            " &; if %sizeTb%==0xFFFFFFFF && set len=unknown ! set len=%len% &; echo -e $[0x08]054$[] Size Table %n%\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /a N_P=%N_P%-1 && set /a n=%n%+1 &; if %N_P%>=1 && goto :PTnumsloop
set /A address=%address%+4 &; call :read8 %address% %target% &; set /A implemID=%result%&0xffffffffffffffff && set result= &; if %implemID%==0 && set implemID=EMPTY
if not "%implemID%"=="EMPTY" && if %L_IU%>=1 && call :read %address% %target% &; set /A flags=%result%&0xff && set result= &; call :getentityID "%address%" "23" &; set "identifi=%result%" && set result=
if %L_IU%>=1 && if not exist NULL &; echo -e $[0x08]058$[] Implementation Use%NULL% &; echo -n -e $[0x08]    000$[] Implementation Identifier%NULL% &; if "%implemID%"=="EMPTY" && echo -e \tEMPTY%NULL% ! echo%NULL%
if not "%implemID%"=="EMPTY" && if %L_IU%>=1 && if not exist NULL &; echo -e $[0x08]        000$[] Flags\t\t\t%flags%%%NULL% && echo -e $[0x08]        001$[] Last Write Identifier\t%identifi%%%NULL%
if %L_IU%>=1 && set /A address=%address%+24 &; if not exist NULL &; if not "%implemID%"=="EMPTY" && if not exist NULL && setlocal && call :read8 %address% %target% &; set /A IIsuffix=%result%&0xffffffffffffffff && set result= &; set /A OSclass=%IIsuffix%&0xff && set /A OSID=%IIsuffix%&0xff00>>8 && set /A IIbytes=%IIsuffix%&0xffffffffffff0000>>16 &; call :OStypes &; if not %IIsuffix%==0 && echo -e $[0x08]        018$[] Identifier Suffix\t\t%NULL% && echo -e $[0x08]            000$[] OS Class\t\t%OSclass%\t     %osclass%%%NULL% && echo -e $[0x08]            001$[] OS Identifier\t\t%OSID%\t     %osid%%%NULL% && echo -e $[0x08]            002$[] Implementation Use Area %IIbytes%%%NULL% && endlocal ! echo -e $[0x08]        018$[] Identifier Suffix\t\tEMPTY%NULL% && endlocal
if %L_IU%>=1 && set /A address=%address%+8 &; call :read %address% %target% &; set /A numfiles=%result%&0xffffffff && set result= &; set /a len=%numfiles% &; set "show=%numfiles%            " &; echo -e $[0x08]    020$[] Number of Files\t\t\t%show:~0,12% %len%%%NULL% && set show=
if %L_IU%>=1 && set /A address=%address%+4 &; call :read %address% %target% &; set /A numdirs=%result%&0xffffffff && set result= &; set /a len=%numdirs% &; set "show=%numdirs%            " &; echo -e $[0x08]    024$[] Number of Directories\t\t%show:~0,12% %len%%%NULL% && set show=
if %L_IU%>=1 &; set /A address=%address%+4 &; call :read %address% %target% &; set /A MnUDFrRv=%result%&0xffff && set result= &; echo -e $[0x08]    028$[] Minimum UDF Read Revision\t%MnUDFrRv%%%NULL%
if %L_IU%>=1 && if not exist NULL &; set /A address=%address%+2 &; call :read %address% %target% &; set /A MnUDFwRv=%result%&0xffff && set result= &; echo -e $[0x08]    02A$[] Minimum UDF Write Revision\t%MnUDFwRv%
if %L_IU%>=1 && if not exist NULL &; set /A address=%address%+2 &; call :read %address% %target% &; set /A MxUDFwRv=%result%&0xffff && set result= &; echo -e $[0x08]    02C$[] Maximum UDF Write Revision\t%MxUDFwRv%%%NULL%
if %L_IU%>=1 && if not exist NULL && set /a L_IU=%L_IU%-46 && set /A address=%address%+2 &; if %L_IU%>=1 &; raw cat --skip=%address% --locate=\x00 --length=%L_IU% %target% > nul &; set /a zeros=%@retval% ;; if %L_IU%>=1 && if not exist NULL &; if %zeros%==%L_IU% && echo -e $[0x08]    02E$[] Implementation Use\t\tEMPTY%NULL% ! set impleuse=NOTEMPTY
if %impleuse%==NOTEMPTY && set impleuse= && call :read %address% %target% &; set /A ASCII=%result%&0xffff && set result= && set /A skipzero=%address%+1 &; set ASCII=0000%ASCII:~2% &; set ASCII=0x%ASCII:~-4,2%%%ASCII:~-2,2% &; if 0x%ASCII:~-2,2%>=0x20 && raw cat --skip=%address% --length=%L_IU% %target% | set impleuse= ! if 0x%ASCII:~-4,2%>=0x20 && raw cat --skip=%skipzero% --length=%L_IU% %target% | set impleuse= ! set impleuse= &; echo -e -n $[0x08]    02E$[] Implementation Use%NULL% &; if exist impleuse && echo -e \t\t%impleuse%%%NULL% ! echo && raw cat --hex --skip=%address% --length=%L_IU% %target%%%NULL%
if %hexview%==Y && set /A len=%NUM_P% * 8 + 80 + %LEN_IU% &; raw cat --hex --skip=%voladdr% --length=%len% %target%%%NULL%
endlocal && set volsec=%volsec% && set "found=%found%" && set /a numfiles=%numfiles% && set /a numdirs=%numdirs%
goto :eof
:terminatingdescriptor
if "%find%"=="UDFTD " &; call Fn.11 "%found%" "UDFTD " && echo%NULL%
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set "target=%target%" && set UDFTD=%UDFTD% && set UDFVDS=%UDFVDS% && set "find=%find%" && set "found=%found%" && set UDFrev=%UDFrev% && set PREVIOUS=%PREVIOUS% && set hexview=%hexview% && set mdbase=%mdbase% && set Q=%Q% && set "NULL=%NULL%"
if exist NULL && if not %PREVIOUS%==N &; call Fn.11 "%find%" "UDFTD " && if not exist Q && set NULL= ! call Fn.11 "%find%" "UDFVDS " && if not exist Q && set NULL= ! endlocal && goto :eof
set /A voladdr=%volsec% * %LBsize% &; if not exist NULL &; set /a len=%volsec% &; set "show=%volsec%            " && set "show2=%len%            " &; echo -e Terminating Descriptor:\t\t\t%show:~0,12% %show2:~0,12% %voladdr% && set "found=%found%UDFTD " && set show= && set show2=
set TGTsec=2 &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=512 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e $[0x08]000$[] Descriptor Tag%NULL% &; call :tagID "%voladdr%"
if not exist found && set result=0
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=32 %target%%%NULL%
endlocal && set volsec=%volsec% && set result=%result% && set "found=%found%" && goto :eof
:tagID
setlocal && set "target=%target%" && set space=%space% && set "NULL=%NULL%"
set address=%~1 &; if not exist space && set ts=\t ! set ts=%ts% &; call :read %address% %target% &; set /A tagID=%result%&0xffff && set result= &; set /a len=%tagID% &; echo -e $[0x08]%space%    000$[] Tag Identifier\t%ts%\t%tagID%\t     %len%%%NULL% && set len=
set /A address=%address%+2 && if not exist NULL &; call :read %address% %target% &; set /A descrver=%result%&0xffff && set result= &; echo -e $[0x08]%space%    002$[] Descriptor Version\t\t%descrver%%%NULL%
set /A address=%address%+2 && if not exist NULL &; call :read %address% %target% &; set /A tgchksum=%result%&0xff && set result= &; set /a len=%tgchksum% &; echo -e $[0x08]%space%    004$[] Tag Checksum\t%ts%\t%tgchksum%\t     %len%%%NULL% && set len=
set /A address=%address%+2 && if not exist NULL &; call :read %address% %target% &; set /A tgserial=%result%&0xffff && set result= &; set /a len=%tgserial% &; echo -e $[0x08]%space%    006$[] Tag Serial Number\t\t%tgserial%%%NULL%
set /A address=%address%+2 && if not exist NULL &; call :read %address% %target% &; set /A descrCRC=%result%&0xffff && set result= &; echo -e $[0x08]%space%    008$[] Descriptor CRC\t\t%ts%%%descrCRC%%%NULL%
set /A address=%address%+2 && if not exist NULL &; call :read %address% %target% &; set /A dsCRClen=%result%&0xffff && set result= &; set /a len=%dsCRClen% &; if not exist space && echo -e $[0x08]    00A$[] Descriptor CRC Length\t\t%dsCRClen%\t     %len%%%NULL% ! echo -e $[0x08]%space%    00A$[] Descriptor CRC Length\t%dsCRClen%\t     %len%%%NULL% && set len=
set /A address=%address%+2 &; call :read %address% %target% &; set /A taglocat=%result%&0xffffffff && set result= &; set /a len=%taglocat% &; set "show=%taglocat%            " && set "show2=%len%            " &; echo -e $[0x08]%space%    00C$[] Tag Location\t%ts%\t%show:~0,12% %show2:~0,12%%%NULL% && set show= && set show2=
endlocal && set taglocat=%taglocat% && goto :eof
:OStypes
if %OSclass%==0 && set osclass=Undefined ! if %OSclass%==1 && set osclass=DOS ! if %OSclass%==2 && set osclass=OS/2 ! if %OSclass%==3 && set "osclass=Macintosh OS" ! if %OSclass%==4 && set osclass=UNIX ! if %OSclass%==5 && set "osclass=Windows 9x" ! if %OSclass%==6 && set "osclass=Windows NT" ! if %OSclass%==7 && set osclass=OS/400 ! if %OSclass%==8 && set osclass=BeOS ! if %OSclass%==9 && set "osclass=Windows CE"
if %OSclass%==0 && set osid=Undefined ! if %OSclass%==1 && if %OSID%==0 && set "osid=DOS/Windows 3.x" ! if %OSclass%==2 && if %OSID%==0 && set "osid=OS/2" ! if %OSclass%==3 && if %OSID%==0 && set "osid=Macintosh OS 9 and older" ! if %OSclass%==3 && if %OSID%==1 && set "osid=Macintosh OS X and later" ! if %OSclass%==4 && if %OSID%==0 && set "osid=UNIX Generic" ! if %OSclass%==4 && if %OSID%==1 && set "osid=UNIX IBM AIX" ! if %OSclass%==4 && if %OSID%==2 && set "osid=UNIX SUN OS / Solaris" ! if %OSclass%==4 && if %OSID%==3 && set "osid=UNIX HP/UX" ! if %OSclass%==4 && if %OSID%==4 && set "osid=UNIX Silicon Graphics Irix" ! if %OSclass%==4 && if %OSID%==5 && set "osid=UNIX Linux" ! if %OSclass%==4 && if %OSID%==6 && set "osid=UNIX MKLinux" ! if %OSclass%==4 && if %OSID%==7 && set "osid=UNIX FreeBSD" ! if %OSclass%==4 && if %OSID%==8 && set "osid=UNIX NetBSD" ! if %OSclass%==5 && if %OSID%==0 && set "osid=Windows 9x (98/ME too)" ! if %OSclass%==6 && if %OSID%==0 && set "osid=Windows NT generic" ! if %OSclass%==7 && if %OSID%==0 && set "osid=OS/400" ! if %OSclass%==8 && if %OSID%==0 && set "osid=BeOS generic" ! if %OSclass%==9 && if %OSID%==0 && set "osid=Windows CE generic"
goto :eof
:UDFbridge
raw cat --skip=0x8001 --locatei=CD001 --length=5 %target% > nul && set ISO9660=Y ! raw cat --skip=0x8001 --locatei=CD-XA --length=5 %target% > nul && echo Identifier 'CD-XA' found ! set ISO9660=N
if %ISO9660%==Y &; raw cat --skip=0x9000 --locatei=\x00BEA01\x01\x00 --length=0x8000 %target% > nul &; set BEAaddr=%?% &; calc %BEAaddr% % %LBsize% && set UDFbridg=N ! set UDFbridg=Y
if %UDFbridg%==Y && set /A address=%BEAaddr%+%LBsize% && set BEAaddr= &; raw cat --skip=%address% --locatei=\x00NSR02\x01\x00 --length=8 %target% > nul || raw cat --skip=%address% --locatei=\x00NSR03\x01\x00 --length=8 %target% > nul || set UDFbridg=N
if %UDFbridg%==Y && set /A address=%address%+%LBsize% &; raw cat --skip=%address% --locatei=\x00TEA01\x01\x00 --length=8 %target% > nul || set UDFbridg=N
if %UDFbridg%==Y &; if not exist ISOVDS if not exist UDFVDS |; call Fn.11 "%found%" "UDFED " || set "found=%found%UDFED "
goto :eof
:getisofileinfo
call :read 0x8050 %target% &; set /A result=%result%&0xffffffff &; if %result%==0 && echo Primary Volume Descriptor is damaged or fake && set reuse=N && goto :eof ! set result=
set /A voladdr=%volsec% * %LBsize% &; set /A address=%voladdr%+0x9C+0x1B &; call :read %address% %target% &; set /A Igapsize=%result%&0xff && set result= &; if not %Igapsize%==0 && echo Interleaved Media currently not supported && set result=0 && goto :eof
if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; set /A address=%voladdr%+0x7 &; call :read %address% %target% &; set /a flagbit0=%result%>>0&1 && set result=
if not exist cdfile2 if not exist cdfile3 if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR2 if not exist ISODIRR3 |; if %flagbit0%==0 && set /A address=%voladdr%+0x58 &; raw cat --skip=%address% --length=3 %target% | set result= &; if "%result%"=="%/@" && set "level=UCS-2 Level 1" ! if "%result%"=="%/C" && set "level=UCS-2 Level 2" ! if "%result%"=="%/E" && set "level=UCS-2 Level 3" ! set level=
if not exist cdfile2 |; if not exist level && set "cdfile=%cdfile2%" && set cdfile2= && set flagbit0= ! set flagbit0=
if not exist cdfile3 |; if not exist level && set result= && goto :eof ! set "cdfile2=%cdfile3%" && set cdfile3= && set flagbit0=
if not exist ISODIR2 |; if not exist level && set "ISODIR=%ISODIR2%" && set ISODIR2= && set flagbit0= ! set flagbit0=
if not exist ISODIR3 |; if not exist level && set "ISODIR=%ISODIR3%" && set ISODIR3= && set flagbit0= ! set flagbit0=
if not exist ISODIRR2 |; if not exist level && set "ISODIRR=%ISODIRR2%" && set ISODIRR2= && set flagbit0= ! set flagbit0=
if not exist ISODIRR3 |; if not exist level && set "ISODIRR=%ISODIRR3%" && set ISODIRR3= && set flagbit0= ! set flagbit0=
set /A address=%voladdr%+0x9C &; call :read %address% %target% &; set /A DIRlen=%result%&0xff && set result=
set /A address=%voladdr%+0x9E &; call :read %address% %target% &; set /A LBAdir=%result%&0xffffffff && set result=
set /A address=%voladdr%+0xA6 &; call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff && set result=
if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; set /a volsec=%LBAdir% && set /A voladdr=%LBAdir% * %LBsize% - 0x9C &; set space= &; set cdfile= && set cdfile2= && set NULL= && set "t3=\t" && call :directoryrecord &; set result=1 && goto :eof
echo -n > (md)0x300+1 && raw write (md)0x300+1 \x0A > nul && pause --wait=0 %cdpath% >> (md)0x300+1 && raw cat --locate=/ --replace=\x0A (md)0x300+1 &; set /a depth=%@retval% &; if not %depth%<=8 && if not exist level && if not exist DEEP && echo Directory depth above 8 && set result=0 && goto :eof ! if not %depth%<=18 && echo Directory depth above 18 && set result=0 && goto :eof ! if %depth%==1 && set lastdir='/'
if exist depth && if %depth%>=2 && raw cat (md)0x300+1 | call :findlastisodirectory &; if %result%==0 && goto :eof
if "%cdname:~-2,2%"=="**" && set "cdname=%cdname:~0,-1%"
if "%cdext:~-2,2%"=="**" && set "cdext=%cdext:~0,-1%"
if "%cdname%"=="*" && set "Nasterix=*" && set folder=
if "%Nasterix%"=="*" && if exist subdir && if exist namepos && set /A address=%namepos%-0x21-0x9C &; set /A address=%address%+0x9E &; call :read %address% %target% &; set /A LBAlast=%result%&0xffffffff && set result= &; set /A address=%address%-0x9E+0xA6 &; call :read %address% %target% &; set /A SIZElast=%result%&0xffffffff && set result=
if not "%Nasterix%"=="*" &; if "%cdname:~-1,1%"=="*" && set "asterix=*" && set "cdname=%cdname:~0,-1%" && set folder= ! set folder=Y
if "%cdext:~-1,1%"=="*" && set "Easterix=*" && set "cdext=%cdext:~0,-1%" && set folder=
call Fn.11 "%cdname%" "\x20" &; set SPACE=Y && echo -e "%cdname%" | set cdname="
if %SPACE%==Y && set "cdname=%cdname:~2,-1%"
set SPACE= && call Fn.11 "%cdext%" "\x20" &; set SPACE=Y && echo -e "%cdext%" | set cdext="
if %SPACE%==Y && set "cdext=%cdext:~2,-1%"
set SPACE= &; set /A address=%LBAdir% * %LBsize% && set search=%DIRsize% && set subdir= &; if not exist Nasterix if not exist asterix if not exist Easterix || set folder= ! set folder=Y
if not exist GO &; set /A voladdr=%namepos%-0x21-0x9C &; set /A volsec=%voladdr%/%LBsize%
if "%cdfile:~-1,1%"=="/" && set ISOROOT=Y ! if "%cdfile2:~-1,1%"=="/" && set ISOROOT2=Y ! if "%cdfile3:~-1,1%"=="/" && set ISOROOT3=Y &; set space= && set t3=\t && set /A voladdr=%LBAdir% * %LBsize% - 0x9C && set ISODRR=YES && set depth= && call :directoryrecord &; set result=1 && goto :eof
if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if not "%ISODIR:~-1,1%"=="/" if not "%ISODIR2:~-1,1%"=="/" if not "%ISODIR3:~-1,1%"=="/" if not "%ISODIRR:~-1,1%"=="/" if not "%ISODIRR2:~-1,1%"=="/" if not "%ISODIRR3:~-1,1%"=="/" || set GO=DIR ! set GO=FILE
if %GO%==DIR && if %DIR%==Y && set /A address=%voladdr%+0x9E &; call :read %address% %target% &; set /A LBAdir=%result%&0xffffffff && set result= &; set /A address=%voladdr%+0xA6 &; call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff && set result=
if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; set /a volsec=%LBAdir% && set /A voladdr=%LBAdir% * %LBsize% - 0x9C && set depth= && set space=\x20\x20\x20\x20 && set cdfile= && set cdfile2= && set cdfile3= && set subdir= && call :directoryrecord &; if %FOUND%==Y && set result=1 ! if not exist Q && set result=0 && echo -e \t File not found ! set result=0 &; goto :eof
call Fn.11 "%find%" "ISODRR" && set ISODRR=Y
set space= && set t3=\t && set /A voladdr=%LBAdir% * %LBsize% - 0x9C && set DR=Y && set depth= && set subdir= && set GO=FILE && call :directoryrecord &; if not %FOUND%==Y && if not exist Q && echo -e \t File not found && set result=0 && goto :eof ! if not %FOUND%==Y && if %Q%==Y && set result=0 && goto :eof ! set /A namepos=%LBAdir% * %LBsize% + %address2% && set result=1
set "target=%CDtarget%"
goto :eof
:findlastisodirectory
if "%~1"=="" && set folder= && set "lastdir=%subdir%" && goto :eof
set "subdir=%~1" && set folder=Y &; call Fn.11 "%subdir%" "\x20" &; set SPACE=Y && echo -e "%subdir%" | set subdir="
if %SPACE%==Y && set "subdir=%subdir:~2,-1%"
set SPACE= && set "subdir=%subdir%" &; set /a sublen=%@retval%
set /A address=%LBAdir% * %LBsize% && set search=%DIRsize%
set namepos= && call :findisodirectoryrecord &; if %result%==0 && goto :eof
shift
goto :findlastisodirectory
:findisodirectoryrecord
set LBAlast=%LBAdir% && set SIZElast=%DIRsize% && set lastpos=%namepos%
set /A voladdr=%address%-0x9C && set DR=N && set depth= && call :directoryrecord &; if not %FOUND%==Y && echo Directory '%subdir%' not found && set result=0 && goto :eof
set /A namepos=%LBAlast% * %LBsize% + %address2%
set FOUND= && goto :eof
:checkisodirectoryrecord
setlocal
set /A CHECKLEN=%LEN_DR%-%LEN_FI% &; if not %CHECKLEN%>=0x21 && endlocal && set result=0 && goto :eof ! set CHECKLEN=
set /A address=%namepos%-0x21+2 &; call :read %address% %target% &; set /A chkbytA=%result%&0xffffffff && set /A address=%address%+4 &; call :readbe %address% %target% &; set /A chkbytB=%result%&0xffffffff &; if not %chkbytA%==%chkbytB% && endlocal && set result=0 && goto :eof ! set chkbytA= && set chkbytB= && set result=
set /A address=%address%+4 &; call :read %address% %target% &; set /A chkbytC=%result%&0xffffffff && set /A address=%address%+4 &; call :readbe %address% %target% &; set /A chkbytD=%result%&0xffffffff &; if not %chkbytC%==%chkbytD% && endlocal && set result=0 && goto :eof ! set chkbytC= && set chkbytD= && set result=
set /A address=%address%+4+7+1+1+1 &; call :read %address% %target% &; set /A chkbytE=%result%&0xffff && set /A address=%address%+2 &; call :readbe %address% %target% &; set /A chkbytF=%result%>>16 &; if not %chkbytE%==%chkbytF% && endlocal && set result=0 && goto :eof ! set chkbytE= && set chkbytF= && set result=
set /A address=%address%+2 &; call :read %address% %target% &; set /A chkbytG=%result%&0xff &; if not %chkbytG%==%LEN_FI% && set result=0 ! set chkbytG= && set result=
endlocal && set result=%result% && goto :eof
:getlfnloop
set /A skiplfn=%skipzero% &; raw cat --skip=%skiplfn% --length=1 %target% | set result=%result%
set /A skipzero=%skiplfn%+0x2 && set /a namelen=%namelen%-0x2 &; if %namelen%>=1 && goto :getlfnloop
set namelen= && set skiplfn= && set skipzero= && set "lfnfile=%result%" &; if "%~1"=="" && set lfnfile=
:getlfnnospaceloop
if "%result:~-1,1%"==" " && set "result=%result:~0,-1%" && goto :getlfnnospaceloop
set "result=%result%" &; set /a IDlen=%@retval%
if %~1==WRAP &; if %IDlen%>=40 && if %IDlen%<=78 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39%"
if %~1==WRAP &; if %IDlen%>=79 && if %IDlen%<=117 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%"
if %~1==WRAP &; if %IDlen%>=118 && if %IDlen%<=156 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%"
if %~1==WRAP &; if %IDlen%>=157 && if %IDlen%<=195 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%"
if %~1==WRAP &; if %IDlen%>=196 && if %IDlen%<=234 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%\n\t\t\t\t\t%result:~195,39%"
if %~1==WRAP &; if %IDlen%>=235 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%\n\t\t\t\t\t%result:~195,39%\n\t\t\t\t\t%result:~234,39%"
set IDlen= && goto :eof
:getentityID
setlocal
set /A address=%~1+1
raw cat --skip=%address% --length=%~2 %target% | set result=
:getentityIDloop
if "%result:~-1,1%"==" " && set "result=%result:~0,-1%" && goto :getentityIDloop
set "result=%result%" &; set /a IDlen=%@retval% && if not "%~3"=="" && set "lfnfile=%result%"
if %~3==WRAP &; if %IDlen%>=40 && if %IDlen%<=78 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39%"
if %~3==WRAP &; if %IDlen%>=79 && if %IDlen%<=117 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%"
if %~3==WRAP &; if %IDlen%>=118 && if %IDlen%<=156 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%"
if %~3==WRAP &; if %IDlen%>=157 && if %IDlen%<=195 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%"
if %~3==WRAP &; if %IDlen%>=196 && if %IDlen%<=234 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%\n\t\t\t\t\t%result:~195,39%"
if %~3==WRAP &; if %IDlen%>=235 && set "result=%result:~0,39%\n\t\t\t\t\t%result:~39,39%\n\t\t\t\t\t%result:~78,39%\n\t\t\t\t\t%result:~117,39%\n\t\t\t\t\t%result:~156,39%\n\t\t\t\t\t%result:~195,39%\n\t\t\t\t\t%result:~234,39%"
endlocal && set "result=%result%" && set "lfnfile=%lfnfile%" && goto :eof
:systemuse
if %LEN_SU%<=3 &; if exist Nvoladdr && if exist NLEN_DR && if exist NLEN_SU && set voladdr=%Nvoladdr% && set LEN_DR=%NLEN_DR% && set LEN_SU=%NLEN_SU% && set Nvoladdr= && set NLEN_DR= && set NLEN_SU= ! set LEN_SU=0
if %LEN_SU%==0 && if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=%LEN_DR% %target%%%NULL%
if %LEN_SU%==0 && set result=1 && set "target=%CDtarget%" && goto :eof
set /A address=%voladdr%+%LEN_DR%-%LEN_SU%
raw cat --skip=%address% --length=2 %target% | set extensio=
if %extensio%==PX && set RR=Y && goto :rockridgePX ! if %extensio%==TF && set RR=Y && goto :rockridgeTF ! if %extensio%==NM && set RR=Y && goto :rockridgeNM ! if %extensio%==RR && set RR=Y && goto :rockridgeRR ! if %extensio%==PL && set RR=Y && goto :rockridgePL ! if %extensio%==PN && set RR=Y && goto :rockridgePN ! if %extensio%==SL && set RR=Y && goto :rockridgeSL ! if %extensio%==CL && set RR=Y && goto :rockridgeCL ! if %extensio%==RE && set RR=Y && goto :rockridgeRE ! if %extensio%==SF && set RR=Y && goto :rockridgeSF
if %extensio%==CE && goto :suspCE ! if %extensio%==PD && goto :suspPD ! if %extensio%==SP && goto :suspSP ! if %extensio%==ST && goto :suspST ! if %extensio%==ER && goto :suspER ! if %extensio%==ES && goto :suspES
set /A address=%address%+20 &; call :read %address% %target% &; set /A result=%result%&0xffff &; if %result%==0x4158 && set CDXA=Y && set result= ! set result=1 && set "target=%CDtarget%" && goto :eof
echo %0 CDXA=%CDXA%
set /A address=%address%-6 &; call :read %address% %target% &; set /A result=%result%&0xffffffff &; echo -e $[]    $[0x08]000$[] Owner ID\t\t\t\t%result%
set /A address=%address%+4 &; call :read %address% %target% &; set /A XAattrib=%result%&0xffff && set result= &; echo -e $[]    $[0x08]004$[] Attributes\t\t\t%XAattrib%
if not %XAattrib%==0 && setlocal && set * && set XAattrib=%XAattrib% && set "space=\x20\x20\x20\x20" && set "NULL=%NULL%" &; call :getudfbits "%XAattrib%" "Owner Read" "" "Owner execute" "" "Group read" "" "Group execute" "" "World read" "" "World execute" "File contains Form 1 sectors" "File contains Form 2 sectors" "File contains Interleaved sector" "CD-DA file" "Directory" &; endlocal
set /A address=%address%+2 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -n -e $[]    $[0x08]006$[] Signature Byte 1\t %result% &; if %result%==0x58 && echo -e \t\t\t'X' ! echo
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -n -e $[]    $[0x08]007$[] Signature Byte 2\t %result% &; if %result%==0x41 && echo -e \t\t\t'A' ! echo
set /A address=%address%+1 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[]    $[0x08]008$[] File Number\t\t\t%result%
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=%LEN_DR% %target%%%NULL%
set result=1 && set "target=%CDtarget%" && goto :eof
:suspCE
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%" && set LBsize=%LBsize% && set voladdr=%voladdr% && set hexview=%hexview% && set LEN_DR=%LEN_DR%
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENCE=%result%&0xff &; set /a len=%LENCE% && set "show=%LENCE%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A blckcntA=%result%&0xffffffff &; set /A blckcnta=%blckcntA% * %LBsize% &; set "show=%blckcntA%            " &; echo -e $[]    $[0x08]005$[] Block Location of Continua Area %show:~0,12% %blckcnta%%%NULL%
set /A address=%address%+8 &; call :read %address% %target% &; set /A offscntA=%result%&0xffffffff &; set /A offscnta=%offscntA% &; set "show=%offscntA%            " &; echo -e $[]    $[0x08]00D$[] Offset to Start of Continu Area %show:~0,12% %offscnta%%%NULL%
set /A address=%address%+8 &; call :read %address% %target% &; set /A lencntA=%result%&0xffffffff &; set /a len=%lencntA% && set "show=%lencntA%            " &; echo -e $[]    $[0x08]015$[] Length of the Continuation Area %show:~0,12% %len%%%NULL% && set show= && set len=
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=%LEN_DR% %target%%%NULL%
if %blckcntA%>=0x14 && set /A Nvoladdr=%blckcntA% * %LBsize% && set NLEN_SU=%lencntA% && set NLEN_DR=%lencntA%
endlocal && set /a LEN_SU=%LEN_SU%-%LENCE% && set Nvoladdr=%Nvoladdr% && set NLEN_DR=%NLEN_DR% && set NLEN_SU=%NLEN_SU%
goto :systemuse
:suspPD
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENPD=%result%&0xff &; set /a len=%LENPD% && set "show=%LENPD%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; if not exist NULL && call :read %address% %target% &; if%LENPD%>=8 && set /A paddarea=%result%&0xffffffff ! if %LENPD%>=7 && set /A paddarea=%result%&0xffffff ! if %LENPD%>=6 && set /A paddarea=%result%&0xffff ! set /A paddarea=%result%&0xff &; if %LENPD%>=5 && echo -e $[]    $[0x08]005$[] Padding Area\t\t\t%paddarea%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENPD%
goto :systemuse
:suspSP
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENSP=%result%&0xff &; set /a len=%LENSP% && set "show=%LENSP%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A chkbytA=%result%&0xff &; set /A address=%address%+1 &; call :read %address% %target% &; set /A chkbytB=%result%&0xff &; echo -e $[]    $[0x08]005$[] Check Bytes\t\t\t0x%chkbytA:~2%%%chkbytB:~2%\t     %chkbytA% %chkbytB%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A LEN_SKP=%result%&0xff &; set /a len=%LEN_SKP% && set "show=%LEN_SKP%            " &; echo -e $[]    $[0x08]007$[] Bytes Skipped\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
endlocal && set /a LEN_SU=%LEN_SU%-%LENSP%-%LEN_SKP%
goto :systemuse
:suspST
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENST=%result%&0xff &; set /a len=%LENST% && set "show=%LENST%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENST%
goto :systemuse
:suspER
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENER=%result%&0xff &; set /a len=%LENER% && set "show=%LENER%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A LENID=%result%&0xff &; set /a len=%LENID% && set "show=%LENID%            " &; echo -e $[]    $[0x08]005$[] Identifier Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A LENDES=%result%&0xff &; set /a len=%LENDES% && set "show=%LENDES%            " &; echo -e $[]    $[0x08]006$[] Descriptor Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A LENSRC=%result%&0xff &; set /a len=%LENSRC% && set "show=%LENSRC%            " &; echo -e $[]    $[0x08]007$[] Source Length\t\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A EXTVER=%result%&0xff &; set /a len=%EXTVER% &; echo -e $[]    $[0x08]008$[] Extension Version\t\t%EXTVER%%%NULL%
set /A address=%address%+1 &; raw cat --skip=%address% --length=%LENID% %target% | set EXTID= &; echo -e $[]    $[0x08]009$[] Extension Identifier\t\t%EXTID%%%NULL%
set result= && set /A address=%address%+%LENID% && set /a length=%LENDES% &; set /A ADDRESS=%address%-1 &; call :getentityID "%ADDRESS%" "%length%" "WRAP" &; call set "EXTDES=%^result%"
set result= && set ADDRESS= && if exist EXTDES && if not exist NULL && set /A BP=9+%LENID% &; if %LENDES%>=1 &; if %BP%<=0xF && set HEX=00%BP:~2% ! if %BP%<=0xFF && set HEX=0%BP:~2% ! set HEX=%BP:~2% &; echo -e $[]    $[0x08]%HEX%$[] Extension Descriptor\t\t%EXTDES%%%NULL% && set HEX=
if %LENDES%>=1 && set /A address=%address%+%LENDES% && set /A BP=9+%LENID%+%LENDES% ! set address=%address% && set /A BP=9+%LENID% &; if not exist NULL &; set result= && set /a length=%LENSRC% &; set /A ADDRESS=%address%-1 &; call :getentityID "%ADDRESS%" "%length%" "WRAP" &; call set "EXTSRC=%^result%"
if exist EXTSRC set ADDRESS= &; if %BP%<=0xF && set HEX=00%BP:~2% ! if %BP%<=0xFF && set HEX=0%BP:~2% ! set HEX=%BP:~2% &; echo -e $[]    $[0x08]%HEX%$[] Extension Source\t\t%EXTSRC%%%NULL% && set HEX=
endlocal && set /a LEN_SU=%LEN_SU%-%LENER%
goto :systemuse
:suspES
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     System Use Sharing Protocol%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENES=%result%&0xff &; set /a len=%LENES% && set "show=%LENES%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A extseq=%result%&0xff &; set /a len=%extseq% && set "show=%extseq%            " &; echo -e $[]    $[0x08]005$[] Extension Sequence\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
endlocal && set /a LEN_SU=%LEN_SU%-%LENST%
goto :systemuse
:rockridgeRR
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] In-use Indicator\t\t%extensio%\t     RockRidge Extension v1.09%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENRR=%result%&0xff &; set /a len=%LENRR% && set "show=%LENRR%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A flags=%result%&0xff &; echo -e $[]    $[0x08]005$[] Flags\t\t\t\t%flags%%%NULL%
call :getbits0-7 "%flags%"
if %bit0%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 0 = %bit0%  "PX" field\t\t\t     System Use Field recorded%NULL%
if %bit1%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 1 = %bit1%  "PN" field\t\t\t     System Use Field recorded%NULL%
if %bit2%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 2 = %bit2%  "SL" field\t\t\t     System Use Field recorded%NULL%
if %bit3%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 3 = %bit3%  "NM" field\t\t\t     System Use Field recorded%NULL%
if %bit4%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 4 = %bit4%  "CL" field\t\t\t     System Use Field recorded%NULL%
if %bit5%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 5 = %bit5%  "PL" field\t\t\t     System Use Field recorded%NULL%
if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 6 = %bit6%  "RE" field\t\t\t     System Use Field recorded%NULL%
if %bit7%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 7 = %bit7%  "TF" field\t\t\t     System Use Field recorded%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENRR%
goto :systemuse
:rockridgeSL
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENSL=%result%&0xff &; set /a len=%LENSL% && set "show=%LENSL%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; if not exist NULL && call :read %address% %target% &; set /A flags=%result%&0xff &; echo -e -n $[]    $[0x08]005$[] Flags\t\t\t\t%flags% &; if %flags%==1 && echo -e \t     CONTINUE ! echo -e \t     RESERVED
set /a remlen=%LENSL%-5 && set /A address=%address%+1
:rockridgeSLloop
if not exist NULL && call :read %address% %target% &; set /A compflag=%result%&0xff &; echo -e -n $[]    $[0x08]001$[] Component Flags\t\t\t%compflag% &; if %compflag%==1 && echo -e \t     CONTINUE ! if %compflag%==2 && echo -e \t     CURRENT ! if %compflag%==4 && echo -e \t     PARENT ! if %compflag%==8 && echo -e \t     ROOT ! echo -e \t     RESERVED
set /A address=%address%+1 &; if not exist NULL && call :read %address% %target% &; set /A LENCOMP=%result%&0xff &; set /a len=%LENCOMP% && set "show=%LENCOMP%            " &; echo -e $[]    $[0x08]002$[] Component Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; if not exist NULL && raw cat --skip=%address% --length=%LENCOMP% %target% | set CONTENT= &; echo -e $[]    $[0x08]003$[] Component Content\t\t%CONTENT%
if not exist NULL && set /a remlen=%remlen%-%LENCOMP%-2
if not exist NULL && if %remlen%>=3 && set /A address=%address%+%LENCOMP% && set compflag= && set LENCOMP= && goto :rockridgeSLloop
endlocal && set /a LEN_SU=%LEN_SU%-%LENSL%
goto :systemuse
:rockridgeCL
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENCL=%result%&0xff &; set /a len=%LENCL% && set "show=%LENCL%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A childLBA=%result%&0xffffffff &; set /A childadd=%childLBA% * %LBsize% &; echo -e $[]    $[0x08]005$[] Location of Child Directory\t%childLBA%\t %childadr%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENCL%
goto :systemuse
:rockridgePL
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENPL=%result%&0xff &; set /a len=%LENPL% && set "show=%LENPL%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A parenLBA=%result%&0xffffffff &; set /A parenadd=%parenLBA% * %LBsize% &; echo -e $[]    $[0x08]005$[] Location of Parent Directory\t%parenLBA%\t %parenadr%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENPL%
goto :systemuse
:rockridgeRE
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENRE=%result%&0xff &; set /a len=%LENRE% && set "show=%LENRE%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENRE%
goto :systemuse
:rockridgeSF
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Signature Word\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENSF=%result%&0xff &; set /a len=%LENSF% && set "show=%LENSF%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A VirtszHI=%result%&0xffffffff &; echo -e $[]    $[0x08]005$[] Virtual File Size High\t\t%VirtszHI%%%NULL%
set /A address=%address%+8 &; call :read %address% %target% &; set /A VirtszLO=%result%&0xffffffff &; echo -e $[]    $[0x08]00D$[] Virtual File Size Low\t\t%VirtszLO%%%NULL%
set /A address=%address%+8 &; if not exist NULL && call :read %address% %target% &; set /A tabledep=%result%&0xff &; echo -e -n $[]    $[0x08]015$[] Table Depth\t\t\t%tabledep%      Maximum Virtual File Size\x20 &; if %tabledep%==7 && echo 16M TB ! if %tabledep%==6 ! echo 64K TB ! if %tabledep%==5 && echo 256 TB ! if %tabledep%==4 && echo 1 TB ! if %tabledep%==3 && echo 4GB ! if %tabledep%==2 && echo 16 MB ! if %tabledep%==1 && echo 64 KB ! echo
endlocal && set /a LEN_SU=%LEN_SU%-%LENSF%
goto :systemuse
:rockridgePN
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] POSIX device number\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENPN=%result%&0xff &; set /a len=%LENPN% && set "show=%LENPN%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A DEV_T_HI=%result%&0xffffffff &; echo -e $[]    $[0x08]005$[] Dev_t High\t\t%DEV_T_HI%%%NULL%
set /A address=%address%+8 &; call :read %address% %target% &; set /A DEV_T_LO=%result%&0xffffffff &; echo -e $[]    $[0x08]00D$[] Dev_t Low\t\t%DEV_T_LO%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENPN%
goto :systemuse
:rockridgePX
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] POSIX file attributes\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENPX=%result%&0xff &; set /a len=%LENPX% && set "show=%LENPX%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A modes=%result%&0xffffffff &; echo -e $[]    $[0x08]005$[] POSIX File Modes\t\t%modes%%%NULL%
call :getbits0-7 "%modes%"
if %bit0%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  0 = %bit0%  S_IXOTH\t\t\t     execute permission (other)%NULL%
if %bit1%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  1 = %bit1%  S_IWOTH\t\t\t     write permission (other)%NULL%
if %bit2%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  2 = %bit2%  S_IROTH\t\t\t     read permission (other)%NULL%
if %bit3%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  3 = %bit3%  S_IXGRP\t\t\t     execute permission (group)%NULL%
if %bit4%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  4 = %bit4%  S_IWGRP\t\t\t     write permission (group)%NULL%
if %bit5%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  5 = %bit5%  S_IRGRP\t\t\t     read permission (group)%NULL%
if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  6 = %bit6%  S_IXUSR\t\t\t     execute permission (owner)%NULL%
if %bit7%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  7 = %bit7%  S_IWUSR\t\t\t     write permission (owner)%NULL%
set bit0= && set bit1= && set bit2= && set bit3= && set bit4= && set bit5= && set bit6= && set bit7=
set /A modes=%modes%>>8 &; call :getbits0-7 "%modes%"
if %bit0%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  8 = %bit0%  S_IRUSR\t\t\t     read permission (owner)%NULL%
if %bit1%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit  9 = %bit1%  S_ISVTX\t\t save swapped text even after use%NULL%
if %bit2%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 10 = %bit2%  S_ISGID\t\t\t     set group ID on execution%NULL%
if %bit3%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 11 = %bit3%  S_IRUID\t\t\t     set user ID on execution%NULL%
if %bit4%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 12 = %bit4%  S_IFIFO\t\t\t     pipe or FIFO%NULL%
if %bit5%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 13 = %bit5%  S_IFCHR\t\t\t     character special%NULL%
if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 14 = %bit6%  S_IFDIR\t\t\t     directory%NULL%
if %bit7%==1 && if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20bit 7/6= 1/1  S_IFBLK\t     block special%NULL%
if %bit7%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 15 = %bit7%  S_IFREG\t\t\t     regular%NULL%
if %bit7%==1 && if %bit5%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 15/13=%bit7%/%bit5% S_IFLNK\t\t\t     symbolic link%NULL%
if %bit7%==1 && if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 15/14=%bit7%/%bit6% S_IFSOCK\t\t\t     socket%NULL%
set bit0= && set bit1= && set bit2= && set bit3= && set bit4= && set bit5= && set bit6= && set bit7=
if %LENPX%>=0x14 && set /A address=%address%+8 &; call :read %address% %target% &; set /A links=%result%&0xffffffff &; echo -e $[]    $[0x08]00D$[] POSIX File Links\t\t%links%%%NULL%
if %LENPX%>=0x1C && set /A address=%address%+8 &; call :read %address% %target% &; set /A filusrID=%result%&0xffffffff &; echo -e $[]    $[0x08]015$[] POSIX File User ID\t\t%filusrID%%%NULL%
if %LENPX%>=0x24 && set /A address=%address%+8 &; call :read %address% %target% &; set /A filgrpID=%result%&0xffffffff &; echo -e $[]    $[0x08]01D$[] POSIX File Group ID\t\t%filgrpID%%%NULL%
if %LENPX%>=0x2C && set /A address=%address%+8 &; call :read %address% %target% &; set filseria=%result% &; echo -e $[]    $[0x08]025$[] POSIX File Serial Number\t%filseria%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENPX%
goto :systemuse
:rockridgeTF
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Time stamp(s) for a file\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENTF=%result%&0xff &; set /a len=%LENTF% && set "show=%LENTF%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target% &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A flags=%result%&0xff &; echo -e $[]    $[0x08]005$[] Flags\t\t\t\t%flags%%%NULL%
if exist NULL && endlocal && set /a LEN_SU=%LEN_SU%-%LENTF% && goto :systemuse
call :getbits0-7 "%flags%"
if %bit0%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 0 = %bit0%  CREATION%NULL%
if %bit1%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 1 = %bit1%  MODIFY%NULL%
if %bit2%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 2 = %bit2%  ACCESS%NULL%
if %bit3%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 3 = %bit3%  ATTRIBUTES%NULL%
if %bit4%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 4 = %bit4%  BACKUP%NULL%
if %bit5%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 5 = %bit5%  EXPIRATION%NULL%
if %bit6%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 6 = %bit6%  EFFECTIVE%NULL%
if %bit7%==1 && echo -e \x20\x20\x20\x20\x20\x20\x20\x20Bit 7 = %bit7%  LONG_FORM%NULL% && set X=17 ! set X=7
set n=0x6 &; if %bit0%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Creation Time\t\t" &; set /A n=%n%+%X%
if %bit1%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Modification Time\t" &; set /A n=%n%+%X%
if %bit2%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Last Access Time\t" &; set /A n=%n%+%X%
if %bit3%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Last Attribute Change Time" &; set /A n=%n%+%X%
if %bit4%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Last Backup Time\t" &; set /A n=%n%+%X%
if %bit5%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Expiration Time\t\t" &; set /A n=%n%+%X%
if %bit6%==1 && set /A address=%address%+1 &; call :timestamp "%address%" "%X%" "Effective Time\t\t" &; set /A n=%n%+%X%
endlocal && set /a LEN_SU=%LEN_SU%-%LENTF%
goto :systemuse
:timestamp
setlocal && set * && set n=%n% && set "target=%target%" && set mdtarget=%mdtarget%
set /A address=%~1
if %~2==7 &; setlocal && set /A address=%address%+6 &; call :read %address% %target% &; set /A TZ=%result%&0xff &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; endlocal && set TZ=%TZ%
if %~2==17 &; setlocal && set /A address=%address%+16 &; call :read %address% %target% &; set /A TZ=%result%&0xff &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; endlocal && set TZ=%TZ%
set "space=\x20\x20\x20\x20"
if %n%<=0xF && set n=0x00%n:~2% ! if %n%<=0xFF && set n=0x0%n:~2%
if %~2==7 &; call :read %address% %target% &; set /A yy=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /A m=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /A dd=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /A hh=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /A mm=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /A ss=%result%&0xff &; if %yy%<=9 && set yy=0x0%yy:~2% ! set yy=%yy% &; if %m%<=9 && set m=0x0%m:~2% ! set m=%m% &; if %dd%<=9 && set dd=0x0%dd:~2% ! set dd=%dd% &; if %hh%<=9 && set hh=0x0%hh:~2% ! set hh=%hh% &; if %mm%<=9 && set mm=0x0%mm:~2% ! set mm=%mm% &; if %ss%<=9 && set ss=0x0%ss:~2% ! set ss=%ss% &; echo -e -n %space%$[0x08]%n:~2%$[] %~3
if %~2==7 &; set /a yy=%yy%+1900 && set /a m=%m% && set /a dd=%dd% && set /a hh=%hh% && set /a mm=%mm% && set /a ss=%ss% &; if %m%<=9 && set m=0%m% ! set m=%m% &; if %dd%<=9 && set dd=0%dd% ! set dd=%dd% &; if %hh%<=9 && set hh=0%hh% ! set hh=%hh% &; if %mm%<=9 && set mm=0%mm% ! set mm=%mm% &; if %ss%<=9 && set ss=0%ss% ! set ss=%ss% &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; echo -e \t%yy%-%m%-%dd% %hh%:%mm%:%ss% UTC: GMT%TZ%
if %~2==17 &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; raw cat --skip=%address% --length=16 %target% | set result= &; echo -n -e %space%$[0x08]%n:~2%$[] %~3 &; echo -e \t%result:~0,4,%-%result:~4,2%-%result:~6,2% %result:~8,2%:%result:~10,2%:%result:~12,2%.%result:~14,2% UTC: GMT%TZ%
if %~2==12 &; call :read %address% %target% &; set /a type=%result%&0xffff>>12 && set /a timezone=%result%&0xfff &; if %timezone%<=0x800 && set /a timezone=%timezone%/60 ! set /a timezone=%timezone%-0x1000/60 &; set /A address=%address%+2 &; call :read %address% %target% &; set /a y=%result%&0xffff && set /A address=%address%+2 &; call :read %address% %target% &; set /a m=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /a dd=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /a hh=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /a mm=%result%&0xff && set /A address=%address%+1 &; call :read %address% %target% &; set /a ss=%result%&0xff &; call :read %address% %target% &; set /a cs=%result%&0xff &; call :read %address% %target% &; set /a hs=%result%&0xff &; call :read %address% %target% &; set /a ms=%result%&0xff &; if %m%<=9 && set m=0%m% ! set m=%m% &; if %dd%<=9 && set dd=0%dd% ! set dd=%dd% &; if %hh%<=9 && set hh=0%hh% ! set hh=%hh% &; if %mm%<=9 && set mm=0%mm% ! set mm=%mm% &; if %ss%<=9 && set ss=0%ss% ! set ss=%ss% &; if %cs%<=9 && set cs=0%cs% ! set cs=%cs% &; if %hs%<=9 && set hs=0%hs% ! set hs=%hs% &; if %ms%<=9 && set ms=0%ms% ! set ms=%ms%
if %~2==12 &; if %timezone%==0 && set timezone=GMT ! if %timezone%>=1 && set timezone=GMT+%timezone% ! set timezone=GMT%timezone% &; if not %y%==0 && set "datetime=%y%-%m%-%dd% %hh%:%mm%:%ss%.%cs%%%hs%%%ms% UTC: %timezone%" ! set datetime=
if %~2==12 && endlocal && set "datetime=%datetime%" && goto :eof
endlocal && set /A address=%address%+1 && goto :eof
:rockridgeNM
setlocal && set * && set address=%address% && set "target=%target%" && set extensio=%extensio% && set LEN_SU=%LEN_SU% && set "NULL=%NULL%"
echo -e $[]    $[0x08]001$[] Alternate name\t\t\t%extensio%\t     RockRidge Extension%NULL%
set /A address=%address%+2 &; call :read %address% %target% &; set /A LENNM=%result%&0xff &; set /a len=%LENNM% && set "show=%LENNM%            " &; echo -e $[]    $[0x08]003$[] Extension Length\t\t%show:~0,12% %len%%%NULL% && set show= && set len=
set /A address=%address%+1 &; call :read %address% %target % &; set /A SUver=%result%&0xff &; echo -e $[]    $[0x08]004$[] System Use Entry Version\t%SUver%%%NULL%
set /A address=%address%+1 &; call :read %address% %target% &; set /A flags=%result%&0xff
if not exist NULL && echo -e -n $[]    $[0x08]005$[] Flags\t\t\t\t%flags% &; if %flags%==0 && echo -e \t     CONTINUE ! if %flags%==1 && echo -e \t     CURRENT ! if %flags%==2 && echo -e \t     PARENT ! echo -e \t     RESERVED
set result= && set /A address=%address%+1 && set /a length=%LENNM%-5 &; set /A ADDRESS=%address%-1 &; call :getentityID "%ADDRESS%" "%length%" "WRAP" &; call set "Ncontent=%^result%"
set result= && set ADDRESS= && if exist Ncontent && call set "FileID=%^lfnfile"
set lfnfile= && if not exist NULL && echo -e $[]    $[0x08]006$[0x00]"$[]Name content\t\t\t%Ncontent%%%NULL%
endlocal && set /a LEN_SU=%LEN_SU%-%LENNM% && set "FileIDRR=%Ncontent%"
goto :systemuse
:getbits0-7
setlocal && set *
set result=%~1 &; set /a bit0=%result%>>0&1
set /a bit1=%result%>>1&1
set /a bit2=%result%>>2&1
set /a bit3=%result%>>3&1
set /a bit4=%result%>>4&1
set /a bit5=%result%>>5&1
set /a bit6=%result%>>6&1
set /a bit7=%result%>>7&1
endlocal && set bit0=%bit0% && set bit1=%bit1% && set bit2=%bit2% && set bit3=%bit3% && set bit4=%bit4% && set bit5=%bit5% && set bit6=%bit6% && set bit7=%bit7%
goto :eof
:lsspaces
set lslength= && set lsnewpos=
raw cat --skip=%lsskip% --locate=\x5C --number=1 (md)0x300+1 > nul &; set /a lsnewpos=%?%+1 &; set /a lslength=%lsnewpos%-%lsskip% &; raw cat --skip=%lsskip% --length=%lslength% (md)0x300+1 | set lspath=%lspath% &; set "lspath=%lspath% " && set lsskip=%lsnewpos% && goto :lsspaces
raw cat --skip=%lsskip% (md)0x300+1 | set lspath=%lspath%
if "%~1"=="" && set "cdpath=%lspath%" ! set "%~1=%lspath%"
set lsskip= && set lslength= && set lsnewpos= && set lspath= && goto :eof
:udfinfo
if %identify%==TEA01 && set identify= && goto :eof
if %identify%==CDW02 && set identify= && set "message=ISO-13340 not supported" && goto :eof
set address= && set identify= && set voladdr=
set /A voladdr=%volsec% * %LBsize%
set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set identify= &; if not %identify%==BEA01 if not %identify%==NSR02 if not %identify%==NSR03 if not %identify%==BOOT2 if not %identify%==TEA01 |; call :udfdescriptors &; set /a volsec=%volsec%+1 && goto :udfinfo
if not %volsec%>=80 && set /a volsec=%volsec%+1 && goto :udfinfo
set identify= && goto :eof
:udfdescriptors
setlocal
if not exist Q && if exist NULL &; if %UDFED%==Y && set NULL=
set result= && set /A address=%voladdr% &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]000$[] Volume Descriptor Type\t\t%result%\t     sector %volsec%    %address%%%NULL%
set result= && set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set result= &; if %result%==NSR01 && set "VER=UDF v1.0" ! if %result%==NSR02 && set "VER=UDF v1.xx" ! if %result%==NSR03 && set "VER=UDF version 2.xx" ! set "VER=\t" &; if not exist NULL && echo -n -e $[0x08]001$[] Standard Identifier &; if exist result && echo -e \t\t\t%result%\t     %VER%%%NULL% ! echo -e \t\t\tEMPTY%NULL%
set result= && set /A address=%voladdr%+0x6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]006$[] Volume Descriptor Version\t\t%result%%%NULL%
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=16 %target%%%NULL%
if not exist NULL && if not exist Q &; if not %identify%==TEA01 && echo
if not exist NULL &; if not "%find%"=="ISO-9660/UDFdescriptors " if not exist ISOVDS if not exist UDFVDS if not exist UDFED if not exist UDFVDS |; call Fn.11 "%found%" "UDFED " || set "found=%found%UDFED "
endlocal && set "found=%found%" && goto :eof
:isoinfo
set /A voladdr=%volsec% * %LBsize% && set volnum= &; set /A address=%voladdr%+1 &; raw cat --skip=%address% --locatei=CD001 --length=5 %target% > nul && call :read %voladdr% %target% &; set /A volnum=%result%&0xff
if not exist Q && if exist NULL &; if %ISOVDS%==Y && set NULL=
if %volnum%==1 && echo -e Primary Volume Descriptor (ISO-9660):\tsector %volsec%    %voladdr%%%NULL% && if %ISOPVD%==Y && echo -e Primary Volume Descriptor (ISO-9660):\tsector %volsec%    %voladdr%
if %volnum%==0 && echo -e Boot Record:\t\t\t\tsector %volsec%    %voladdr%%%NULL% && if %ISOBD%==Y && echo -e Boot Record:\t\t\t\tsector %volsec%    %voladdr%
if %volnum%==2 && echo -e Supplementary Volume Descriptor:\tsector %volsec%    %voladdr%%%NULL% && if %ISOSVD%==Y && echo -e Supplementary Volume Descriptor:\tsector %volsec%    %voladdr%
if %volnum%==3 && echo -e Volume Partition Descriptor at:\t\tsector %volsec%    %voladdr%%%NULL% && if %ISOPVD%==Y && echo -e Volume Partition Descriptor at:\t\tsector %volsec%    %voladdr%
if %volnum%==0xFF && echo -e Volume Descriptor Terminator:\t\tsector %volsec%    %voladdr%%%NULL% && if %ISOTD%==Y && echo -e Volume Descriptor Terminator:\t\tsector %volsec%    %voladdr%
if %volnum%==1 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find:~0,6%"=="ISOVDS" if not "%find:~0,6%"=="ISOPVD" if not "%find:~0,6%"=="UDFVDS" |; set "found=%found%ISOPVD "
if %volnum%==1 &; call :isodescriptors &; set /a volsec=%volsec%+1 && echo%NULL% && goto :isoinfo
if %volnum%==0 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find:~0,6%"=="ISOVDS" if not "%find:~0,5%"=="ISOBD" if not "%find:~0,6%"=="UDFVDS" |; set "found=%found%ISOBD "
if %volnum%==0 &; call :bootrecord &; set /a volsec=%volsec%+1 &; if not %hexview%==Y && echo%NULL% ! set hexview=%hexview% &; goto :isoinfo
if %volnum%==2 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find:~0,6%"=="ISOVDS" if not "%find:~0,6%"=="ISOSVD" if not "%find:~0,7%"=="ISOSVD2" if not "%find:~0,6%"=="UDFVDS" |; call Fn.11 "%found%" "ISOSVD" && set "found=%found%ISOSVD2 " ! set "found=%found%ISOSVD "
if %volnum%==2 &; call :isodescriptors &; set /a volsec=%volsec%+1 && echo%NULL% && goto :isoinfo
if %volnum%==3 &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find:~0,6%"=="ISOVDS" if not "%find:~0,5%"=="ISOVPD" if not "%find:~0,6%"=="UDFVDS" |; set "found=%found%ISOVPD "
if %volnum%==3 &; call :partitioninfo &; set /a volsec=%volsec%+1 && echo%NULL% && goto :isoinfo
if %volnum%==0xFF &; if not "%find%"=="ISO-9660/UDFdescriptors " if not "%find:~0,6%"=="ISOVDS" if not "%find:~0,5%"=="ISOTD" if not "%find:~0,6%"=="UDFVDS" |; set "found=%found%ISOTD "
if %volnum%==0xFF &; call :isoterminator &; set volnum= && echo%NULL% && goto :eof
if %volsec%<=22 && set /A volsec=%volsec%+1 && goto :isoinfo
set volnum= && goto :eof
:isoterminator
setlocal
if not exist Q && if exist NULL &; if %ISOTD%==Y && set NULL= ! if %ISOVDS%==Y && set NULL=
if not exist DIRsize && set DIRsize=%LBsize% ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=16 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
set /A address=%voladdr% &; echo -e $[0x08]000$[] Volume Descriptor Type\t\t%volnum%%%NULL%
set result= && set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set result= &; if not exist NULL && echo -n -e $[0x08]001$[] Standard Identifier &; if exist result && echo -e \t\t\t%result%%%NULL% ! echo -e \t\tEMPTY%NULL%
set result= && set /A address=%voladdr%+0x6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]006$[] Terminator Version\t\t\t%result%%%NULL%
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=16 %target%%%NULL%
endlocal && goto :eof
:isodescriptors
setlocal
if exist NULL &; if %ISOPVD%==Y && set ISOPVD= && set DONULL=Y && set "t3=\t" && set NULL= ! if %ISOSVD%==Y && if %volnum%==2 && set ISOSVD= && set DONULL=Y && set "t3=\t" && set NULL= ! if %ISOSVD%==Y && endlocal && goto :eof
if not %ISOVDS%==Y if not "%find%"=="ISO-9660/UDFdescriptors " || set NULL= && set "t3=\t"
if not exist NULL if not exist Q || endlocal && goto :eof
if not exist DIRsize && set DIRsize=2048 ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=1396 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
set /A address=%voladdr% &; echo -e $[0x08]000$[] Volume Descriptor Type\t\t%volnum%
set result= && set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set result= &; echo -n -e $[0x08]001$[] Standard Identifier &; if exist result && echo -e \t\t\t%result% ! echo -e \t\tEMPTY
set result= && set /A address=%voladdr%+0x6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]006$[] Volume Descriptor Version\t\t%result%
if %volnum%==2 && set result= &; set /A address=%voladdr%+0x7 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]007$[] Volume Flags\t\t\t%result%
set /A address=%voladdr%+8 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=31 && call :getlfnloop ! call :getentityID "%ADDRESS%" "32" &; echo -n -e $[0x08]008$[] System Identifier &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY
set /A address=%voladdr%+0x28 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=31 && call :getlfnloop ! call :getentityID "%ADDRESS%" "32" &; echo -n -e $[0x08]028$[] Volume Identifier &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY && set result=EMPTY &; if not exist volsetID && set "volsetID=%result%" && set result= ! set result=
set result= && set /A address=%voladdr%+0x50 &; call :read %address% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e $[0x08]050$[] Volume Space Size\t\t\t%show:~0,12% %sec% && set show= && set sec=
if not exist CDFSsec && set CDFSsec=%LBAle% ! if %LBAle%==0 && set CDFSsec=0
set /A address=%voladdr%+0x54 &; call :readbe %address% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% &; echo -e \x20\x20$[0x08]054$[] Big Endian\t\t\t%LBAbe%\t\t%sec%
if %volnum%==2 &; set result= && set /A address=%voladdr%+0x58 &; raw cat --skip=%address% --length=32 %target% | set result= &; set "show=%result%            " &; if "%result%"=="%/@" && set "level=UCS-2 Level 1" ! if "%result%"=="%/C" && set "level=UCS-2 Level 2" ! if "%result%"=="%/E" && set "level=UCS-2 Level 3" ! set level= &; echo -n -e $[0x08]058$[] Escape Sequences &; if exist result && echo -e \t\t\t%show:~0,12% %level% ! echo -e \t\t\tEMPTY
set result= && set /A address=%voladdr%+0x78 &; call :read %address% %target% &; set /A LBAle=%result%&0xffff &; set /a sec=%LBAle% &; echo -e $[0x08]078$[] Volume Set Size\t\t\t%LBAle%
set result= && set /A address=%voladdr%+0x7A &; call :readbe %address% %target% &; set /A LBAbe=%result%>>16 &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% &; echo -e \x20\x20$[0x08]07B$[] Big Endian\t\t\t%LBAbe%\t\t%sec%
set result= && set /A address=%voladdr%+0x7C &; call :read %address% %target% &; set /A LBAle=%result%&0xffff &; set /a sec=%LBAle% &; echo -e $[0x08]07C$[] Volume Sequence Number\t\t%LBAle%
set result= && set /A address=%voladdr%+0x7E &; call :readbe %address% %target% &; set /A LBAbe=%result%>>16 &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% &; echo -e \x20\x20$[0x08]07E$[] Big Endian\t\t\t%LBAbe%\t\t%sec%
set result= && set /A address=%voladdr%+0x80 &; call :read %address% %target% &; set /A LBAle=%result%&0xffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e $[0x08]080$[] Logical Block Size\t\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x82 &; call :readbe %address% %target% &; set /A LBAbe=%result%>>16 &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% && set "show=%LBAbe%            " &; echo -e \x20\x20$[0x08]082$[] Big Endian\t\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x84 &; call :read %address% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e $[0x08]084$[] Path Table Space Size\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x88 &; call :readbe %address% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% && set "show=%LBAbe%            " &; echo -e $[0x08]088$[]\x20\x20 Big Endian\t\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x8C &; call :read %address% %target% &; set /A LBAle1=%result%&0xffffffff &; set /a sec=%LBAle1% && set "show=%LBAle1%            " &; echo -e $[0x08]08C$[] Path Table 1 Block Number\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x90 &; call :read %address% %target% &; set /A LBAle2=%result%&0xffffffff &; if not %LBAle2%<=%volsec% && set /a sec=%LBAle2% && set "show=%LBAle2%            " &; echo -e $[0x08]090$[] Path Table 2 Block Number\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x94 &; call :readbe %address% %target% &; set /A LBAbe1=%result%&0xffffffff &; set /a sec=%LBAbe1% && set "show=%LBAbe1%            " &; echo -e $[0x08]094$[] Path Table 3 Block Number\t\t%show:~0,12% %sec% && set show= && set sec=
set result= && set /A address=%voladdr%+0x98 &; call :readbe %address% %target% &; set /A LBAbe2=%result%&0xffffffff &; if not %LBAbe2%<=%volsec% && set /a sec=%LBAbe2% && set "show=%LBAbe2%            " &; echo -e $[0x08]098$[] Path Table 4 Block Number\t\t%show:~0,12% %sec% && set show= && set sec=
if %CDFSsec%>=0x10 &; if %DONULL%==Y && set NULL= ! set DONULL= &; echo -e $[0x08]09C$[] Root Directory Record: && setlocal && set /A address2=%voladdr%+0x9C && set space=\x20\x20\x20\x20 && set t3= &; call :directoryrecord &; endlocal && set mountISO=%mountISO% && set "found=%found%" &; if %DONULL%==Y && set "NULL= > nul" && set DONULL=
set /A address=%voladdr%+190 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=127 && call :getlfnloop "WRAP" ! call :getentityID "%ADDRESS%" "128" "WRAP" &; echo -n -e $[0x08]0BE$[] Volume Set Identifier &; if exist result && echo -e \t\t%result% ! echo -e \t\tEMPTY
set /A address=%voladdr%+318 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=127 && call :getlfnloop "WRAP" ! call :getentityID "%ADDRESS%" "128" "WRAP" &; echo -n -e $[0x08]13E$[] Publisher Identifier &; if exist result && echo -e \t\t%result% ! echo -e \t\tEMPTY
set /A address=%voladdr%+446 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=127 && call :getlfnloop "WRAP" ! call :getentityID "%ADDRESS%" "128" "WRAP" &; echo -n -e $[0x08]1BE$[] Data Preparer Identifier &; if exist result && echo -e \t\t%result% ! echo -e \t\tEMPTY
set /A address=%voladdr%+574 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=127 && call :getlfnloop "WRAP" ! call :getentityID "%ADDRESS%" "128" "WRAP" &; echo -n -e $[0x08]23E$[] Application Identifier &; if exist result && echo -e \t\t%result% ! echo -e \t\tEMPTY
set /A address=%voladdr%+702 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=36 && call :getlfnloop ! call :getentityID "%ADDRESS%" "37" &; echo -n -e $[0x08]2BE$[] Copyright Filename &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY
set /A address=%voladdr%+739 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=36 && call :getlfnloop ! call :getentityID "%ADDRESS%" "37" &; echo -n -e $[0x08]2E3$[] Abstract Filename &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY
set /A address=%voladdr%+776 &; call :read %address% %target% &; set /a charID=%result%&0xff && set result= && set /A ADDRESS=%address%-1 &; if %charID%==0x00 && set /A skipzero=%address%+1 && set namelen=36 && call :getlfnloop ! call :getentityID "%ADDRESS%" "37" &; echo -n -e $[0x08]308$[] Bibliographic Filename &; if exist result && echo -e \t\t%result% ! echo -e \t\tEMPTY
set result= && set /A address=%voladdr%+0x33D &; call :read %address% %target% &; set /a TZ=%result%&0xff && set result= &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; set /A address=%voladdr%+0x32D &; raw cat --skip=%address% --length=16 %target% | set result= &; echo -n -e $[0x08]32D$[] Volume Creation Time &; if exist result && if not "%result%"=="0000000000000000" && echo -e \t\t%result:~0,4%-%result:~4,2%-%result:~6,2% %result:~8,2%:%result:~10,2%:%result:~12,2%.%result:~14,2% UTC: GMT%TZ% ! echo -e \t\tEMPTY &; set TZ=
set result= && set /A address=%voladdr%+0x34E &; call :read %address% %target% &; set /a TZ=%result%&0xff && set result= &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; set /A address=%voladdr%+0x33E &; raw cat --skip=%address% --length=16 %target% | set result= &; echo -n -e $[0x08]33E$[] Volume Modify Time &; if exist result && if not "%result%"=="0000000000000000" && echo -e \t\t\t%result:~0,4%-%result:~4,2%-%result:~6,2% %result:~8,2%:%result:~10,2%:%result:~12,2%.%result:~14,2% UTC: GMT%TZ% ! echo -e \t\t\tEMPTY &; set TZ=
set result= && set /A address=%voladdr%+0x35F &; call :read %address% %target% &; set /a TZ=%result%&0xff && set result= &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; set /A address=%voladdr%+0x34F &; raw cat --skip=%address% --length=16 %target% | set result= &; echo -n -e $[0x08]34F$[] Volume Expiration Time &; if exist result && if not "%result%"=="0000000000000000" && echo -e \t\t%result:~0,4%-%result:~4,2%-%result:~6,2% %result:~8,2%:%result:~10,2%:%result:~12,2%.%result:~14,2% UTC: GMT%TZ% ! echo -e \t\tEMPTY &; set TZ=
set result= && set /A address=%voladdr%+0x370 &; call :read %address% %target% &; set /a TZ=%result%&0xff && set result= &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4 &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; set /A address=%voladdr%+0x360 &; raw cat --skip=%address% --length=16 %target% | set result= &; echo -n -e $[0x08]360$[] Volume Effective Time &; if exist result && if not "%result%"=="0000000000000000" && echo -e \t\t%result:~0,4%-%result:~4,2%-%result:~6,2% %result:~8,2%:%result:~10,2%:%result:~12,2%.%result:~14,2% UTC: GMT%TZ% ! echo -e \t\tEMPTY &; set TZ=
set result= && set /A address=%voladdr%+0x371 &; call :read %address% %target% &; set /A LBAle=%result%&0xff &; set /a sec=%LBAle% &; echo -e $[0x08]371$[] File Structure Version\t\t%LBAle%
set result= && set /A address=%voladdr%+0x400 &; raw cat --skip=%address% --locatei=CD-XA001 --length=8 %target% > nul && set CDXA=Y && echo -e $[0x08]400$[] CD-ROM Extended Architecture\t\tCD-XA%NULL%
if %CDXA%==Y && set result= && set /A address=%voladdr%+0x408 &; call :read %address% %target% &; set /A flags=%result%&0xffff &; echo -e $[0x08]408$[] Flags\t\t\t\t%flags%%%NULL%
if %CDXA%==Y && set result= && set /A address=%voladdr%+0x40A &; raw cat --skip=%address% --length=8 %target% | set result= &; if exist result && echo -e $[0x08]40A$[] Startup Directory\t\t\t%result%%%NULL%
set LBAle= && set LBAle1= && set LBAle2= && set LBAbe= && set LBAbe1= && set LBAbe2= && set sec= && set space=
if %hexview%==Y &; if %CDXA%==Y && set /A len=%address%+8-%voladdr% ! set /a len=0x371 &; raw cat --hex --skip=%voladdr% --length=%len% %target%
endlocal && set mountISO=%mountISO% && set ISOPVD=%ISOPVD% && set ISOSVD=%ISOSVD% && set ISOSVD2=%ISOSVD2% && set CDFSsec=%CDFSsec% && set CDXA=%CDXA% && set "volsetID=%volsetID%"
goto :eof
:directoryrecord
setlocal && set * && set LBsize=%LBsize% && set volsec=%volsec% && set voladdr=%voladdr% && set address2=%address2% && set "target=%target%" && set DIRsize=%DIRsize% && set mdbase=%mdbase% && set "cdfile=%cdfile%" && set "cdfile2=%cdfile2%" && set "cdfile3=%cdfile3%" && set "ISODIR=%ISODIR%" && set "ISODIR2=%ISODIR2%" && set "ISODIR3=%ISODIR3%" && set "ISOROOT=%ISOROOT%" && set "ISOROOT2=%ISOROOT2%" && set "ISOROOT3=%ISOROOT3%" && set depth=%depth% && set level=%level% && set space=%space% && set "t=%t%" && set "t1=%t1%" && set "t2=%t2%" && set "t3=%t3%" && set "subdir=%subdir%" && set folder=%folder% && set "cdpath=%cdpath%" && set "cdname=%cdname%" && set "cdext=%cdext%" && set "asterix=%asterix%" && set "Nasterix=%Nasterix%" && set "Easterix=%Easterix%" && set sublen=%sublen% && set GO=%GO% && set hexview=%hexview% && set "find=%find%" && set "found=%found%" && set DR=%DR% && set "ISODIRR=%ISODIRR%" && set "ISODIRR2=%ISODIRR2%" && set "ISODIRR3=%ISODIRR3%" && set ISODRR=%ISODRR% && set "i=%i%" && set Q=%Q% && set ATTRIB=%ATTRIB% && set "NULL=%NULL%"
if not exist cdfile if not exist cdfile2 if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr%+0x9C &; if not %DIRsize%>=%LBsize% && set size=%LBsize% ! set size=%DIRsize% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%size% skip=%CDskip% > nul && set "CDtarget=%target%" && set target=(md)%mdbase%+%TGTsec% && set address2=0 && set TGTsec= && set size=
set searchln=%DIRsize% && set numdir=0 && set dirsize=0
if not exist ISODRR &; if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; set NULL= &; if %ISOROOT%==Y && set "found=%found%ISOROOT " ! if %ISOROOT2%==Y && set "found=%found%ISOROOT2 " ! if %ISOROOT3%==Y && set "found=%found%ISOROOT3 " &; set searched=0 && set /A voladdr=%volsec% * %LBsize% &; if exist ISOROOT && echo -e %space%$[]Root Directory (ROOT):\t\t\tsector %volsec%\t %voladdr%%%NULL% ! if exist ISOROOT2 && echo -e $[]Root Directory (ROOT2):\t\t\tsector %volsec%\t %voladdr%%%NULL% ! if exist ISOROOT3 && echo -e $[]Root Directory (ROOT3):\t\t\tsector %volsec%\t %voladdr%%%NULL%
if %ISODRR%==YES &; if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; set NULL= &; if %ISOROOT%==Y && echo -e Directory Records in: '%cdpath%' ! if %ISOROOT2%==Y && echo -e Directory Records (2) in: '%cdpath%' ! if %ISOROOT3%==Y && echo -e Directory Records (3) in: '%cdpath%'
if %ISODRR%==YES &; if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; call Fn.11 "%find%" "ISODRR " && set "found=%found%ISODRR " ! call Fn.11 "%find%" "ISODRR2 " && set "found=%found%ISODRR2 " ! call Fn.11 "%find%" "ISODRR3 " && set "found=%found%ISODRR3 " ! if %ISOROOT%==Y && set "found=%found%ISODR " ! if %ISOROOT2%==Y && set "found=%found%ISODR2 " ! if %ISOROOT3%==Y && set "found=%found%ISODR3 " &; if not exist Q && echo
if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; set DIR= && set searched=0 && set numdirs=0 && set numfiles=0 &; if %ISODR%==Y && set "found=%found%ISODR " ! if %ISODR2%==Y && set "found=%found%ISODR2 " ! if %ISODR3%==Y && set "found=%found%ISODR3 "
if exist subdir && set "subdir=%subdir%" &; set /a sublen=%@retval%
if not exist NULL && if %Q%==Y && set "NULL= > nul"
if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-D" && set DIRS=N ! call Fn.11 "%ATTRIB%" "D" && set DIRS=Y && set FILES=N ;; if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-F" && set FILES=N ! call Fn.11 "%ATTRIB%" "F" && set FILES=Y && if not %DIRS%==Y && set DIRS=N ;; if exist ATTRIB &; call Fn.11 "%ATTRIB%" "-H" && set HIDDEN=N ! call Fn.11 "%ATTRIB%" "H" && set HIDDEN=Y ;; if exist ATTRIB &; if %DIRS%==N && if %FILES%==N && set DIRS= && set FILES= ! if %DIRS%==Y && if %FILES%==Y && set DIRS= && set FILES=
:directoryrecordloop
set result= && set /A address2=%address2%+0x0 &; call :read %address2% %target% &; set /A recordln=%result%&0xff &; if %recordln%==0 && set bit1= && goto :directoryrecordend
if not %DONE%==Y |; echo -e Entry in: '%cdpath%'%NULL%
if not %DONE%==Y if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; set /A address=%voladdr%+0x9C+%address2% &; set /A SEC=%address%/%LBsize% &; set /a len=%SEC% &; set "show=%SEC%            " && set "show2=%len%            " &; if not exist level && echo -e Directory Record (ISO-9660)\t\t%show:~0,12% %show2:~0,12% %address%%%NULL% ! echo -e Directory Record (%level%)\t%show:~0,12% %show2:~0,12% %address%%%NULL% &; set SEC= && set show= && set show2= && set len= && set address=
if exist recordln &; set /a sec=%recordln% &; set "show=%recordln%            " &; echo -e %space%$[0x08]000$[] Directory Record Length\t\t%show:~0,12% %sec%%%NULL% && set show= && set sec=
set result= && set /A address2=%address2%+0x1 &; call :read %address2% %target% &; set /A result=%result%&0xff &; set /a sec=%result% &; set "show=%result%            " &; echo -e %space%$[0x08]001$[] Extended Attribute Record%t%\t%t3%%%show:~0,12%%%NULL% && set show= &; if %result%>=1 && echo -n %0 $[0xF0]ISO-9660 Extended Attribute Record exists KEY... && pause --wait=180 && echo
set result= && set /A address2=%address2%+0x1 &; call :read %address2% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e %space%$[0x08]002$[] Data Logical Block Number%t%\t%t3%%%show:~0,12% %sec%%%NULL% && set sec= && set show= && set DATALBN=%LBAle%
set result= && set /A address2=%address2%+0x4 &; if not exist NULL && call :readbe %address2% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% && set "show=%LBAbe%            " &; echo -e %space%$[0x08]006$[] Big Endian\t\t%t%%%show:~0,12% %sec%%%NULL% && set show= && set sec=
set result= && set /A address2=%address2%+0x4 &; call :read %address2% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e %space%$[0x08]00A$[] Data Size in Bytes%t%\t\t%t3%%%show:~0,12% %sec%%%NULL% && set show= && set sec= && set DATASIZE=%LBAle%
set result= && set /A address2=%address2%+0x4 &; if not exist NULL && call :readbe %address2% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% && set "show=%LBAbe%            " &; echo -e %space%$[0x08]00E$[] Big Endian\t\t%t%%%show:~0,12% %sec%%%NULL% && set show= && set sec=
set result= && set /A address2=%address2%+0x4+6 &; if not exist NULL && call :read %address2% %target% &; set /A TZ=%result%&0xff &; if %TZ%>=0x80 && set /a TZ=-%TZ%/4 ! set /a TZ=%TZ%/4
set result= && if not exist NULL && set /A address2=%address2%-6 &; call :read %address2% %target% &; set /a yy=%result%&0xff+1900 && set /A address2=%address2%+1 &; call :read %address2% %target% &; set /a m=%result%&0xff && set /A address2=%address2%+1 &; call :read %address2% %target% &; set /a dd=%result%&0xff && set /A address2=%address2%+1 &; call :read %address2% %target% &; set /a hh=%result%&0xff && set /A address2=%address2%+1 &; call :read %address2% %target% &; set /a mm=%result%&0xff && set /A address2=%address2%+1 &; call :read %address2% %target% &; set /a ss=%result%&0xff &; if %yy%<=9 && set yy=0%yy% ! set yy=%yy% &; if %m%<=9 && set m=0%m% ! set m=%m% &; if %dd%<=9 && set dd=0%dd% ! set dd=%dd% &; if %hh%<=9 && set hh=0%hh% ! set hh=%hh% &; if %mm%<=9 && set mm=0%mm% ! set mm=%mm% &; if %ss%<=9 && set /a ss=0%ss% ! set ss=%ss% &; if %TZ%==0 && set TZ= ! if %TZ%>=1 && set TZ=+%TZ% ! set TZ=%TZ% &; echo -e %space%$[0x08]012$[] Recording Time\t\t\t%yy%-%m%-%dd% %hh%:%mm%:%ss% UTC: GMT%TZ%%%NULL% && set TZ=
set result= && set bit0= && set bit1= && set bit2= && set bit3= && set bit4= && set bit7= &; if not exist NULL && set /A address2=%address2%+0x2 ! set /A address2=%address2%+0x1 &; call :read %address2% %target% &; set /A result=%result%&0xff &; call :fileflags
set result= && set /A address2=%address2%+0x1 &; if not exist NULL && call :read %address2% %target% &; set /A result=%result%&0xff &; echo -e %space%$[0x08]01A$[] File Unit Size\t\t\t%result%%%NULL%
set result= && set /A address2=%address2%+0x1 &; if not exist NULL && call :read %address2% %target% &; set /A result=%result%&0xff &; echo -e %space%$[0x08]01B$[] Interleave Gap Size%t%\t\t%t3%%%result%%%NULL%
set result= && set /A address2=%address2%+0x1 &; if not exist NULL && call :read %address2% %target% &; set /A LBAle=%result%&0xffff &; set /a sec=%LBAle% && set "show=%LBAle%            " &; echo -e %space%$[0x08]01C$[] Volume Sequence Number\t\t%show:~0,12% %sec%%%NULL% && set show= && set sec=
set result= && set /A address2=%address2%+0x2 &; if not exist NULL && call :readbe %address2% %target% &; set /A LBAbe=%result%>>16 &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% && set "show=%LBAbe%            " &; echo -e %space%$[0x08]01E$[] Big Endian\t\t%t%%%show:~0,12% %sec%%%NULL% && set show= && set sec=
set result= && set /A address2=%address2%+0x2 &; call :read %address2% %target% &; set /A result=%result%&0xff &; set "show=%result%            " &; echo -e -n %space%$[0x08]020$[] Length of Name\t\t\t%show:~0,12%%%NULL% && set /a length=%result% && set show= &; echo -e \x20%length%%%NULL%
if exist level && if exist depth && set result= && set /A address2=%address2%+0x1 &; set /A skipzero=%address2%+1 && set /a namelen=%length%-1 && call :getlfnloop "WRAP" &; call set "FileID=%^result%" && set result= && if not exist NULL &; if %space%==\x20\x20\x20\x20 && set t2= ! set t2=\t &; if %bit1%==0 && call echo -e %space%$[0x08]021$[0x0]"$[]File Name%t%\t%t2%\t\t%^FileID%
if exist level && if exist depth && if not exist NULL && if %bit1%==1 && call echo -e %space%$[0x08]021$[0x0]"$[]Directory Name%t%\t\t\t%^FileID%
if exist level && if exist depth && set /a numdir=%numdir%+1 && call set "FileID=%^lfnfile%"
if not exist level && if exist depth && set result= && set /A address2=%address2%+0x1 &; set /A ADDRESS=%address2%-1 &; call :getentityID "%ADDRESS%" "%length%" "WRAP" &; call set "FileID=%^result%" && set result= && set ADDRESS= &; if not exist NULL &; if %space%==\x20\x20\x20\x20 && set t2= ! set t2=\t &; if %bit1%==0 && call echo -e %space%$[0x08]021$[0x0]"$[]File Name%t%\t%t2%\t\t%^FileID%
if not exist level && if exist depth && if not exist NULL && if %bit1%==1 && call echo -e %space%$[0x08]021$[0x0]"$[]Directory Name%t%\t\t\t%^FileID%%%NULL%
if not exist level && if exist depth && set /a numdir=%numdir%+1 && call set "FileID=%^lfnfile%"
set lfnfile= &; if not exist depth && set result= && set /A address2=%address2%+0x1 &; call :read %address2% %target% &; set /A result=%result%&0xff &; if %bit1%==0 && echo -e %space%$[0x08]021$[] File Name%t%\t\t\t%result%%%NULL% ! echo -e %space%$[0x08]021$[] Directory Name%t%\t\t\t%result%%%NULL% &; set /a numdir=%numdir%+1 && if %result%==0 && if %bit1%==1 && set mountISO=Y
setlocal
if not exist level &; call Fn.11 "%find%" "RR" &; if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 if not exist ISODRR |; set /A voladdr=%CDskip%+%address2%-0x21 && set t=\t && set t2=\t && set "target=%CDtarget%" && set LEN_DR=%recordln% && set LEN_FI=%length% && set FileIDRR=
if not exist level &; call Fn.11 "%find%" "RR" &; if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 if not exist ISODRR |; set /a LEN_SU=%LEN_DR%-0x21-%LEN_FI% &; calc %LEN_SU% % 2 && set /a LEN_SU=%LEN_SU%-1
if not exist level &; call Fn.11 "%find%" "RR" &; if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 if not exist ISODRR |; if %LEN_SU%>=4 && set /A startuse=%recordln%-%LEN_SU% &; echo $[0x08]0%startuse:~2%$[] System Use:%NULL% && call :systemuse
endlocal && set "FileIDRR=%FileIDRR%" && set RR=%RR%
if not exist ISOROOT && if not exist ISOROOT2 && if not exist ISOROOT3 &; if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 if not exist ISODRR if not exist ISODRR2 if not exist ISODRR3 |; if exist FileIDRR && set "FileID=%FileIDRR%" &; if not "%found:~-4,2%"=="RR" &; if exist ISODIRR3 && set "found=%found%ISODIRR3 " ! if exist ISODIRR2 && set "found=%found%ISODIRR2 " ! if exist ISODIRR && set "found=%found%ISODIRR  " ! if exist ISODRR && if exist cdfile && set "found=%found%ISODRR  " ! if exist ISODRR && if exist cdfile2 && set "found=%found%ISODRR2 " ! if exist ISODRR && if exist cdfile3 && set "found=%found%ISODRR3 "
if %DONE%==Y && if %hexview%==Y && if exist FileID && if exist level && set /A address=%address2%-0x21 &; raw cat --hex --skip=%address% --length=%recordln% %target%%%NULL%
if %DONE%==Y &; if exist level && set "found=%found% ISODR2 " ! set "found=%found% ISODR " &; if %bit1%==0 && set "RfileID=%FileID%" ! set RfileID= &; endlocal && set mountISO=%mountISO% && set RR=%RR% && set LEN_DR=%recordln% && set LEN_FI=%length% && set address2=%address2% && set FOUND=Y && set "found=%found%" && set namepos=%address2% && set "target=%target%" && set "CDtarget=%CDtarget%" && set DATALBN=%DATALBN% && set DATASIZE=%DATASIZE% && set "RfileID=%RfileID%" && goto :eof
if %DR%==N && if %bit1%==1 && if exist FileID && if exist subdir && if %folder%==Y &; call if %i% "%^subdir%"=="%^FileID%" && set /A address=%address2%-0x1F &; call :read %address% %target% &; set /A LBAdir=%result%&0xffffffff && set result= &; set /A address=%address%+0x8 &; call :read %address% %target% &; set /A DIRsize=%result%&0xffffffff &; endlocal && set mountISO=%mountISO% && set RR=%RR% && set LBAdir=%LBAdir% && set DIRsize=%DIRsize% && set address2=%address2% && set FOUND=Y && goto :eof
set /A dirsize=%dirsize%+%recordln%
if not exist cdfile if not exist cdfile2 if not exist cdfile3 |; if exist FileID && if exist subdir && if exist sublen &; call if %i% "%^FileID:~0,%sublen%%%"=="%subdir%" &; if %bit1%==1 && set FOUND=Y ! set FOUND=N &; goto :directoryrecordend
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==DIR && if exist FileID && set show=Y && set folder=
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if %folder%==Y && if exist FileID && if exist cdname && if exist cdext &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if not "%Easterix%"=="*" &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if "%^name%"=="%^cdname%" && call if "%^ext%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if not exist cdext &; if "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call call :getnameandextension "%^FileID%" &; if exist name && if not exist ext &; set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if %folder%==Y && if exist FileID && if not exist cdext &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if %folder%==Y && if exist FileID && if not exist cdname &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextlen=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext:~0,%cdextlen%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if not exist cdname &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextlen=%@retval% &; call call :getnameandextension "%^FileID%" &; if not exist name && if exist ext &; call if %i% "%^ext:~0,%cdextlen%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if not exist cdname &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextlen=%@retval% &; call call :getnameandextension "%^FileID%" &; if not exist name && if exist ext &; call if %i% "%^ext:~0,%cdextlen%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if exist cdext &; if "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if exist cdext &; if "%Nasterix%"=="*" && if "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist ext &; call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if exist cdext &; if "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if not exist cdext &; if "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if not %folder%==Y && if exist FileID && if not exist cdext &; if "%asterix%"=="*" && call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if exist cdext &; if not "%Nasterix%"=="*" && if not "%asterix%"=="*" && if "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextlen=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name%"=="%^cdname%" && call if %i% "%^ext:~0,%cdextlen%%%"=="%^cdext%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if not exist cdext &; if not "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if not exist ext &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if not exist cdname && if exist cdext &; if not "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdext=%^cdext%" &; set /a cdextln=%@retval% &; call call :getnameandextension "%^FileID%" &; if not exist name && if exist ext &; call if %i% "%^ext:~0,%cdextln%%%"=="%^cdext%" &; set show=Y
if not exist subdir && if not %show%==Y &; if not %DR%==Y if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if %GO%==FILE && if exist FileID && if not %folder%==Y && if exist cdname && if exist cdext &; if not "%Nasterix%"=="*" && if not "%Easterix%"=="*" &; call set "cdname=%^cdname%" &; set /a cdnameln=%@retval% &; call call :getnameandextension "%^FileID%" &; if exist name && if exist ext &; call if %i% "%^name:~0,%cdnameln%%%"=="%^cdname%" && call if %i% "%^ext%"=="%^cdext%" && set show=Y
if %show%==Y && if %DR%==Y && if exist FileID && set DONE=Y &; if not exist Q && set NULL= ! set Q=%Q% &; set /A address2=%address2%-0x21 && goto :directoryrecordloop
if %show%==Y && if exist ATTRIB && if exist HIDDEN &; if %bit0%==0 && if %HIDDEN%==Y && set show= ! if %bit0%==1 && if %HIDDEN%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist DIRS &; if %bit1%==0 && if %DIRS%==Y && set show= ! if %bit1%==1 && if %DIRS%==N && set show= ;; if %show%==Y && if exist ATTRIB && if exist FILES &; if %bit1%==1 && if %FILES%==Y && set show= ! if %bit1%==0 && if %FILES%==N && set show=
if %show%==Y && if not exist Q &; call call Fn.11 "%^FileID%" "\x20" &; echo -n > (md)0x300+1 && echo -n > (md)0x301+1 && call pause --wait=0 "%^FileID%" > (md)0x301+1 && raw cat --skip=1 --locate=\x22\x0A (md)0x301+1 > nul &; set /a length=%?%-1 &; raw dd if=(md)0x301+1 of=(md)0x300+1 bs=1 count=%length% skip=1 > nul && raw cat --locate=\x20 --replace=\x5C (md)0x300+1 > nul && set lsskip=0 && call :lsspaces "FileID"
if %show%==Y && if not exist Q && set show= &; if %bit0%==1 && set "property=(H)" ! set bit0= &; if %bit2%==1 && set "property=%property%(0)" ! set bit2= &; if exist property && set "property=$[0x08]%property%" ! set property= &; if %bit1%==1 && set /a numdirs=%numdirs%+1 && call echo -n $[0x0F] %^FileID%%%property% ! set /a numfiles=%numfiles%+1 && call echo -n $[] %^FileID%%%property% &; set FOUND=Y && set property= &; if %folder%==Y && set numdirs= && set numfiles= && goto :directoryrecordend
if %show%==Y && if %Q%==Y && set show= &; if %bit1%==1 && set /a numdirs=%numdirs%+1 ! set /a numfiles=%numfiles%+1 &; set FOUND=Y &; if %folder%==Y && set numdirs= && set numfiles= && goto :directoryrecordend
if %FOUND%==Y &; if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 |; if not exist Q && echo
set name= && set cdnameln= && set ext= && set cdextln= && set path=
if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if not exist cdfile if not exist cdfile2 |; goto :directoryrecordend
if not exist DR if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; set result= && if %numdir%<=2 &; if %numdir%==2 && set depth=1 ! set depth= &; set /A address2=%address2%-0x21+%recordln% && echo%NULL% && set /A searched=%searched%+%recordln% && set bit1= && goto :directoryrecordloop
if not exist DR if not exist ISOROOT if not exist ISOROOT2 if not exist ISOROOT3 if not exist ISODIR if not exist ISODIR2 if not exist ISODIR3 if not exist ISODIRR if not exist ISODIRR2 if not exist ISODIRR3 |; if exist FileID && set FileID= && set /A address2=%address2%-0x21+%recordln% && echo%NULL% && set /A searched=%searched%+%recordln% && set /A MAX=%LBsize%-0x100 &; if %searched%<=%MAX% && set MAX= && set bit1= && goto :directoryrecordloop ! set checkLEN=Y && set MAX=
if %checkLEN%==Y && call :read %address2% %target% &; set /A result=%result%&0xff &; if %result%==0 && set /A searchln=%searchln%-%LBsize% &; if %searchln%>=0x22 && set /a address2=%address2% / %LBsize% + 1 * %LBsize% && set checkLEN= && set searched=0 && set MAX= && set bit1= && goto :directoryrecordloop ! set checkLEN=
if %checkLEN%==Y && set checkLEN= && set MAX= && set bit1= && goto :directoryrecordloop
:directoryrecordend
if %FOUND%==Y && call Fn.11 "%find%" "DIR" && call Fn.11 "%find%" "RR" && if not exist Q && echo
if %hexview%==Y && if exist CDtarget &; call Fn.11 "%find%" "DRR" |; raw cat --hex --skip=%CDskip% --length=%dirsize% %CDtarget%%%NULL%
if %bit1%==1 && set DIR=Y
if %FOUND%==Y && set result=1
endlocal && set mountISO=%mountISO% && set result=%result% && set FOUND=%FOUND% && set "found=%found%" && set DATALBN=%DATALBN% && set DATASIZE=%DATASIZE% && set DIR=%DIR% && set LEN_DR=%LEN_DR% && set LEN_FI=%LEN_FI% && set address2=%addressR% && set RR=%RR% && set numdirs=%numdirs% && set numfiles=%numfiles%
goto :eof
:fileflags
setlocal && set * && set result=%result% && set depth=%depth% && set space=%space% && set "t2=%t2%" && set "t3=%t3%" && set "NULL=%NULL%"
set /a bit0=%result%>>0&1 &; if %bit0%==1 && set "flag0=Hidden"
set /a bit1=%result%>>1&1 &; if %bit1%==1 && set "flag1=Directory" ! set "flag1=File"
set /a bit2=%result%>>2&1 &; if %bit2%==1 && set "flag2=Associated"
set /a bit3=%result%>>3&1 &; if %bit3%==1 && set "flag3=Information structured according to extended attribute record"
set /a bit4=%result%>>4&1 &; if %bit4%==1 && set "flag4= Owner, group and permissions specified in extended attribute"
set /a bit7=%result%>>7&1 &; if %bit7%==1 && set "flag7= More than one directory record"
if exist NULL && endlocal && set bit0=%bit0% && set bit1=%bit1% && set bit7=%bit7% && goto :eof
if exist space && set t= ! set "t=\t" &; if exist t3 && set t2=
echo -e %space%$[0x08]019$[] File Flags 8 bits\t%t2%%%t3%\t%result%%%NULL%
if %bit0%==1 && echo -e %space%\x20\x20\x20\x20\x20Bit 0 = %bit0%   %flag0%%%NULL%
echo -e %space%\x20\x20\x20\x20\x20Bit 1 = %bit1%   %flag1%%%NULL%
if %bit2%==1 && echo -e %space%\x20\x20\x20\x20\x20Bit 2 = %bit2%   %flag2%%%NULL%
if %bit3%==1 && echo -e %space%\x20\x20\x20\x20\x20Bit 3 = %bit3%   %flag3%%%NULL%
if %bit4%==1 && echo -e %space%\x20\x20\x20\x20\x20Bit 4 = %bit4%   %flag4%%%NULL%
if %bit7%==1 && echo -e %space%\x20\x20\x20\x20\x20Bit 7 = %bit7%   %flag7%%%NULL%
endlocal && set bit0=%bit0% && set bit1=%bit1% && set bit2=%bit2%
goto :eof
:getnameandextension
set "path=%~p1" && set "name=%~n1" && set "ext=%~x1" && goto :eof
:partitioninfo
if exist NULL &; if not %ISOVPD%==Y && goto :eof
setlocal
if not exist DIRsize && set DIRsize=2048 ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=2048 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
echo -e \x20Volume Descriptor Type\t %volnum%\t\t\t\t (%voladdr%)
set result= && set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set result= &; echo -n -e \x20Standard Identifier &; if exist result && echo -e \t %result%\t\t\t\t (%address%) ! echo -e \t EMPTY\t\t\t\t (%address%)
set /A address=%voladdr%+0x6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e \x20Volume Partition Version %result%\t\t\t\t (%address%)
set result= && set /A address=%voladdr%+0x8 &; raw cat --skip=%address% --length=32 %target% | set result= &; echo -n -e \x20System Identifier &; if exist result && echo -e \t %result%(%address%) ! echo -e \t EMPTY\t\t\t\t (%address%)
set result= && set /A address=%voladdr%+0x28 &; raw cat --skip=%address% --length=32 %target% | set result= &; echo -n -e \x20Volume Partition Identifier &; if exist result && echo -e \x20%result%(%address%) ! echo -e \x20EMPTY\t\t\t\t (%address%)
set /A address=%voladdr%+0x48 &; call :read %address% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% &; echo -e \x20Volume Partition Location %LBAle%\t %sec%\t\t (%address%)
set /A address=%voladdr%+0x4C &; call :readbe %address% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% &; echo -e \x20\x20Big Endian\t %LBAbe%\t\t %sec%\t\t (%address%)
set /A address=%voladdr%+0x50 &; call :read %address% %target% &; set /A LBAle=%result%&0xffffffff &; set /a sec=%LBAle% &; echo -e \x20Volume Partition Size %LBAle%\t %sec%\t\t (%address%)
set /A address=%voladdr%+0x54 &; call :readbe %address% %target% &; set /A LBAbe=%result%&0xffffffff &; if not %LBAbe%==%LBAle% && set /a sec=%LBAbe% &; echo -e \x20\x20Big Endian\t %LBAbe%\t\t %sec%\t\t (%address%)
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=0x58 %target%%%NULL%
endlocal && goto :eof
:getCDtotsec
if not exist c &; if %CDtotsec%==0 && raw cat --hex --length=1 %device%%%CDtotsec%+1 > nul || set CDtotsec= && goto :eof
if not exist c &; if not %diffsec%>=1 if not %diff2sec%>=1 |; raw cat --hex --length=1 %device%%%CDtotsec%+1 > nul && set /A CDtotsec=%CDtotsec%+%diffsec% && set /A diff2sec=%diffsec%/2 && goto :getCDtotsec ! set /A CDtotsec=%CDtotsec%-%diff2sec% && set /A diffsec=%diff2sec%/2 && goto :getCDtotsec
if not exist c &; setlocal && set /A lastsec=%CDtotsec%+1 &; raw cat --hex --length=1 %device%%%CDtotsec%+1 > nul && endlocal && set CDtotsec=%lastsec% && set /A lastsec=%lastsec%-1 ! endlocal && set /A lastsec=%lastsec%-2
if not exist c &; set diffsec= && set diff2sec=
if not exist c && if not %ISO%==Y && if not %ETHDR%==Y && set c=0
if exist c && if not %c%>=32 && raw cat --locate=\x00 --length=0x800 %device%%%lastsec%+1 > nul &; if %@retval%==0x800 && set /a c=%c%+1 && set /A CDtotsec=%CDtotsec%-1 && set /A lastsec=%lastsec%-1 && goto :getCDtotsec
set lastsec= && set ISO= && set UDF= &; if %c%>=1 && set CDadjust=%c% && set c= ! set c=
goto :eof
:bootrecord
setlocal
if exist NULL &; call Fn.11 "%find%" "ISOBD " && if not exist Q && set NULL= ! call Fn.11 "%find%" "ISOVDS " && if not exist Q && set NULL= ! endlocal && goto :eof
setlocal
if not exist DIRsize && set DIRsize=2048 ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%voladdr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=2048 skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set voladdr=0 && set CDskip=
set /A address=%voladdr% &; echo -e $[0x08]000$[] Volume Descriptor Type\t\t%volnum%
set result= && set /A address=%voladdr%+0x1 &; raw cat --skip=%address% --length=5 %target% | set result= &; echo -n -e $[0x08]001$[] Standard Identifier &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY
set /A address=%voladdr%+0x6 &; call :read %address% %target% &; set /A result=%result%&0xff &; echo -e $[0x08]006$[] Boot Record Version\t\t\t%result%
set result= && set /A address=%voladdr%+0x6 &; call :getentityID "%address%" "32" &; echo -n -e $[0x08]007$[] Boot System Identifier &; if exist result && echo -e \t\t%result% && set bootrec=Y ! echo -e \t\tEMPTY
set result= && set /A address=%voladdr%+0x27 &; raw cat --skip=%address% --length=32 %target% | set result= &; echo -n -e $[0x08]027$[] Boot Identifier &; if exist result && echo -e \t\t\t%result% ! echo -e \t\t\tEMPTY
if %hexview%==Y && raw cat --hex --skip=%voladdr% --length=0x4F %target%%%NULL%
if not %bootrec%==Y && endlocal && set result=0 && goto :eof ! set bootrec= && if not exist Q && echo
endlocal
:vieweltorito
setlocal
set result= && set /A address=%voladdr%+0x47 &; call :read %address% %target% &; set /A etinfsec=%result%&0xffffffff
set result= && set /A address=%voladdr%+0x4A &; call :readbe %address% %target% &; set /A LBAbe=%result%&0xffffffff
set /a cdsec=%etinfsec% && set /a bytes=%etinfsec% * %LBsize% &; set /A hex=%bytes% &; set "show=%etinfsec%            " && set "show2=%cdsec%          " && set "show3=%hex%            " &; echo -e Booting Catalog:\t\t\t%show:~0,12% %show2:~0,12% %show3:~0,12%%%NULL%
set /A etifaddr=%etinfsec% * %LBsize% && set header=0 && set numboot=0 && set numext=0 && set entry=0 && set extinf=0 && set LBAbe= && set index=0x1020
if not exist DIRsize && set DIRsize=2048 ! set DIRsize=%DIRsize% &; set /a TGTsec=%DIRsize%/0x200 &; calc %DIRsize% % 0x200 && set /a TGTsec=%LBsize%/0x200+%TGTsec% ! set TGTsec=%TGTsec% &; set /a TGTsec=%LBsize%/0x200+%TGTsec% &; echo -n > (md)%mdbase%+%TGTsec% && set /A CDskip=%etifaddr% &; raw dd if=%target% of=(md)%mdbase%+%TGTsec% bs=1 count=%DIRsize% skip=%CDskip% > nul && set target=(md)%mdbase%+%TGTsec% && set etifaddr=0 && set CDskip=
call :viewheader &; set result=
endlocal && goto :eof
:viewheader
set result= && set bytes= && set hex= && set initial= && set address= && set t=
call :read %etifaddr% %target% &; set /A initial=%result%&0xff
if %initial%==0x1 && if %header%==0 && goto :viewvalidationheader
if %initial%==0x90 && set /a header=%header%+1 && set ls90addr=%etifaddr% && set ls88addr= && goto :viewsectionheader
if %initial%==0x91 && set /a header=%header%+1 && set ls91addr=%etifaddr% && set ls88addr= && goto :viewsectionheader
if %initial%==0x88 && echo -e \x20\x20INVALID Section Entry\t\t\t\t\t\t     %etifaddr%%%NULL% && set numentry=0 && set entry=invalid && set /a numboot=%numboot%+1 && set ls44addr= && set extinf=0 && goto :viewsectionentry
if %initial%==0x44 && echo -e \x20\x20INVALID Section Extension\t\t\t\t\t\t     %etifaddr%%%NULL% && set extinf=invalid && goto :viewsectionentryextension
if not %initial%==0x0 && echo -e \x20\x20INVALID Header:\t %initial%\t\t\t\t     %etifaddr%%%NULL%
if %initial%==0x0 &; raw cat --skip=%etifaddr% --locate=\x00 --length=0x20 %target% > nul &; if %@retval%==0x20 && set result= && goto :eof
if not exist NULL && if %hexview%==Y && if %initial%==0x0 &; raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if %initial%==0x0 && set /A address=%etifaddr%+0x8 &; call :read %address% %target% &; set /a bootinit=%result%&0xffffffff &; if not %bootinit%==0 && set /A address=%etifaddr%+0x5 &; call :read %address% %target% &; set /a bootinit=%result%&0xff &; if %bootinit%==0 && set bootinit=0x00 && set /a entry=%entry%+1 && set /a numboot=%numboot%+1 && set extinf=0 && goto :viewsectionentry ! set bootinit=
set result= && goto :eof
:viewvalidationheader
set platform= && set vendorid= && set checksum= && set result= && set t=
if not exist Q && if %viewentr%==%header% && set NULL=
echo -e $[0x08]000$[] Validation Header%NULL%
echo -e \x20\x20\x20\x20$[0x08]000$[] Indicator\t\t\t%initial%%%NULL%
set /A address=%etifaddr%+0x1 &; call :read %address% %target% &; set /A platform=%result%&0xff &; set "show=%platform%            " &; if %platform%==0 && set tgtsys=80x86 ! if %platform%==1 && set tgtsys=PowerPC ! if %platform%==2 && set tgtsys=Mac ! if %platform%==0xef && set tgtsys=EFI ! set "notvalid=<not valid>" &; if exist tgtsys && echo -e \x20\x20\x20\x20$[0x08]001$[] Platform ID\t\t\t%show:~0,12% %tgtsys%%%NULL% && set tgtsys= ! echo \x20\x20\x20\x20$[0x08]01$[] Platform ID\t\t %platform%\t %notvalid%%%NULL% && set notvalid= && set eltcheck=0
set /A address=%etifaddr%+0x4 &; raw cat --skip=%address% --length=24 %target% | set vendorid= &; if not exist vendorid && set vendorid=EMPTY ! set "vendorid=%vendorid%" &; echo -e \x20\x20\x20\x20$[0x08]004$[] Vendor ID\t\t\t%vendorid%%%NULL%
set /A address=%etifaddr%+0x1C &; call :read %address% %target% &; set /A checksum=%result%&0xffff &; set "show=%checksum%            " &; echo -n -e \x20\x20\x20\x20$[0x08]01C$[] Checksum\t\t\t%show:~0,12%%%NULL% && call :calculateeltoritochecksum "%etifaddr%" "%target%" &; if %result%==%checksum% && echo -e \x20<valid>%NULL% ! echo -e \x20<not valid - should be %result%>%NULL% && set eltcheck=0
set /A address=%etifaddr%+0x1E &; call :read %address% %target% &; set /A magicbyt=%result%&0xffff &; set "show=%magicbyt%            " &; echo -n -e \x20\x20\x20\x20$[0x08]01E$[] Boot Signature\t\t\t%show:~0,12%%%NULL% &; if %magicbyt%==0xaa55 && echo -e \x20<valid>%NULL% ! echo -e \x20<not valid>%NULL% && set eltcheck=0
if not exist NULL && if %hexview%==Y && raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if %viewentr%==%header% &; if %initial%==0x1 && set hd01addr=%etifaddr% ! set etifaddr= &; goto :eof
set /A etifaddr=%etifaddr%+0x20 && set numboot=1
:viewdefaultbootentry
set bootinit= && set emulatio= && set bioscode= && set partid= && set btsccnt= && set bootoff= && set result= && set t=
if not exist Q && if %viewboot%==%numboot% && if not %MODE%==save && set NULL=
echo -e $[0x08]020$[] Default Boot Entry\t\t\t\t\t\t  {Entry %numboot%}%NULL%
call :read %etifaddr% %target% &; set /A bootinit=%result%&0xff &; set "show=%bootinit%            " &; echo -n -e \x20\x20\x20\x20$[0x08]000$[] Boot Indicator\t\t\t%show:~0,12%%%NULL% &; if %bootinit%==0x88 && echo -e \x20Bootable%NULL% ! if %bootinit%==0x00 && echo -e \x20Not bootable%NULL% ! echo -e \x20<not valid>%NULL%
set /A address=%etifaddr%+0x1 &; call :read %address% %target% &; set /A emulatio=%result%&0xff &; if %emulatio:~-1,1%==0 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio%\t     No Emulation%NULL% ! if %emulatio:~-1,1%==1 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio:~-1,1%\t     1.2m Floppy Emulation%NULL% ! if %emulatio:~-1,1%==2 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio:~-1,1%\t     1.44m Floppy Emulation%NULL% ! if %emulatio:~-1,1%==3 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio:~-1,1%\t     2.88m Floppy Emulation%NULL% ! if %emulatio:~-1,1%==4 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio%\t     Hard Disk Emulation%NULL% ! echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%emulatio%\t     <not valid>%NULL% && set eltcheck=0
set /A address=%etifaddr%+0x2 &; call :read %address% %target% &; set /A bioscode=%result%&0xffff &; echo -e \x20\x20\x20\x20$[0x08]002$[] Load Segment\t\t\t%bioscode%%%NULL%
set /A address=%etifaddr%+0x4 &; call :read %address% %target% &; set /A partid=%result%&0xff &; echo -e \x20\x20\x20\x20$[0x08]004$[] Partition ID\t\t\t%partid%%%NULL%
set /A address=%etifaddr%+0x6 &; call :read %address% %target% &; set /A btsccnt=%result%&0xffff &; set "show=%btsccnt%            " && set /a sectors=%btsccnt% &; echo -n -e \x20\x20\x20\x20$[0x08]006$[] BootSectorCount\t\t\t%show:~0,12%%%NULL% &; if %sectors%==1 && echo -e \x20%sectors% disk sector%NULL% && set sectors= ! echo -e \x20%sectors% disk sectors%NULL% && set sectors=
set /A address=%etifaddr%+0x8 &; call :read %address% %target% &; set /A bootoff=%result%&0xffffffff &; set "show=%bootoff%            " && set /a sectors=%bootoff% && set /A bytes=%bootoff% * %LBsize% &; set "show2=%sectors%          " &; echo -e \x20\x20\x20\x20$[0x08]008$[] Bootoffset\t\t\t%show:~0,12%%%NULL% %show2:~0,12% %bytes% && set sectors=
if not exist NULL && if %hexview%==Y &; raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if not exist viewboot && if exist pathLBA && if %bootoff%>=%pathLBA% &; if not exist CDFSend && set CDFSend=%bootoff% ! if %bootoff%<=%CDFSend% && set CDFSend=%bootoff%
if %viewboot%==%numboot% &; if %bootinit%==0x88 && set hd88addr=%etifaddr% ! if %bootinit%==0 && set hd00addr=%etifaddr% ! set etifaddr= &; goto :eof
set /A etifaddr=%etifaddr%+0x20
goto :viewheader
:viewsectionheader
set platform= && set numentry= && set bioschar= && set result= && set t=
if %initial%==0x91 && set lstsaddr=%ls90addr% && set ls90addr=
if not exist Q && if %viewentr%==%header% && set NULL=
set /A index=%index%+0x20
echo -e $[0x08]%index:~-3,3%$[] Section Header %header%%%NULL%
set "show=%initial%            " &; echo -e -n \x20\x20\x20\x20$[0x08]000$[] Indicator\t\t\t%show:~0,12%%%NULL% && if %initial%==0x91 && echo -e \x20Final Section%NULL% ! echo -e \x20Section Follows%NULL%
set /A address=%etifaddr%+0x1 &; call :read %address% %target% &; set /A platform=%result%&0xff &; set "show=%platform%            " &; if %platform%==0 && set tgtsys=80x86 ! if %platform%==1 && set tgtsys=PowerPC ! if %platform%==2 && set tgtsys=Mac ! if %platform%==0xef && set tgtsys=EFI ! set "notvalid=<not valid>" &; if exist tgtsys && echo -e \x20\x20\x20\x20$[0x08]001$[] Platform ID\t\t\t%show:~0,12% %tgtsys%%%NULL% && set tgtsys= ! echo \x20\x20\x20\x20$[0x08]001$[] Platform ID\t\t\t%show:~0,12% %notvalid%%%NULL% && set notvalid= && set eltcheck=0
set /A address=%etifaddr%+0x2 &; call :read %address% %target% &; set /A numentry=%result%&0xffff &; if %numentry%<=0x3f && echo -e \x20\x20\x20\x20$[0x08]002$[] Section Entries\t\t\t%numentry%%%NULL% ! echo -e \x20\x20\x20\x20$[0x08]002$[] Number of Section Entries\t\t\t%numentry% not valid%NULL% && set eltcheck=0
set /A address=%etifaddr%+0x4 &; raw cat --skip=%address% --length=28 %target% | set bioschar= &; if not exist bioschar && set bioschar=EMPTY ! set "bioschar=%bioschar%" &; echo -e \x20\x20\x20\x20$[0x08]004$[] Bios String\t\t\t%bioschar%%%NULL%
if %viewentr%==%header% &; if %initial%==0x90 && set hd90addr=%etifaddr% ! if %initial%==0x91 && set hd91addr=%etifaddr% ! set etifaddr= &; goto :eof
if not exist NULL && if %hexview%==Y && raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if %numentry%>=1 && set /A etifaddr=%etifaddr%+0x20 && set /a numboot=%numboot%+1 && set entry=1 && goto :viewsectionentry
set /A etifaddr=%etifaddr%+0x20
goto :viewheader
:viewsectionentry
set bootinit= && set emulatio= && set emulbit5= && set emulbit6= && set emulbit7= && set bioscode= && set partid= && set btsccnt= && set bootoff= && set vendrinf= && set vendinfo= && set result= && set t=
if %entry%==1 && set lstsaddr=%ls91addr% && set ls91addr=
set /A index=%index%+0x20
if not exist Q && if %viewboot%==%numboot% && if not %MODE%==save && set NULL=
if not %entry%==invalid && echo -e $[0x08]%index:~-3,3%$[] Section Entry %entry%\t\t\t\t\t\t  {Entry %numboot%}%NULL% ! echo -e $[0x08]%index:~-3,3%$[] Section Entry %entry%\t\t\t\t\t\t  {Entry %numboot%}%NULL%
call :read %etifaddr% %target% &; set /A bootinit=%result%&0xff &; set "show=%bootinit%            " &; echo -n -e \x20\x20\x20\x20$[0x08]000$[] Boot Indicator\t\t\t%show:~0,12%%%NULL% &; if %bootinit%==0x88 && echo -e \x20Bootable%NULL% ! if %bootinit%==0x00 && echo -e \x20Not bootable%NULL% ! echo -e \x20<not valid>%NULL%
set /A address=%etifaddr%+0x1 &; call :read %address% %target% &; set /A emulatio=%result%&0xff && set /A emul=%result%&0x0f && set /A emulbit=%result%&0xf0 &; set "show=%emulatio%            " &; if %emul%==0x0 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%show:~0,12% No Emulation%NULL% ! if %emul%==0x1 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%show:~0,12% 1.2m Floppy Emulation%NULL% ! if %emul%==0x2 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%show:~0,12% 1.44m Floppy Emulation%NULL% ! if %emul%==0x3 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%show:~0,12% 2.88m Floppy Emulation%NULL% ! if %emul%==0x4 && echo -e \x20\x20\x20\x20$[0x08]001$[] Emulation\t\t\t%show:~0,12% Hard Disk Emulation%NULL% ! echo -e \x20\x20\x20\x20$[0x08]000$[] Emulation\t\t\t%show:~0,12% <not valid>%NULL% && set eltcheck=0
set /a emulbit4=%emulbit%>>4&1 && set /a emulbit5=%emulbit%>>5&1 && set /a emulbit6=%emulbit%>>6&1 && set /a emulbit7=%emulbit%>>7&1 &; if %emulbit4%==1 && set emulbit= && echo -e \t  Bit 4 = %emulbit4%  INVALID\t\t\t     Emulation bit4 is set%NULL% ! set emulbit4=
if exist emulbit &; if %emulbit5%==1 && echo -e \t  Bit 5 = %emulbit5%  CONTINUATION\t\t     Continuation Entry Follows%NULL% ! set emulbit5=
if exist emulbit &; if %emulbit6%==1 && echo -e \t  Bit 6 = %emulbit6%  ATAPI\t\t\t     Image contains driver%NULL% ! set emulbit6=
if exist emulbit &; if %emulbit7%==1 && echo -e \t  Bit 7 = %emulbit7%  SCSI\t\t\t     Image contain drivers%NULL% ! set emulbit7=
set emulbit= &; set /A address=%etifaddr%+0x2 &; call :read %address% %target% &; set /A bioscode=%result%&0xffff &; echo -e \x20\x20\x20\x20$[0x08]002$[] Load Segment\t\t\t%bioscode%%%NULL%
set /A address=%etifaddr%+0x4 &; call :read %address% %target% &; set /A partid=%result%&0xff &; echo -e \x20\x20\x20\x20$[0x08]004$[] Partition ID\t\t\t%partid%%%NULL%
set /A address=%etifaddr%+0x6 &; call :read %address% %target% &; set /A btsccnt=%result%&0xffff &; set /a sectors=%btsccnt% && set "show=%btsccnt%            " &; echo -n -e \x20\x20\x20\x20$[0x08]006$[] BootSectorCount\t\t\t%show:~0,12%%%NULL% &; if %sectors%==1 && echo -e \x20%sectors% disk sector%NULL% && set sectors= ! echo -e \x20%sectors% disk sectors%NULL% && set sectors=
set /A address=%etifaddr%+0x8 &; call :read %address% %target% &; set /A bootoff=%result%&0xffffffff &; set /a sectors=%bootoff% && set /A bytes=%bootoff% * %LBsize% &; set "show=%bootoff%            " &; set "show2=%sectors%          " &; echo -e \x20\x20\x20\x20$[0x08]008$[] Bootoffset\t\t\t%show:~0,12% %show2:~0,12% %bytes%%%NULL% && set sectors=
set /A address=%etifaddr%+0xC &; call :read %address% %target% &; set /A vendrinf=%result%&0xff &; set "show=%vendrinf%           " &; if %vendrinf%==1 && echo -e \x20\x20\x20\x20$[0x08]00C$[] Vendor Specific\t\t\t%show:~0,12% Yes%NULL% ! echo -e \x20\x20\x20\x20$[0x08]00C$[] Vendor Specific\t\t\t%show:~0,12% No%NULL%
set /A address=%etifaddr%+0xD &; raw cat --skip=%address% --length=19 %target% | set vendinfo=
if exist vendinfo &; echo -e \x20\x20\x20\x20$[0x08]00D$[] Information\t\t\t%vendinfo%%%NULL%
if not exist NULL && if %hexview%==Y &; raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if not exist viewboot && if exist pathLBA && if %bootoff%>=%pathLBA% &; if not exist CDFSend && set CDFSend=%bootoff% ! if %bootoff%<=%CDFSend% && set CDFSend=%bootoff%
if %viewboot%==%numboot% &; if %bootinit%==0x88 && set hd88addr=%etifaddr% ! if %bootinit%==0x0 && set hd00addr=%etifaddr% ! set etifaddr= &; goto :eof
call :read %etifaddr% %target% &; set /A initial=%result%&0xff
if %emulbit5%==1 && setlocal && set /A etifaddr=%etifaddr%+0x20 &; call :read %etifaddr% %target% &; set /A initial=%result%&0xff &; if %initial%==0x44 && endlocal && set initial=%initial% ! endlocal && set emulbit5=
if %emulbit5%==1 && set /A etifaddr=%etifaddr%+0x20 && set /a numext=%numext%+1 && set extinf=1 && goto :viewsectionentryextension
if not %entry%>=%numentry% && set /A etifaddr=%etifaddr%+0x20 && set /a numboot=%numboot%+1 && set /a entry=%entry%+1 && goto :viewsectionentry
set /A etifaddr=%etifaddr%+0x20
goto :viewheader
:viewsectionentryextension
set nxtextrc= && set nxtbit5= && set vendexif= && set t=
set /A index=%index%+0x20
if %extinf%==1 && set /A lstbaddr=%etifaddr%-0x20
if %extinf%>=2 && set /A lsteaddr=%etifaddr%-0x20
if not exist Q && if %viewexif%==%numext% && set NULL=
set /A address=%etifaddr%+0x1 &; call :read %address% %target% &; set /A nxtextrc=%result%&0xff && set /a nxtbit5=%result%&0xf0 &; set /a nxtbit5=%nxtbit5%>>5&1
echo -e $[0x08]%index:~-3,3%$[] Section Entry Extension %extinf%\t\t\t\t\t  {Extension %numext%}%NULL%
echo -e \x20\x20\x20\x20$[0x08]000$[] Indicator\t\t\t%initial%\t\t %NULL%
set "show=%nxtextrc%            " &; echo -e -n \x20\x20\x20\x20$[0x08]001$[] Continuation\t\t\t%show:~0,12%%%NULL% &; if not %nxtextrc%==0x0 if not %nxtextrc%==0x20 || echo%NULL% ! echo -e \x20<not valid>%NULL%
if %nxtbit5%==1 && echo -e \t\x20\x20Bit 5 = %nxtbit5%  CONTINUATION\t\t     Next Extension Record follows%NULL% ! if %nxtbit5%==0 && echo -e \t\x20\x20Bit 5 = %nxtbit5%  FINAL\t\t\t     This is Final Extension%NULL% && set nxtbit5=
set /A address=%etifaddr%+0x2 &; raw cat --skip=%address% --length=30 %target% | set extinfo=
echo -e \x20\x20\x20\x20$[0x08]002$[] Information\t\t\t%extinfo%%%NULL%
if not exist NULL && if %hexview%==Y &; raw cat --hex --skip=%etifaddr% --length=0x20 %target% && echo
if %viewexif%==%numext% &; if %initial%==0x44 && set hd44addr=%etifaddr% ! set etifaddr= &; goto :eof
if %nxtbit5%==1 && set nxtbit5= && set /A etifaddr=%etifaddr%+0x20 && set /a numext=%numext%+1 && set /a extinf=%extinf%+1 && goto :viewsectionentryextension
set /A etifaddr=%etifaddr%+0x20
call :read %etifaddr% %target% &; set /A initial=%result%&0xff &; if %initial%==0x88 && set /a entry=%entry%+1 && set /a numboot=%numboot%+1 && goto :viewsectionentry
goto :viewheader
:calculateeltoritochecksum
if not "%~1"=="" if not "%~2"=="" || echo Argument(s) missing to calculate checksum! && goto :eof
setlocal && set result=
set /A address=%~1
if not exist c && set c=13 && set sum=0
set /A mgbtaddr=%address%+0x1E &; call :read %mgbtaddr% %~2 &; set /A sum=%result%&0xffff + %sum%
:eltoritochecksumloop
call :read %address% %~2 &; set /A sum=%result%&0xffff + %sum% && if %c%>=1 && set /A address=%address%+2 && set /a c=%c%-1 && goto :eltoritochecksumloop
set /A result=%sum% * -1 & 0xffff
endlocal && set result=%result% && goto :eof
:read
setlocal && set LE= && set result= &; set /A skip=%~1 &; set /a s=%@retval%
raw cat --hex --skip=%skip% --length=4 %~2 | set LE= &; if %s%<=10 && set "LE=%LE:~10,11%" ! call set "LE=%^LE:~%s%,11%" &; if "%LE:~0,1%"==" " && set "LE=%LE:~1%"
if not "%LE:~9,1%"==" " && set result=0x%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~6,1%"==" " && set result=0x%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~3,1%"==" " && set result=0x%LE:~3,2%%%LE:~0,2% ! if not "%LE:~0,1%"==" " && set result=0x%LE:~0,2%
endlocal && set result=%result% && goto :eof
:read8
setlocal && set LE= && set result= &; set /A skip=%~1 &; set /a s=%@retval%
raw cat --hex --skip=%skip% --length=8 %~2 | set LE= &; if %s%<=10 && set "LE=%LE:~10,24%" ! call set "LE=%^LE:~%s%,24%" &; if "%LE:~0,1%"==" " && set "LE=%LE:~1%"
if "%LE:~11,2%"=="  " &; if not "%LE:~22,2%"==" " && set result=0x%LE:~22,2%%%LE:~19,2%%%LE:~16,2%%%LE:~13,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~19,2%"==" " && set result=0x%LE:~19,2%%%LE:~16,2%%%LE:~13,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~16,2%"==" " && set result=0x%LE:~16,2%%%LE:~13,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~13,2%"==" " && set result=0x%LE:~13,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~9,2%"==" " && set result=0x%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~6,2%"==" " && set result=0x%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~3,2%"==" " && set result=0x%LE:~3,2%%%LE:~0,2% ! if not "%LE:~0,2%"==" " && set result=0x%LE:~0,2%
if not "%LE:~11,2%"=="  " && set "LE=%LE:~0,23%" &; if not "%LE:~21,2%"==" " && set result=0x%LE:~21,2%%%LE:~18,2%%%LE:~15,2%%%LE:~12,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~18,2%"==" " && set result=0x%LE:~18,2%%%LE:~15,2%%%LE:~12,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~15,2%"==" " && set result=0x%LE:~15,2%%%LE:~12,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~12,2%"==" " && set result=0x%LE:~12,2%%%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~9,2%"==" " && set result=0x%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~6,2%"==" " && set result=0x%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~3,2%"==" " && set result=0x%LE:~3,2%%%LE:~0,2% ! if not "%LE:~0,2%"==" " && set result=0x%LE:~0,2%
endlocal && set result=%result% && goto :eof
:Fn.4
call Fn.4 ;; set /A h=%@retval% ;; set /a v=%h%>>8 ;; set /a h=%h%&0xff ;; goto :eof
:Fn.5
call Fn.5 %~1 %~2 ;; goto :eof
:readbe
setlocal && set BE= && set result= &; set /A skip=%~1 &; set /a s=%@retval%
raw cat --hex --skip=%skip% --length=4 %~2 | set BE= &; if %s%<=10 && set "BE=%BE:~10,11%" ! call set "BE=%^BE:~%s%,11%"
if not "%BE:~9,1%"==" " && set result=0x%BE:~0,2%%%BE:~3,2%%%BE:~6,2%%%BE:~9,2% ! if not "%BE:~6,1%"==" " && set result=0x%BE:~0,2%%%BE:~3,2%%%BE:~6,2% ! if not "%BE:~3,1%"==" " && set result=0x%BE:~0,2%%%BE:~3,2% ! if not "%BE:~0,1%"==" " && set result=0x%BE:~0,2%
endlocal && set result=%result% && goto :eof
:freemem
if %g4dver%>=20170830 && raw cat --skip=%skip% --locate=, --number=1 (md)0x300+2 > nul &; set /A skip=%?%-8 &; raw cat --skip=%skip% --length=8 (md)0x300+2 | set base= &; if exist base && set /A base=0x%base% && if %base%<=0x800000 && set /A skip=%skip%+9 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+2 > nul &; set /A skip=%?%-8 &; raw cat --skip=%skip% --length=8 (md)0x300+2 | set length= &; if exist length && set /A length=0x%length% && set /A skip=%skip%+9 &; if not %base%>=0x800000 &; if not %length%<=%freesect% && set freesect=%length% && set mdbase=%base% && set base= && set length= ! set base= && set length= &; raw cat --skip=%skip% --locate=\x0A --number=1 (md)0x300+2 > nul &; set /A skip=%?%+1 &; if not %skip%>=%SEARCH% && goto :freemem
if not %g4dver%>=20170830 && raw cat --skip=%skip% --locate=Usable\x20RAM: --number=1 (md)0x300+2 > nul &; set /A skip=%?%+12 &; raw cat --skip=%skip% --locate=Base: --length=5 (md)0x300+2 > nul &; set /A skip=%?%+6 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+2 > nul &; set /A len=%?%-%skip% &; raw cat --skip=%skip% --length=%len% (md)0x300+2 | set base= &; if exist base && set /A base=%base% &; if not %base%>=0x100000000 && set /A skip=%skip%+%len%+1 &; raw cat --skip=%skip% --locate=Length: --number=1 (md)0x300+2 > nul &; set /A skip=%?%+8 &; raw cat --skip=%skip% --locate=\x0A --number=1 (md)0x300+2 > nul &; set /A len=%?%-%skip% &; raw cat --skip=%skip% --length=%len% (md)0x300+2 | set length= &; if exist length && set /A length=%length% && set /A skip=%skip%+%len% &; if not %length%<=%freesect% && set freesect=%length% && set mdbase=%base% && set base= && set length= ! set base= && set length= &; raw cat --skip=%skip% --locate=\x0A --number=1 (md)0x300+2 > nul &; set /A skip=%?%+1 &; if not %skip%>=%SEARCH% && goto :freemem
if not %g4dver%>=20170830 && set /A mdbase=%mdbase%>>9 && set /A freesect=%freesect%>>9 ! set g4dver=%g4dver% &; set /a freemem=%freesect% * 512 >>20 && set /A mdend=%mdbase%+%freesect% && goto :eof
:help
if not "%~1"=="smallhelp" && echo ISOINFO.G4B v0.6 (20240406), by deomsh
echo Function: Read-out ISO-9660/UDF Descriptors on a device, imagefile or blocklist
echo $[]          Read/ find directories/ files or read-out their Directory Records
echo Use:      ISOINFO.G4B [SWITCHES] DEVICE|FILE
echo Help:     ISOINFO.G4B /?
echo SWITCHES
echo General:  [--Q] [--HEX] [--BLOCKSIZE=bytes] [--MDBASE=sector] [--INFO]
echo ISO 1:    --ISOVDS|--ISOPVD|--BD|--SVD[2]|--VPD|--VDT|--ROOT[2/3]
echo ISO 2:    --DIR|RECORD[2/3][RR]=[PATH][name.ext[;n]] [--ATTRIB=DF[-]H] [--CASE]
echo $[]            [--DEEP]
echo UDF 1:     --VRS|--UDFVDS|--VDS2|--FDS|--AVDP|--PVD|--IUVD|--PD|--LVD|--USD|
echo $[]            --LVID|--FSD|--FE|--EFE|--TD|--VAT|--SPT|--MF|--MMF|--MBF|--SBD|
echo $[]            --UDFROOT [--MIRROR|--PREVIOUS]
echo UDF 2:    --UDFDIR|UDFRECORD=[PATH][filename.ext] [--ATTRIB=DF[-]H0] [--CASE]
echo $[]            [--MIRROR|--PREVIOUS]
echo UDF 3:    --LSN=sector|--LBN=number [--OFFSET=bytes] [--MIRROR|--PREVIOUS]
if "%~1"=="smallhelp" && echo Example:  ISOINFO.G4B (hd0,0)/filename.iso && echo Example:  ISOINFO.G4B --ISOPVD (0xe0) && echo Example:  ISOINFO.G4B --UDFVDS (0xe0) && echo Example:  ISOINFO.G4B --RECORD=FILENAME.EXT;1 (0xe0) && echo Example:  ISOINFO.G4B --RECORD2=boot.catalog (0xe0) && echo Example:  ISOINFO.G4B --DIR2=SUBDIR/bo*.c* (0xe0) && echo Example:  ISOINFO.G4B --UDFRECORD=System\ Volume\ Information (hd0,0)/some.iso && echo Example:  ISOINFO.G4B --UDFDIR="System Volume Information/" (hd0,0)/some.iso && goto :eof
echo FILE: a File or a blocklist containing ISO-9660/ UDF File System
echo $[] FILE must include full device; (rd)/ (md) supported (start >=0x30000 sectors)
echo $[] Partitioned ram-disk supported on grub4dos only: '(rd,0)', '(rd,1)' etcetera
echo $[] Partitioned image files not supported, map (--mem) first and use mapped device
echo Switches:
echo '--ISOVDS' for ISO-9660 Volume Descriptor Sequence, with Root Directory Record
echo '--BD' for ISO-9660 Boot Descriptor and El Torito Boot Catalog
echo '--ISOPVD' for ISO-9660 Primary Volume Descriptor
echo '--SVD' for ISO-9660 Supplementary Volume Descriptor
echo '--SVD2' for second ISO-9660 Supplementary Volume Descriptor
echo '--VPD' for ISO-9660 Volume Partition Descriptor
echo '--ISOVDT' for ISO-9660 Volume Descriptor Terminator
echo '--ISOROOT' for ISO-9660 Root Directory
echo '--VRS' Volume Recognition Sequence to view UDF Extended Descriptors
echo '--UDFVDS' for UDF Volume Descriptor Sequence, includes LVID-sequence
echo '--VDS2' use UDF Reserve Volume Descriptor Sequence (includes LVID-sequence)
echo '--FDS' for UDF File Descriptor Sequence, up to second FID (if available)
echo $[]    On UDF >=v2.00 trying to show System Stream Directory too (if available)
echo '--AVDP' for ALL available UDF Anchor Volume Descriptor Pointers
echo '--UDFPVD' for UDF Primary Volume Descriptor
echo '--IUVD' for UDF Implementation Use Volume Descriptor
echo '--PD' for UDF Partition Descriptor && echo '--LVD' for UDF Logical Volume Descriptor
echo '--USD' for UDF Unallocated Space Descriptor
echo '--LVID' for UDF Logical Volume Integrity Descriptor
echo '--TD' for UDF Terminating Descriptor && echo '--FSD' for UDF File Set Descriptor
echo '--FE' for UDF File Entry of Root Directory
echo '--EFE' for UDF Extended File Entry of Root Directory
echo '--UDFROOT' for UDF Root Directory (FID's only)
echo '--VAT' for UDF Virtual Allocation Table (Header only, except with '--HEX')
echo '--SPT' for UDF Sparing Table (Header only, except with '--HEX')
echo '--MF' for UDF Metadata File, if available (UDF >=v2.50)
echo '--MMF' for UDF Metadata Mirror File, if available (UDF >=v2.50)
echo '--MBF' for UDF Metadata Bitmap File, if available (UDF >=v2.50)
echo '--SBD' for UDF Space Bitmap Descriptor (Header only, except with '--HEX')
echo '--ISODIR[2/3][RR]=[PATH][filename.ext[;n]]': extended ls-style
echo $[]   '--ISODIR[2/3]RR=[PATH][filename.ext]': Rock Ridge Directory/ File Names
echo '--UDFDIR=[PATH][filename.ext]': extended ls-style (default no deleted files shown)
echo $[]   '--ATTRIB=DF[-]H[-]0' ISO/UDF: filter on Attributes (UDF only Deleted = '0')
echo $[]    Attributes Hidden/ Deleted showed greyed-out as '(H)'/ '(0)'
echo '--RECORD[2/3]=[PATH][filename.ext[;n]]': view ISO-9660 Directory Record(s)
echo '--RECORD[2/3]RR=[PATH][filename.ext[;n]]': view Rock Ridge Extensions
echo '--RECORD[RR]=...' uses the ISO-9660 Primary Volume Descriptor only
echo '--RECORD2[RR]=...' uses/ needs the ISO-9660 Supplementary Volume Descriptor
echo '--RECORD3[RR]=...' uses/ needs 2nd ISO-9660 Supplementary Volume Descriptor
echo '--UDFRECORD=[PATH][filename.ext]': one UDF Directory Record; PATH: FID's only
echo $[]   ISO/UDF: without 'PATH', PATH is set to '/'; NO device allowed before 'PATH'
echo $[]   ISO/UDF: '*' asterisk-wildcards allowed, at end of name-part/ extension only
echo $[]           With '--DIR' all files showed, '--RECORD' the first one only
echo $[]           PATH must always end with a forward-slash: '/'
echo $[]           Filename without PATH: searched in the root
echo $[]           Starting filename with '--' or '(' and '*' in PATH not allowed
echo $[]           if '[;n]' is unknown, use wildcard at end of extension for '[;n]'
echo $[]           if a file: export of variables 'Rsize', 'Rsector' and 'Raddress'
echo $[]       '--UDFRECORD=[PATH][filename.ext]' to force UDF on UDF/ISO-Bridge
echo $[]       '--UDFRECORD=PATH': File Identifier Descriptors showed only
echo $[]       '--RECORD=[PATH][filename.ext]' is possible if UDF-only (ISO-9660 first)
echo $[]         '--MDCOPY': copy multi-extent UDF-files to memory, variable 'Rmtarget'
echo $[]                   Maximum file size copied to memory: about 2GB
echo $[]         '--MDMAP=disk_num': copy multi-extent UDF-files to memory, and map
echo $[]                   Maximum file size copied to memory: and mapped about 2GB
echo $[]                   Existing ram-drive sometimes overwritten by 'map'!
echo $[]   '--CASE' for case-sensitive '[PATH][filename.ext]' in all '--DIR'/'--RECORD'
echo $[0x0]"$[]  '--DEEP' for depth of Directories > 8: ISO-9660 only (max depth is 18)
echo '--MIRROR' to use the Metadata Mirror File if exist (UDF v2.50/ v2.60)
echo $[] Only useful if Duplicate Metadata Flag is set, check Logical Volume Descriptor
echo '--PREVIOUS' to use previous VAT/ ADVP if exist (UDF version >= 1.50)
echo $[] With switch '--UDFDIR'/ '--UDFRECORD'/ '--UDFROOT previous VAT is used
echo $[] Otherwise previous UDF-formatting is searched, if exist
echo $[] Without switch '--PREVIOUS' choose 'Re-use values' if asked to stay in History
echo '--BLOCKSIZE=bytes' >=512 (multiple of 512) to force block size, if auto fails
echo '--MDBASE=sector' to set memory start sector (default 0x20000)
echo '--HEX': view Descriptors, Directory Record(s) and Boot Catalog in hex too
echo $[]   If cached in memory starting at zero (except ISO-9660 Records, UDF' SBD/SPT)
echo '--LSN=sector': Logical Sector Number of all UDF-Descriptors mentioned (view)
echo '--LBN=number': Logical Block Number of File-related UDF-Descriptors (view)
echo $[]         Returns variable 'LSN': (Volume) Logical Sector Number of given LBN
echo $[]         With '--LBN' and UDF >=v2.50 on Metadata Partition only (if exist)
echo $[] '--OFFSET=bytes' to set an offset finding file-related UDF-Descriptors
echo '--Q': silent operation, output result, variables: 'LSN', numdirs/files, R-vars
echo '--INFO': gives information about Filesystem, on UDF revision and access type
echo Without descriptor-switches ALL descriptors in available sequences are showed
echo $[] Can be combined with all Special Switches except '--LSN/LBN=sec'
echo Remarks:
echo Identification of ISO-9660, UDF-Bridge (includes ISO-9660) and UDF
echo Default is no case-sensitivity (except devices: always lowercase!)
echo Switches for ISO-9660/ UDF descriptors can be used combined too (experimental)
echo If not specified in switches, ISO/ UDF prefix allowed too: '--PD' => '--UDFPD'
echo If [PATH]filename or DISK|FILE contain spaces, use double qoutes around
echo $[] or escaped '\ ' spaces (without quotes, grub4dos 'ls'-style)
echo With '--ISO/UDFDIR=....' and wildcard ALL corresponding filenames will be found
echo With '--[UDF]RECORD[2/3]=....' and wildcard FIRST filename on disk found only
echo In [PATH]filename.ext a ISO-9660 file usually ends with ';n' directories NEVER
echo Filenames sometimes will be found WITHOUT ';n', especially '--RECORD2/3/RR'
echo Preceding greyed-out numbers are hex-offsets of ISO-9660/El Torito/UDF Specs
echo ISO-Records: System Use Sharing Protocol supported for Rock Ridge Extensions
echo UDF-Records: Embedded Extended Attributes supported only
echo View System Stream File Entry/ Directory: '--UDFFSD' (if exist on UDF >=v2.00)
echo Standard Logical Block Size: CD/DVD and iso's 2048 bytes, otherwise 512 bytes
echo $[] Use '--BLOCKSIZE=bytes' with CD/DVD/iso-file copied to (rd)/ (md), if not auto
echo Used memory-sectors: 0x300+2; 0x20000-0x2.... (default)
echo Example:  ISOINFO.G4B (0xe0) && echo Example:  ISOINFO.G4B (hd0,0)/filename.iso && echo Example:  ISOINFO.G4B --ISOPVD (0xe0) && echo Example:  ISOINFO.G4B --UDFVDS (0xe0)/filename.iso && echo Example:  ISOINFO.G4B --PVD --PVD (0xe0) && echo Example:  ISOINFO.G4B --RECORD=FILENAME.EXT;1 (0xe0) && echo Example:  ISOINFO.G4B --RECORD=FILENA* (0xe0) && echo Example:  ISOINFO.G4B --RECORD=FILENAME.EX* (0xe0) && echo Example:  ISOINFO.G4B --RECORD=SUBDIR1/SUBDIR2 --HEX (0xe0) && echo Example:  ISOINFO.G4B --RECORD=SUBDIR1/SUBDIR2/FILENAME.EXT;1 (0xe0) && echo Example:  ISOINFO.G4B --ISORECORD=Gr* (hd0,0)/some.iso && echo Example:  ISOINFO.G4B --RECORD2=boot.catalog (0xe0)
echo Example:  ISOINFO.G4B --RECORD=SUBDIR/ (0xe0) && echo Example:  ISOINFO.G4B --DIR=SUBDIR/ (0xe0) && echo Example:  ISOINFO.G4B --DIR2=SUBDIR/bo*.c* (0xe0) && echo Example:  ISOINFO.G4B --UDFRECORD=System\ Volume\ Information (hd0,0)/some.iso && echo Example:  ISOINFO.G4B --UDFDIR="System Volume Information/" (hd0,0)/some.iso && echo Example:  ISOINFO.G4B --UDFVAT --BLOCKSIZE=2k (md)0x50000+0x4FF00 && echo Example:  ISOINFO.G4B --UDFFDS (rd) && echo Example:  ISOINFO.G4B --FSD --MIRROR (hd3,0) && echo Example:  ISOINFO.G4B --UDFDIR --PREVIOUS (0xe0) && echo Example:  ISOINFO.G4B --AVDP --PREVIOUS (0xe0) && echo Example:  ISOINFO.G4B --UDFRECORD=FILE.BIG --MDCOPY (0xe0)
echo -e Example:  map /UDFIMAGE.vhd (rd) \x3B\x3B ISOINFO.G4B (rd,0) \x23 grub4dos only
